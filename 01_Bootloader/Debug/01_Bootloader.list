
01_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d70  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08005f70  08005f70  00015f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d4  080063d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063dc  080063dc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080063e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000078  0800645c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  0800645c  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011400  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029cb  00000000  00000000  000314a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb0  00000000  00000000  00033e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d58  00000000  00000000  00034d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029858  00000000  00000000  00035a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d346  00000000  00000000  0005f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe601  00000000  00000000  0006c61e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ac1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003edc  00000000  00000000  0016ac9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08005f58 	.word	0x08005f58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08005f58 	.word	0x08005f58

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
char somedata[] = "Hello from Bootloader\r\n";

#define BL_RX_LEN  200
uint8_t bl_rx_buffer[BL_RX_LEN];

int main(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f4:	f001 f94b 	bl	800188e <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80005f8:	f000 f8ba 	bl	8000770 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005fc:	f000 fa3c 	bl	8000a78 <MX_GPIO_Init>
	MX_ETH_Init();
 8000600:	f000 f970 	bl	80008e4 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000604:	f000 f9ae 	bl	8000964 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000608:	f000 fa0c 	bl	8000a24 <MX_USB_OTG_FS_PCD_Init>
	MX_CRC_Init();
 800060c:	f000 f948 	bl	80008a0 <MX_CRC_Init>
	MX_USART6_UART_Init();
 8000610:	f000 f9d8 	bl	80009c4 <MX_USART6_UART_Init>
//		uint32_t current_tick = HAL_GetTick();
//		printmsg("current_tick = %d\r\n", current_tick);
//		while (HAL_GetTick() <= (current_tick + 500));
//
//	}
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <main+0x50>)
 800061a:	f002 fd57 	bl	80030cc <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d105      	bne.n	8000630 <main+0x40>
		printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r");
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <main+0x54>)
 8000626:	f000 fad1 	bl	8000bcc <printmsg>

		//we should continue in bootloader mode
		bootloader_uart_read_data();
 800062a:	f000 f80f 	bl	800064c <bootloader_uart_read_data>
 800062e:	e004      	b.n	800063a <main+0x4a>
	} else{
		printmsg("BL_DEBUG_MSG:Button is not pressed .. executing user app\n");
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <main+0x58>)
 8000632:	f000 facb 	bl	8000bcc <printmsg>

		//jump to user application
		bootloader_jump_to_user_app();
 8000636:	f000 f86f 	bl	8000718 <bootloader_jump_to_user_app>
 800063a:	2300      	movs	r3, #0
	}
}
 800063c:	4618      	mov	r0, r3
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020800 	.word	0x40020800
 8000644:	08005f70 	.word	0x08005f70
 8000648:	08005fa8 	.word	0x08005fa8

0800064c <bootloader_uart_read_data>:

void bootloader_uart_read_data(void){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

	uint8_t rcv_len = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	71fb      	strb	r3, [r7, #7]

	while(1){
		memset(bl_rx_buffer, 0, 200);
 8000656:	22c8      	movs	r2, #200	; 0xc8
 8000658:	2100      	movs	r1, #0
 800065a:	482b      	ldr	r0, [pc, #172]	; (8000708 <bootloader_uart_read_data+0xbc>)
 800065c:	f005 f86e 	bl	800573c <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host, which is the "length" field of the command packet
		HAL_UART_Receive(C_UART, bl_rx_buffer, 1, HAL_MAX_DELAY);
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	2201      	movs	r2, #1
 8000666:	4928      	ldr	r1, [pc, #160]	; (8000708 <bootloader_uart_read_data+0xbc>)
 8000668:	4828      	ldr	r0, [pc, #160]	; (800070c <bootloader_uart_read_data+0xc0>)
 800066a:	f004 f8b4 	bl	80047d6 <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 800066e:	4b26      	ldr	r3, [pc, #152]	; (8000708 <bootloader_uart_read_data+0xbc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	b29a      	uxth	r2, r3
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	4924      	ldr	r1, [pc, #144]	; (8000710 <bootloader_uart_read_data+0xc4>)
 800067e:	4823      	ldr	r0, [pc, #140]	; (800070c <bootloader_uart_read_data+0xc0>)
 8000680:	f004 f8a9 	bl	80047d6 <HAL_UART_Receive>

		switch(bl_rx_buffer[1]){
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <bootloader_uart_read_data+0xbc>)
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	3b51      	subs	r3, #81	; 0x51
 800068a:	2b0b      	cmp	r3, #11
 800068c:	d836      	bhi.n	80006fc <bootloader_uart_read_data+0xb0>
 800068e:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <bootloader_uart_read_data+0x48>)
 8000690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000694:	080006c5 	.word	0x080006c5
 8000698:	080006cd 	.word	0x080006cd
 800069c:	080006d5 	.word	0x080006d5
 80006a0:	080006dd 	.word	0x080006dd
 80006a4:	080006e5 	.word	0x080006e5
 80006a8:	080006ed 	.word	0x080006ed
 80006ac:	080006f5 	.word	0x080006f5
 80006b0:	08000705 	.word	0x08000705
 80006b4:	08000705 	.word	0x08000705
 80006b8:	08000705 	.word	0x08000705
 80006bc:	08000705 	.word	0x08000705
 80006c0:	08000705 	.word	0x08000705
			case BL_GET_VER:
				bootloader_handle_getver_cmd(bl_rx_buffer);
 80006c4:	4810      	ldr	r0, [pc, #64]	; (8000708 <bootloader_uart_read_data+0xbc>)
 80006c6:	f000 faa7 	bl	8000c18 <bootloader_handle_getver_cmd>
				break;
 80006ca:	e01c      	b.n	8000706 <bootloader_uart_read_data+0xba>
			case BL_GET_HELP:
				bootloader_handle_gethelp_cmd(bl_rx_buffer);
 80006cc:	480e      	ldr	r0, [pc, #56]	; (8000708 <bootloader_uart_read_data+0xbc>)
 80006ce:	f000 faeb 	bl	8000ca8 <bootloader_handle_gethelp_cmd>
				break;
 80006d2:	e018      	b.n	8000706 <bootloader_uart_read_data+0xba>
			case BL_GET_CID:
				bootloader_handle_getcid_cmd(bl_rx_buffer);
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <bootloader_uart_read_data+0xbc>)
 80006d6:	f000 fb1f 	bl	8000d18 <bootloader_handle_getcid_cmd>
				break;
 80006da:	e014      	b.n	8000706 <bootloader_uart_read_data+0xba>
			case BL_GET_RDP_STATUS:
				bootloader_handle_getrdp_cmd(bl_rx_buffer);
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <bootloader_uart_read_data+0xbc>)
 80006de:	f000 fb67 	bl	8000db0 <bootloader_handle_getrdp_cmd>
				break;
 80006e2:	e010      	b.n	8000706 <bootloader_uart_read_data+0xba>
			case BL_GO_TO_ADDR:
				bootloader_handle_go_cmd(bl_rx_buffer);
 80006e4:	4808      	ldr	r0, [pc, #32]	; (8000708 <bootloader_uart_read_data+0xbc>)
 80006e6:	f000 fbaf 	bl	8000e48 <bootloader_handle_go_cmd>
				break;
 80006ea:	e00c      	b.n	8000706 <bootloader_uart_read_data+0xba>
			case BL_FLASH_ERASE:
				bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 80006ec:	4806      	ldr	r0, [pc, #24]	; (8000708 <bootloader_uart_read_data+0xbc>)
 80006ee:	f000 fc15 	bl	8000f1c <bootloader_handle_flash_erase_cmd>
				break;
 80006f2:	e008      	b.n	8000706 <bootloader_uart_read_data+0xba>
			case BL_MEM_WRITE:
				bootloader_handle_mem_write_cmd(bl_rx_buffer);
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <bootloader_uart_read_data+0xbc>)
 80006f6:	f000 fc7d 	bl	8000ff4 <bootloader_handle_mem_write_cmd>
				break;
 80006fa:	e004      	b.n	8000706 <bootloader_uart_read_data+0xba>
				break;
			case BL_DIS_R_W_PROTECT:
				//bootloader_handle_dis_rw_protect(bl_rx_buffer);
				break;
			default:
				printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <bootloader_uart_read_data+0xc8>)
 80006fe:	f000 fa65 	bl	8000bcc <printmsg>
				break;
 8000702:	e000      	b.n	8000706 <bootloader_uart_read_data+0xba>
				break;
 8000704:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 8000706:	e7a6      	b.n	8000656 <bootloader_uart_read_data+0xa>
 8000708:	20000610 	.word	0x20000610
 800070c:	200000a0 	.word	0x200000a0
 8000710:	20000611 	.word	0x20000611
 8000714:	08005fe4 	.word	0x08005fe4

08000718 <bootloader_jump_to_user_app>:

/* Code to jump to user application
 * Here we are assuming FLASH_SECTOR2_BASE_ADDRESS
 * is where the user application is stored
 */
void bootloader_jump_to_user_app(void){
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0

	//just a function pointer to hold the address of the reset handler of the user app.
	void (*app_reset_handler)(void);

	printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 800071e:	480f      	ldr	r0, [pc, #60]	; (800075c <bootloader_jump_to_user_app+0x44>)
 8000720:	f000 fa54 	bl	8000bcc <printmsg>

	// 1. configure the MSP by reading the value from the base address of the sector 1
	uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR1_BASE_ADDRESS;
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <bootloader_jump_to_user_app+0x48>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	60fb      	str	r3, [r7, #12]
	printmsg("BL_DEBUG_MSG:MSP value : %#x\n", msp_value);
 800072a:	68f9      	ldr	r1, [r7, #12]
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <bootloader_jump_to_user_app+0x4c>)
 800072e:	f000 fa4d 	bl	8000bcc <printmsg>
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	f383 8808 	msr	MSP, r3
	//SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address = *(volatile uint32_t*)(FLASH_SECTOR1_BASE_ADDRESS + 4);
 800073c:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <bootloader_jump_to_user_app+0x50>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void*) resethandler_address;
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	607b      	str	r3, [r7, #4]

	printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n", app_reset_handler);
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	4808      	ldr	r0, [pc, #32]	; (800076c <bootloader_jump_to_user_app+0x54>)
 800074a:	f000 fa3f 	bl	8000bcc <printmsg>

	//3. jump to reset handler of the user application
	app_reset_handler();
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4798      	blx	r3
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	0800601c 	.word	0x0800601c
 8000760:	08008000 	.word	0x08008000
 8000764:	08006048 	.word	0x08006048
 8000768:	08008004 	.word	0x08008004
 800076c:	08006068 	.word	0x08006068

08000770 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	b0b8      	sub	sp, #224	; 0xe0
 8000774:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800077a:	2234      	movs	r2, #52	; 0x34
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f004 ffdc 	bl	800573c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2290      	movs	r2, #144	; 0x90
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f004 ffcd 	bl	800573c <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80007a2:	f002 fe0d 	bl	80033c0 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <SystemClock_Config+0x124>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a3a      	ldr	r2, [pc, #232]	; (8000894 <SystemClock_Config+0x124>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b38      	ldr	r3, [pc, #224]	; (8000894 <SystemClock_Config+0x124>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007be:	4b36      	ldr	r3, [pc, #216]	; (8000898 <SystemClock_Config+0x128>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c6:	4a34      	ldr	r2, [pc, #208]	; (8000898 <SystemClock_Config+0x128>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007cc:	6013      	str	r3, [r2, #0]
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <SystemClock_Config+0x128>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007da:	2301      	movs	r3, #1
 80007dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007f6:	2304      	movs	r3, #4
 80007f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 80007fc:	2360      	movs	r3, #96	; 0x60
 80007fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000802:	2302      	movs	r3, #2
 8000804:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 800080e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fe34 	bl	8003480 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xb2>
		Error_Handler();
 800081e:	f000 f9cd 	bl	8000bbc <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if(HAL_PWREx_EnableOverDrive() != HAL_OK){
 8000822:	f002 fddd 	bl	80033e0 <HAL_PWREx_EnableOverDrive>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xc0>
		Error_Handler();
 800082c:	f000 f9c6 	bl	8000bbc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
								| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000836:	2302      	movs	r3, #2
 8000838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK){
 8000850:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000854:	2103      	movs	r1, #3
 8000856:	4618      	mov	r0, r3
 8000858:	f003 f8c0 	bl	80039dc <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xf6>
		Error_Handler();
 8000862:	f000 f9ab 	bl	8000bbc <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <SystemClock_Config+0x12c>)
 8000868:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART6 | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800086a:	2300      	movs	r3, #0
 800086c:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800086e:	2300      	movs	r3, #0
 8000870:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000872:	2300      	movs	r3, #0
 8000874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	4618      	mov	r0, r3
 800087e:	f003 faa5 	bl	8003dcc <HAL_RCCEx_PeriphCLKConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x11c>
		Error_Handler();
 8000888:	f000 f998 	bl	8000bbc <Error_Handler>
	}
}
 800088c:	bf00      	nop
 800088e:	37e0      	adds	r7, #224	; 0xe0
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40007000 	.word	0x40007000
 800089c:	00200900 	.word	0x00200900

080008a0 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

	hcrc.Instance = CRC;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <MX_CRC_Init+0x3c>)
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <MX_CRC_Init+0x40>)
 80008a8:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_CRC_Init+0x3c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_CRC_Init+0x3c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_CRC_Init+0x3c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <MX_CRC_Init+0x3c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_CRC_Init+0x3c>)
 80008c4:	2203      	movs	r2, #3
 80008c6:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK){
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_CRC_Init+0x3c>)
 80008ca:	f001 f945 	bl	8001b58 <HAL_CRC_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_CRC_Init+0x38>
		Error_Handler();
 80008d4:	f000 f972 	bl	8000bbc <Error_Handler>
	}
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000524 	.word	0x20000524
 80008e0:	40023000 	.word	0x40023000

080008e4 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

	heth.Instance = ETH;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_ETH_Init+0x78>)
 80008ea:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <MX_ETH_Init+0x7c>)
 80008ec:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_ETH_Init+0x78>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	605a      	str	r2, [r3, #4]
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_ETH_Init+0x78>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	821a      	strh	r2, [r3, #16]
	heth.Init.MACAddr[0] = 0x00;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_ETH_Init+0x78>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[1] = 0x80;
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_ETH_Init+0x78>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	2280      	movs	r2, #128	; 0x80
 800090a:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[2] = 0xE1;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_ETH_Init+0x78>)
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	3302      	adds	r3, #2
 8000912:	22e1      	movs	r2, #225	; 0xe1
 8000914:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[3] = 0x00;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_ETH_Init+0x78>)
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	3303      	adds	r3, #3
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[4] = 0x00;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_ETH_Init+0x78>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	3304      	adds	r3, #4
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[5] = 0x00;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_ETH_Init+0x78>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	3305      	adds	r3, #5
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
	heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_ETH_Init+0x78>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_ETH_Init+0x78>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_ETH_Init+0x78>)
 8000942:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000946:	621a      	str	r2, [r3, #32]

	if(HAL_ETH_Init(&heth) != HAL_OK){
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_ETH_Init+0x78>)
 800094a:	f001 faf9 	bl	8001f40 <HAL_ETH_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ETH_Init+0x74>
		Error_Handler();
 8000954:	f000 f932 	bl	8000bbc <Error_Handler>
	}
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200005c8 	.word	0x200005c8
 8000960:	40028000 	.word	0x40028000

08000964 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_USART3_UART_Init+0x58>)
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <MX_USART3_UART_Init+0x5c>)
 800096c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_USART3_UART_Init+0x58>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USART3_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_USART3_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART3_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USART3_UART_Init+0x58>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART3_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART3_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART3_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART3_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Init(&huart3) != HAL_OK){
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USART3_UART_Init+0x58>)
 80009a8:	f003 fe36 	bl	8004618 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 80009b2:	f000 f903 	bl	8000bbc <Error_Handler>
	}
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000a0 	.word	0x200000a0
 80009c0:	40004800 	.word	0x40004800

080009c4 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

	huart6.Instance = USART6;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_USART6_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <MX_USART6_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_USART6_UART_Init+0x58>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART6_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_USART6_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART6_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART6_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART6_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART6_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART6_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART6_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK){
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART6_UART_Init+0x58>)
 8000a08:	f003 fe06 	bl	8004618 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART6_UART_Init+0x52>
		Error_Handler();
 8000a12:	f000 f8d3 	bl	8000bbc <Error_Handler>
	}
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000548 	.word	0x20000548
 8000a20:	40011400 	.word	0x40011400

08000a24 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a2a:	2206      	movs	r2, #6
 8000a2c:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a30:	2202      	movs	r2, #2
 8000a32:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a60:	f002 fb65 	bl	800312e <HAL_PCD_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USB_OTG_FS_PCD_Init+0x4a>
		Error_Handler();
 8000a6a:	f000 f8a7 	bl	8000bbc <Error_Handler>
	}
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000120 	.word	0x20000120

08000a78 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08c      	sub	sp, #48	; 0x30
 8000a7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a45      	ldr	r2, [pc, #276]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	4b40      	ldr	r3, [pc, #256]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a3f      	ldr	r2, [pc, #252]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b3d      	ldr	r3, [pc, #244]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b3a      	ldr	r3, [pc, #232]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a39      	ldr	r2, [pc, #228]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b34      	ldr	r3, [pc, #208]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a33      	ldr	r2, [pc, #204]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b31      	ldr	r3, [pc, #196]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000b06:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a27      	ldr	r2, [pc, #156]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <MX_GPIO_Init+0x130>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b24:	4821      	ldr	r0, [pc, #132]	; (8000bac <MX_GPIO_Init+0x134>)
 8000b26:	f002 fae9 	bl	80030fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	4820      	ldr	r0, [pc, #128]	; (8000bb0 <MX_GPIO_Init+0x138>)
 8000b30:	f002 fae4 	bl	80030fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3a:	4b1e      	ldr	r3, [pc, #120]	; (8000bb4 <MX_GPIO_Init+0x13c>)
 8000b3c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	481b      	ldr	r0, [pc, #108]	; (8000bb8 <MX_GPIO_Init+0x140>)
 8000b4a:	f002 f915 	bl	8002d78 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000b4e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b52:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	4619      	mov	r1, r3
 8000b66:	4811      	ldr	r0, [pc, #68]	; (8000bac <MX_GPIO_Init+0x134>)
 8000b68:	f002 f906 	bl	8002d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b6c:	2340      	movs	r3, #64	; 0x40
 8000b6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b70:	2301      	movs	r3, #1
 8000b72:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	480b      	ldr	r0, [pc, #44]	; (8000bb0 <MX_GPIO_Init+0x138>)
 8000b84:	f002 f8f8 	bl	8002d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_GPIO_Init+0x138>)
 8000b9c:	f002 f8ec 	bl	8002d78 <HAL_GPIO_Init>

}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40021800 	.word	0x40021800
 8000bb4:	10110000 	.word	0x10110000
 8000bb8:	40020800 	.word	0x40020800

08000bbc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void){
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <printmsg>:

/*Prints formatted string to console over UART */
void printmsg(char *format, ...){
 8000bcc:	b40f      	push	{r0, r1, r2, r3}
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b096      	sub	sp, #88	; 0x58
 8000bd2:	af00      	add	r7, sp, #0

#ifdef BL_DEBUG_MSG_EN
	char str[80];
	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000bd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bd8:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000be2:	4618      	mov	r0, r3
 8000be4:	f004 fdc8 	bl	8005778 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000be8:	f107 0308 	add.w	r3, r7, #8
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fb27 	bl	8000240 <strlen>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	f107 0108 	add.w	r1, r7, #8
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <printmsg+0x48>)
 8000c00:	f003 fd58 	bl	80046b4 <HAL_UART_Transmit>
	va_end(args);
#endif

}
 8000c04:	bf00      	nop
 8000c06:	3758      	adds	r7, #88	; 0x58
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c0e:	b004      	add	sp, #16
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000548 	.word	0x20000548

08000c18 <bootloader_handle_getver_cmd>:

/**************Implementation of Boot-loader Command Handle functions *********/

/*Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

	uint8_t bl_version;

	// 1) verify the checksum
	printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\n");
 8000c20:	481d      	ldr	r0, [pc, #116]	; (8000c98 <bootloader_handle_getver_cmd+0x80>)
 8000c22:	f7ff ffd3 	bl	8000bcc <printmsg>

	// Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t *)(bl_rx_buffer+command_packet_len - 4));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3b04      	subs	r3, #4
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	613b      	str	r3, [r7, #16]

	if(!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)){
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3b04      	subs	r3, #4
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4619      	mov	r1, r3
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 fa7c 	bl	8001140 <bootloader_verify_crc>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d11a      	bne.n	8000c84 <bootloader_handle_getver_cmd+0x6c>

		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000c4e:	4813      	ldr	r0, [pc, #76]	; (8000c9c <bootloader_handle_getver_cmd+0x84>)
 8000c50:	f7ff ffbc 	bl	8000bcc <printmsg>
		// checksum is correct..
		bootloader_send_ack(bl_rx_buffer[0], 1); // send 'ACK'
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2101      	movs	r1, #1
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fa44 	bl	80010e8 <bootloader_send_ack>
		bl_version = get_bootloader_version();	 // Obtain reply
 8000c60:	f000 fab6 	bl	80011d0 <get_bootloader_version>
 8000c64:	4603      	mov	r3, r0
 8000c66:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\n", bl_version, bl_version);
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <bootloader_handle_getver_cmd+0x88>)
 8000c72:	f7ff ffab 	bl	8000bcc <printmsg>
		bootloader_uart_write_data(&bl_version, 1); // Send reply
 8000c76:	f107 030f 	add.w	r3, r7, #15
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fa93 	bl	80011a8 <bootloader_uart_write_data>
	} else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		//checksum is wrong send nack
		bootloader_send_nack();
	}
}
 8000c82:	e004      	b.n	8000c8e <bootloader_handle_getver_cmd+0x76>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000c84:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <bootloader_handle_getver_cmd+0x8c>)
 8000c86:	f7ff ffa1 	bl	8000bcc <printmsg>
		bootloader_send_nack();
 8000c8a:	f000 fa47 	bl	800111c <bootloader_send_nack>
}
 8000c8e:	bf00      	nop
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	08006094 	.word	0x08006094
 8000c9c:	080060c0 	.word	0x080060c0
 8000ca0:	080060e4 	.word	0x080060e4
 8000ca4:	08006104 	.word	0x08006104

08000ca8 <bootloader_handle_gethelp_cmd>:

/* Helper function to handle BL_GET_HELP command
 * Bootloader sends out All supported Command codes
 */
void bootloader_handle_gethelp_cmd(uint8_t *pBuffer){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <bootloader_handle_gethelp_cmd+0x60>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t *)(bl_rx_buffer + command_packet_len - 4));
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <bootloader_handle_gethelp_cmd+0x60>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	60bb      	str	r3, [r7, #8]

	if(!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)){
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480e      	ldr	r0, [pc, #56]	; (8000d08 <bootloader_handle_gethelp_cmd+0x60>)
 8000cce:	f000 fa37 	bl	8001140 <bootloader_verify_crc>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10d      	bne.n	8000cf4 <bootloader_handle_gethelp_cmd+0x4c>

		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <bootloader_handle_gethelp_cmd+0x64>)
 8000cda:	f7ff ff77 	bl	8000bcc <printmsg>
		bootloader_send_ack(pBuffer[0], sizeof(supported_commands)); // send 'ACK'
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f9ff 	bl	80010e8 <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands, sizeof(supported_commands)); // Send reply
 8000cea:	2108      	movs	r1, #8
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <bootloader_handle_gethelp_cmd+0x68>)
 8000cee:	f000 fa5b 	bl	80011a8 <bootloader_uart_write_data>
	} else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		//checksum is wrong send nack
		bootloader_send_nack();
	}
}
 8000cf2:	e004      	b.n	8000cfe <bootloader_handle_gethelp_cmd+0x56>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000cf4:	4807      	ldr	r0, [pc, #28]	; (8000d14 <bootloader_handle_gethelp_cmd+0x6c>)
 8000cf6:	f7ff ff69 	bl	8000bcc <printmsg>
		bootloader_send_nack();
 8000cfa:	f000 fa0f 	bl	800111c <bootloader_send_nack>
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000610 	.word	0x20000610
 8000d0c:	080060c0 	.word	0x080060c0
 8000d10:	20000000 	.word	0x20000000
 8000d14:	08006104 	.word	0x08006104

08000d18 <bootloader_handle_getcid_cmd>:

/*Helper function to handle BL_GET_CID command */
void bootloader_handle_getcid_cmd(uint8_t *pBuffer){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]

	uint16_t bl_cid_num = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	81fb      	strh	r3, [r7, #14]
	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000d24:	481d      	ldr	r0, [pc, #116]	; (8000d9c <bootloader_handle_getcid_cmd+0x84>)
 8000d26:	f7ff ff51 	bl	8000bcc <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <bootloader_handle_getcid_cmd+0x88>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t*) (bl_rx_buffer + command_packet_len - 4));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3b04      	subs	r3, #4
 8000d36:	4a1a      	ldr	r2, [pc, #104]	; (8000da0 <bootloader_handle_getcid_cmd+0x88>)
 8000d38:	4413      	add	r3, r2
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	613b      	str	r3, [r7, #16]

	if(!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)){
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3b04      	subs	r3, #4
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4619      	mov	r1, r3
 8000d46:	4816      	ldr	r0, [pc, #88]	; (8000da0 <bootloader_handle_getcid_cmd+0x88>)
 8000d48:	f000 f9fa 	bl	8001140 <bootloader_verify_crc>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d11a      	bne.n	8000d88 <bootloader_handle_getcid_cmd+0x70>
		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <bootloader_handle_getcid_cmd+0x8c>)
 8000d54:	f7ff ff3a 	bl	8000bcc <printmsg>
		bootloader_send_ack(pBuffer[0], 2);	// send 'ACK'
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 f9c2 	bl	80010e8 <bootloader_send_ack>
		bl_cid_num = get_mcu_chip_id(); // Obtain reply
 8000d64:	f000 fa3c 	bl	80011e0 <get_mcu_chip_id>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	81fb      	strh	r3, [r7, #14]
		printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\n", bl_cid_num, bl_cid_num);
 8000d6c:	89fb      	ldrh	r3, [r7, #14]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	89fb      	ldrh	r3, [r7, #14]
 8000d72:	461a      	mov	r2, r3
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <bootloader_handle_getcid_cmd+0x90>)
 8000d76:	f7ff ff29 	bl	8000bcc <printmsg>
		bootloader_uart_write_data((uint8_t*) &bl_cid_num, 2); // Send reply
 8000d7a:	f107 030e 	add.w	r3, r7, #14
 8000d7e:	2102      	movs	r1, #2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 fa11 	bl	80011a8 <bootloader_uart_write_data>

	} else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000d86:	e004      	b.n	8000d92 <bootloader_handle_getcid_cmd+0x7a>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000d88:	4808      	ldr	r0, [pc, #32]	; (8000dac <bootloader_handle_getcid_cmd+0x94>)
 8000d8a:	f7ff ff1f 	bl	8000bcc <printmsg>
		bootloader_send_nack();
 8000d8e:	f000 f9c5 	bl	800111c <bootloader_send_nack>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	08006124 	.word	0x08006124
 8000da0:	20000610 	.word	0x20000610
 8000da4:	080060c0 	.word	0x080060c0
 8000da8:	08006150 	.word	0x08006150
 8000dac:	08006104 	.word	0x08006104

08000db0 <bootloader_handle_getrdp_cmd>:

/*Helper function to handle BL_GET_RDP_STATUS command */
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

	uint8_t rdp_level = 0x00;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
	printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 8000dbc:	481d      	ldr	r0, [pc, #116]	; (8000e34 <bootloader_handle_getrdp_cmd+0x84>)
 8000dbe:	f7ff ff05 	bl	8000bcc <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0] + 1;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <bootloader_handle_getrdp_cmd+0x88>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t*) (bl_rx_buffer + command_packet_len - 4));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3b04      	subs	r3, #4
 8000dce:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <bootloader_handle_getrdp_cmd+0x88>)
 8000dd0:	4413      	add	r3, r2
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	613b      	str	r3, [r7, #16]

	if(!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)){
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3b04      	subs	r3, #4
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4816      	ldr	r0, [pc, #88]	; (8000e38 <bootloader_handle_getrdp_cmd+0x88>)
 8000de0:	f000 f9ae 	bl	8001140 <bootloader_verify_crc>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d11a      	bne.n	8000e20 <bootloader_handle_getrdp_cmd+0x70>
		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000dea:	4814      	ldr	r0, [pc, #80]	; (8000e3c <bootloader_handle_getrdp_cmd+0x8c>)
 8000dec:	f7ff feee 	bl	8000bcc <printmsg>
		bootloader_send_ack(pBuffer[0], 1);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f976 	bl	80010e8 <bootloader_send_ack>
		rdp_level = get_flash_rdp_level();
 8000dfc:	f000 fa02 	bl	8001204 <get_flash_rdp_level>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG:RDP level: %d %#x\n", rdp_level, rdp_level);
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	4619      	mov	r1, r3
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <bootloader_handle_getrdp_cmd+0x90>)
 8000e0e:	f7ff fedd 	bl	8000bcc <printmsg>
		bootloader_uart_write_data(&rdp_level, 1);
 8000e12:	f107 030f 	add.w	r3, r7, #15
 8000e16:	2101      	movs	r1, #1
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f9c5 	bl	80011a8 <bootloader_uart_write_data>

	} else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000e1e:	e004      	b.n	8000e2a <bootloader_handle_getrdp_cmd+0x7a>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000e20:	4808      	ldr	r0, [pc, #32]	; (8000e44 <bootloader_handle_getrdp_cmd+0x94>)
 8000e22:	f7ff fed3 	bl	8000bcc <printmsg>
		bootloader_send_nack();
 8000e26:	f000 f979 	bl	800111c <bootloader_send_nack>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08006174 	.word	0x08006174
 8000e38:	20000610 	.word	0x20000610
 8000e3c:	080060c0 	.word	0x080060c0
 8000e40:	080061a0 	.word	0x080061a0
 8000e44:	08006104 	.word	0x08006104

08000e48 <bootloader_handle_go_cmd>:

/*Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(uint8_t *pBuffer){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b088      	sub	sp, #32
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

	// If you want to go to the user app, then enter the address of the reset handler
	// Reset handler address = 08008CF1; Type 08008CF0

	uint32_t go_address = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
	uint8_t addr_valid = ADDR_VALID;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_invalid = ADDR_INVALID;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73bb      	strb	r3, [r7, #14]

	printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000e5c:	4828      	ldr	r0, [pc, #160]	; (8000f00 <bootloader_handle_go_cmd+0xb8>)
 8000e5e:	f7ff feb5 	bl	8000bcc <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1;
 8000e62:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <bootloader_handle_go_cmd+0xbc>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	61bb      	str	r3, [r7, #24]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t*)(bl_rx_buffer + command_packet_len - 4));
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	3b04      	subs	r3, #4
 8000e6e:	4a25      	ldr	r2, [pc, #148]	; (8000f04 <bootloader_handle_go_cmd+0xbc>)
 8000e70:	4413      	add	r3, r2
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	617b      	str	r3, [r7, #20]

	if(!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)){
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	3b04      	subs	r3, #4
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4821      	ldr	r0, [pc, #132]	; (8000f04 <bootloader_handle_go_cmd+0xbc>)
 8000e80:	f000 f95e 	bl	8001140 <bootloader_verify_crc>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d131      	bne.n	8000eee <bootloader_handle_go_cmd+0xa6>
		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000e8a:	481f      	ldr	r0, [pc, #124]	; (8000f08 <bootloader_handle_go_cmd+0xc0>)
 8000e8c:	f7ff fe9e 	bl	8000bcc <printmsg>

		bootloader_send_ack(pBuffer[0], 1);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2101      	movs	r1, #1
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f926 	bl	80010e8 <bootloader_send_ack>

		//extract the go address
		go_address = *((uint32_t*) &pBuffer[2]);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000ea2:	61fb      	str	r3, [r7, #28]
		printmsg("BL_DEBUG_MSG:GO addr: %#x\n", go_address);
 8000ea4:	69f9      	ldr	r1, [r7, #28]
 8000ea6:	4819      	ldr	r0, [pc, #100]	; (8000f0c <bootloader_handle_go_cmd+0xc4>)
 8000ea8:	f7ff fe90 	bl	8000bcc <printmsg>

		if(verify_address(go_address) == ADDR_VALID){
 8000eac:	69f8      	ldr	r0, [r7, #28]
 8000eae:	f000 f9bd 	bl	800122c <verify_address>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d110      	bne.n	8000eda <bootloader_handle_go_cmd+0x92>
			//tell host that address is fine
			bootloader_uart_write_data(&addr_valid, 1);
 8000eb8:	f107 030f 	add.w	r3, r7, #15
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f972 	bl	80011a8 <bootloader_uart_write_data>
			 host must ensure that valid code is present over there
			 Its not the duty of bootloader. so just trust and jump */

			/* Not doing the below line will result in hardfault exception for ARM cortex M */
			//watch : https://www.youtube.com/watch?v=VX_12SjnNhY
			go_address += 1; //make T bit =1
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	61fb      	str	r3, [r7, #28]

			void (*lets_jump)(void) = (void *)go_address;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	613b      	str	r3, [r7, #16]

			printmsg("BL_DEBUG_MSG: jumping to go address! \n");
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <bootloader_handle_go_cmd+0xc8>)
 8000ed0:	f7ff fe7c 	bl	8000bcc <printmsg>

			lets_jump();
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4798      	blx	r3

	} else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000ed8:	e00e      	b.n	8000ef8 <bootloader_handle_go_cmd+0xb0>
			printmsg("BL_DEBUG_MSG:GO addr invalid ! \n");
 8000eda:	480e      	ldr	r0, [pc, #56]	; (8000f14 <bootloader_handle_go_cmd+0xcc>)
 8000edc:	f7ff fe76 	bl	8000bcc <printmsg>
			bootloader_uart_write_data(&addr_invalid, 1);
 8000ee0:	f107 030e 	add.w	r3, r7, #14
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f95e 	bl	80011a8 <bootloader_uart_write_data>
}
 8000eec:	e004      	b.n	8000ef8 <bootloader_handle_go_cmd+0xb0>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000eee:	480a      	ldr	r0, [pc, #40]	; (8000f18 <bootloader_handle_go_cmd+0xd0>)
 8000ef0:	f7ff fe6c 	bl	8000bcc <printmsg>
		bootloader_send_nack();
 8000ef4:	f000 f912 	bl	800111c <bootloader_send_nack>
}
 8000ef8:	bf00      	nop
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	080061c0 	.word	0x080061c0
 8000f04:	20000610 	.word	0x20000610
 8000f08:	080060c0 	.word	0x080060c0
 8000f0c:	080061e8 	.word	0x080061e8
 8000f10:	08006204 	.word	0x08006204
 8000f14:	0800622c 	.word	0x0800622c
 8000f18:	08006104 	.word	0x08006104

08000f1c <bootloader_handle_flash_erase_cmd>:

/*Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

	uint8_t erase_status = 0x00;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
	printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\n");
 8000f28:	482b      	ldr	r0, [pc, #172]	; (8000fd8 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000f2a:	f7ff fe4f 	bl	8000bcc <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1;
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <bootloader_handle_flash_erase_cmd+0xc0>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t*)(bl_rx_buffer + command_packet_len - 4));
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3b04      	subs	r3, #4
 8000f3a:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <bootloader_handle_flash_erase_cmd+0xc0>)
 8000f3c:	4413      	add	r3, r2
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	613b      	str	r3, [r7, #16]

	if(!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)){
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3b04      	subs	r3, #4
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <bootloader_handle_flash_erase_cmd+0xc0>)
 8000f4c:	f000 f8f8 	bl	8001140 <bootloader_verify_crc>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d137      	bne.n	8000fc6 <bootloader_handle_flash_erase_cmd+0xaa>
		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 8000f56:	4822      	ldr	r0, [pc, #136]	; (8000fe0 <bootloader_handle_flash_erase_cmd+0xc4>)
 8000f58:	f7ff fe38 	bl	8000bcc <printmsg>
		bootloader_send_ack(pBuffer[0], 1);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2101      	movs	r1, #1
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f8c0 	bl	80010e8 <bootloader_send_ack>
		printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\n", pBuffer[2], pBuffer[3]);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3303      	adds	r3, #3
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	481a      	ldr	r0, [pc, #104]	; (8000fe4 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000f7a:	f7ff fe27 	bl	8000bcc <printmsg>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1); // Turn on the LED RED
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f84:	4818      	ldr	r0, [pc, #96]	; (8000fe8 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000f86:	f002 f8b9 	bl	80030fc <HAL_GPIO_WritePin>
		erase_status = execute_flash_erase(pBuffer[2], pBuffer[3]);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3303      	adds	r3, #3
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4619      	mov	r1, r3
 8000f98:	4610      	mov	r0, r2
 8000f9a:	f000 f987 	bl	80012ac <execute_flash_erase>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0); // Turn off the LED RED
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa8:	480f      	ldr	r0, [pc, #60]	; (8000fe8 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000faa:	f002 f8a7 	bl	80030fc <HAL_GPIO_WritePin>

		printmsg("BL_DEBUG_MSG: flash erase status: %#x\n", erase_status);
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480e      	ldr	r0, [pc, #56]	; (8000fec <bootloader_handle_flash_erase_cmd+0xd0>)
 8000fb4:	f7ff fe0a 	bl	8000bcc <printmsg>

		bootloader_uart_write_data(&erase_status, 1);
 8000fb8:	f107 030f 	add.w	r3, r7, #15
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f8f2 	bl	80011a8 <bootloader_uart_write_data>

	} else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}
}
 8000fc4:	e004      	b.n	8000fd0 <bootloader_handle_flash_erase_cmd+0xb4>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 8000fc6:	480a      	ldr	r0, [pc, #40]	; (8000ff0 <bootloader_handle_flash_erase_cmd+0xd4>)
 8000fc8:	f7ff fe00 	bl	8000bcc <printmsg>
		bootloader_send_nack();
 8000fcc:	f000 f8a6 	bl	800111c <bootloader_send_nack>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	08006250 	.word	0x08006250
 8000fdc:	20000610 	.word	0x20000610
 8000fe0:	080060c0 	.word	0x080060c0
 8000fe4:	08006280 	.word	0x08006280
 8000fe8:	40020400 	.word	0x40020400
 8000fec:	080062b4 	.word	0x080062b4
 8000ff0:	08006104 	.word	0x08006104

08000ff4 <bootloader_handle_mem_write_cmd>:

/*Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

	//uint8_t addr_valid = ADDR_VALID;
	uint8_t write_status = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
	//uint8_t chksum = 0, len = 0;
	//len = pBuffer[0];
	uint8_t payload_len = pBuffer[6];
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	799b      	ldrb	r3, [r3, #6]
 8001004:	77fb      	strb	r3, [r7, #31]

	uint32_t mem_address = *((uint32_t*) (&pBuffer[2]));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800100c:	61bb      	str	r3, [r7, #24]

	//chksum = pBuffer[len];

	printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\n");
 800100e:	482e      	ldr	r0, [pc, #184]	; (80010c8 <bootloader_handle_mem_write_cmd+0xd4>)
 8001010:	f7ff fddc 	bl	8000bcc <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1;
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <bootloader_handle_mem_write_cmd+0xd8>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t*) (bl_rx_buffer + command_packet_len - 4));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3b04      	subs	r3, #4
 8001020:	4a2a      	ldr	r2, [pc, #168]	; (80010cc <bootloader_handle_mem_write_cmd+0xd8>)
 8001022:	4413      	add	r3, r2
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	613b      	str	r3, [r7, #16]

	if(!bootloader_verify_crc(&bl_rx_buffer[0], command_packet_len - 4, host_crc)){
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3b04      	subs	r3, #4
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4619      	mov	r1, r3
 8001030:	4826      	ldr	r0, [pc, #152]	; (80010cc <bootloader_handle_mem_write_cmd+0xd8>)
 8001032:	f000 f885 	bl	8001140 <bootloader_verify_crc>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d13b      	bne.n	80010b4 <bootloader_handle_mem_write_cmd+0xc0>
		printmsg("BL_DEBUG_MSG:checksum success !!\n");
 800103c:	4824      	ldr	r0, [pc, #144]	; (80010d0 <bootloader_handle_mem_write_cmd+0xdc>)
 800103e:	f7ff fdc5 	bl	8000bcc <printmsg>

		bootloader_send_ack(pBuffer[0], 1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2101      	movs	r1, #1
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f84d 	bl	80010e8 <bootloader_send_ack>

		printmsg("BL_DEBUG_MSG: mem write address : %#x\n", mem_address);
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	4820      	ldr	r0, [pc, #128]	; (80010d4 <bootloader_handle_mem_write_cmd+0xe0>)
 8001052:	f7ff fdbb 	bl	8000bcc <printmsg>

		if(verify_address(mem_address) == ADDR_VALID){
 8001056:	69b8      	ldr	r0, [r7, #24]
 8001058:	f000 f8e8 	bl	800122c <verify_address>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d11c      	bne.n	800109c <bootloader_handle_mem_write_cmd+0xa8>

			printmsg("BL_DEBUG_MSG: valid mem write address\n");
 8001062:	481d      	ldr	r0, [pc, #116]	; (80010d8 <bootloader_handle_mem_write_cmd+0xe4>)
 8001064:	f7ff fdb2 	bl	8000bcc <printmsg>

			//glow the led to indicate bootloader is currently writing to memory
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8001068:	2201      	movs	r2, #1
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	481b      	ldr	r0, [pc, #108]	; (80010dc <bootloader_handle_mem_write_cmd+0xe8>)
 800106e:	f002 f845 	bl	80030fc <HAL_GPIO_WritePin>

			//execute mem write
			write_status = execute_mem_write(&pBuffer[7], mem_address, payload_len);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3307      	adds	r3, #7
 8001076:	7ffa      	ldrb	r2, [r7, #31]
 8001078:	69b9      	ldr	r1, [r7, #24]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f96a 	bl	8001354 <execute_mem_write>
 8001080:	4603      	mov	r3, r0
 8001082:	73fb      	strb	r3, [r7, #15]

			//turn off the led to indicate memory write is over
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	4814      	ldr	r0, [pc, #80]	; (80010dc <bootloader_handle_mem_write_cmd+0xe8>)
 800108a:	f002 f837 	bl	80030fc <HAL_GPIO_WritePin>

			//inform host about the status
			bootloader_uart_write_data(&write_status, 1);
 800108e:	f107 030f 	add.w	r3, r7, #15
 8001092:	2101      	movs	r1, #1
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f887 	bl	80011a8 <bootloader_uart_write_data>
	} else{
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
		bootloader_send_nack();
	}

}
 800109a:	e010      	b.n	80010be <bootloader_handle_mem_write_cmd+0xca>
			printmsg("BL_DEBUG_MSG: invalid mem write address\n");
 800109c:	4810      	ldr	r0, [pc, #64]	; (80010e0 <bootloader_handle_mem_write_cmd+0xec>)
 800109e:	f7ff fd95 	bl	8000bcc <printmsg>
			write_status = ADDR_INVALID;
 80010a2:	2301      	movs	r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]
			bootloader_uart_write_data(&write_status, 1);
 80010a6:	f107 030f 	add.w	r3, r7, #15
 80010aa:	2101      	movs	r1, #1
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f87b 	bl	80011a8 <bootloader_uart_write_data>
}
 80010b2:	e004      	b.n	80010be <bootloader_handle_mem_write_cmd+0xca>
		printmsg("BL_DEBUG_MSG:checksum fail !!\n");
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <bootloader_handle_mem_write_cmd+0xf0>)
 80010b6:	f7ff fd89 	bl	8000bcc <printmsg>
		bootloader_send_nack();
 80010ba:	f000 f82f 	bl	800111c <bootloader_send_nack>
}
 80010be:	bf00      	nop
 80010c0:	3720      	adds	r7, #32
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	080062dc 	.word	0x080062dc
 80010cc:	20000610 	.word	0x20000610
 80010d0:	080060c0 	.word	0x080060c0
 80010d4:	0800630c 	.word	0x0800630c
 80010d8:	08006334 	.word	0x08006334
 80010dc:	40020400 	.word	0x40020400
 80010e0:	0800635c 	.word	0x0800635c
 80010e4:	08006104 	.word	0x08006104

080010e8 <bootloader_send_ack>:

/*This function sends ACK if CRC matches along with "len to follow"*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
	//here we send 2 bytes... first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 80010f8:	23a5      	movs	r3, #165	; 0xa5
 80010fa:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART, ack_buf, 2, HAL_MAX_DELAY);
 8001100:	f107 010c 	add.w	r1, r7, #12
 8001104:	f04f 33ff 	mov.w	r3, #4294967295
 8001108:	2202      	movs	r2, #2
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <bootloader_send_ack+0x30>)
 800110c:	f003 fad2 	bl	80046b4 <HAL_UART_Transmit>
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200000a0 	.word	0x200000a0

0800111c <bootloader_send_nack>:

/*This function sends NACK */
void bootloader_send_nack(void){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8001122:	237f      	movs	r3, #127	; 0x7f
 8001124:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART, &nack, 1, HAL_MAX_DELAY);
 8001126:	1df9      	adds	r1, r7, #7
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	2201      	movs	r2, #1
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <bootloader_send_nack+0x20>)
 8001130:	f003 fac0 	bl	80046b4 <HAL_UART_Transmit>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200000a0 	.word	0x200000a0

08001140 <bootloader_verify_crc>:

//This verifies the CRC of the given buffer in pData
uint8_t bootloader_verify_crc(uint8_t *pData, uint32_t len, uint32_t crc_host){
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xFF;
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	61fb      	str	r3, [r7, #28]

	for(uint32_t i = 0; i < len; i++){
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
 8001154:	e00f      	b.n	8001176 <bootloader_verify_crc+0x36>
		uint32_t i_data = pData[i];
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2201      	movs	r2, #1
 8001166:	4619      	mov	r1, r3
 8001168:	480e      	ldr	r0, [pc, #56]	; (80011a4 <bootloader_verify_crc+0x64>)
 800116a:	f000 fd59 	bl	8001c20 <HAL_CRC_Accumulate>
 800116e:	61f8      	str	r0, [r7, #28]
	for(uint32_t i = 0; i < len; i++){
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	3301      	adds	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	429a      	cmp	r2, r3
 800117c:	d3eb      	bcc.n	8001156 <bootloader_verify_crc+0x16>
	}

	/* Reset CRC Calculation Unit */
	__HAL_CRC_DR_RESET(&hcrc);
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <bootloader_verify_crc+0x64>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <bootloader_verify_crc+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0201 	orr.w	r2, r2, #1
 800118c:	609a      	str	r2, [r3, #8]

	if(uwCRCValue == crc_host){
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d101      	bne.n	800119a <bootloader_verify_crc+0x5a>
		return VERIFY_CRC_SUCCESS;
 8001196:	2300      	movs	r3, #0
 8001198:	e000      	b.n	800119c <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 800119a:	2301      	movs	r3, #1

}
 800119c:	4618      	mov	r0, r3
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000524 	.word	0x20000524

080011a8 <bootloader_uart_write_data>:

/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer, uint32_t len){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
    /*you can replace the below ST's USART driver API call with your MCUs driver API call */
	HAL_UART_Transmit(C_UART, pBuffer, len, HAL_MAX_DELAY);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <bootloader_uart_write_data+0x24>)
 80011be:	f003 fa79 	bl	80046b4 <HAL_UART_Transmit>

}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000a0 	.word	0x200000a0

080011d0 <get_bootloader_version>:

//Just returns the macro value
uint8_t get_bootloader_version(void){
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return (uint8_t)BL_VERSION;
 80011d4:	2310      	movs	r3, #16
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <get_mcu_chip_id>:

//Read the chip identifier or device Identifier
uint16_t get_mcu_chip_id(void){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
	revision. It is part of the DBG_MCU component and is mapped on the external PPB bus (see Section 44.16 on page 1925).
	This code is accessible using the JTAG debug port (4 to 5 pins) or the SW debug port (two pins) or by the user
	software. It is even accessible while the MCU is under system reset. */

	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF; // convert to a 16-bit unsigned int
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <get_mcu_chip_id+0x20>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011f0:	80fb      	strh	r3, [r7, #6]
	return cid;
 80011f2:	88fb      	ldrh	r3, [r7, #6]

}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e0042000 	.word	0xe0042000

08001204 <get_flash_rdp_level>:

/*This function reads the RDP (Read protection option byte) value
 *For more info refer 3.5.1 section in stm32f767xxx
 */
uint8_t get_flash_rdp_level(void){
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0

/* Memory read protection Level 2 is an irreversible operation. When Level 2 is activated,
 * the level of protection cannot be decreased to Level 0 or Level 1. Be careful with this.
 * */

	uint8_t rdp_status = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFF0000;
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <get_flash_rdp_level+0x24>)
 8001210:	603b      	str	r3, [r7, #0]
	rdp_status = (uint8_t)(*pOB_addr >> 8); // get only 1 byte
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 800121a:	79fb      	ldrb	r3, [r7, #7]

}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	1fff0000 	.word	0x1fff0000

0800122c <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address){
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if (go_address >= SRAM1_BASE && go_address <= SRAM1_END){
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a17      	ldr	r2, [pc, #92]	; (8001294 <verify_address+0x68>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d905      	bls.n	8001248 <verify_address+0x1c>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a16      	ldr	r2, [pc, #88]	; (8001298 <verify_address+0x6c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d801      	bhi.n	8001248 <verify_address+0x1c>
		return ADDR_VALID;
 8001244:	2300      	movs	r3, #0
 8001246:	e01e      	b.n	8001286 <verify_address+0x5a>
	} else if(go_address >= SRAM2_BASE && go_address <= SRAM2_END){
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a14      	ldr	r2, [pc, #80]	; (800129c <verify_address+0x70>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d905      	bls.n	800125c <verify_address+0x30>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <verify_address+0x74>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d801      	bhi.n	800125c <verify_address+0x30>
		return ADDR_VALID;
 8001258:	2300      	movs	r3, #0
 800125a:	e014      	b.n	8001286 <verify_address+0x5a>
	} else if(go_address >= FLASH_BASE && go_address <= FLASH_END){
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001262:	d305      	bcc.n	8001270 <verify_address+0x44>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800126a:	d201      	bcs.n	8001270 <verify_address+0x44>
		return ADDR_VALID;
 800126c:	2300      	movs	r3, #0
 800126e:	e00a      	b.n	8001286 <verify_address+0x5a>
	} else if(go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END){
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <verify_address+0x78>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d905      	bls.n	8001284 <verify_address+0x58>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <verify_address+0x7c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d801      	bhi.n	8001284 <verify_address+0x58>
		return ADDR_VALID;
 8001280:	2300      	movs	r3, #0
 8001282:	e000      	b.n	8001286 <verify_address+0x5a>
	} else
		return ADDR_INVALID;
 8001284:	2301      	movs	r3, #1
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	2001ffff 	.word	0x2001ffff
 8001298:	2007c000 	.word	0x2007c000
 800129c:	2007bfff 	.word	0x2007bfff
 80012a0:	20080000 	.word	0x20080000
 80012a4:	40023fff 	.word	0x40023fff
 80012a8:	40025000 	.word	0x40025000

080012ac <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sector_number, uint8_t number_of_sector){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	460a      	mov	r2, r1
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	4613      	mov	r3, r2
 80012ba:	71bb      	strb	r3, [r7, #6]
	// Code needs to modified if your MCU supports more flash sectors
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;

	if (number_of_sector > 12)
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	2b0c      	cmp	r3, #12
 80012c0:	d901      	bls.n	80012c6 <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 80012c2:	2304      	movs	r3, #4
 80012c4:	e03f      	b.n	8001346 <execute_flash_erase+0x9a>

	if ((sector_number == 0xff) || (sector_number <= 11)){
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2bff      	cmp	r3, #255	; 0xff
 80012ca:	d002      	beq.n	80012d2 <execute_flash_erase+0x26>
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b0b      	cmp	r3, #11
 80012d0:	d838      	bhi.n	8001344 <execute_flash_erase+0x98>
		if(sector_number == (uint8_t) 0xff){
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2bff      	cmp	r3, #255	; 0xff
 80012d6:	d10c      	bne.n	80012f2 <execute_flash_erase+0x46>
			HAL_Delay(1000);
 80012d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012dc:	f000 fb34 	bl	8001948 <HAL_Delay>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0); // turn off the LED RED
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e6:	481a      	ldr	r0, [pc, #104]	; (8001350 <execute_flash_erase+0xa4>)
 80012e8:	f001 ff08 	bl	80030fc <HAL_GPIO_WritePin>
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 80012ec:	2301      	movs	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	e012      	b.n	8001318 <execute_flash_erase+0x6c>
			// From here you will lose the connection to the bootloader
		} else{
			/*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 12 - sector_number;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f1c3 030c 	rsb	r3, r3, #12
 80012f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(number_of_sector > remanining_sector){
 80012fc:	79ba      	ldrb	r2, [r7, #6]
 80012fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001302:	429a      	cmp	r2, r3
 8001304:	d902      	bls.n	800130c <execute_flash_erase+0x60>
				number_of_sector = remanining_sector;
 8001306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800130a:	71bb      	strb	r3, [r7, #6]
			}
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8001318:	2301      	movs	r3, #1
 800131a:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 800131c:	f001 fad8 	bl	80028d0 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3; // our mcu will work on this voltage range
 8001320:	2302      	movs	r3, #2
 8001322:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8001324:	f107 020c 	add.w	r2, r7, #12
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f001 fc28 	bl	8002b84 <HAL_FLASHEx_Erase>
 8001334:	4603      	mov	r3, r0
 8001336:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 800133a:	f001 faeb 	bl	8002914 <HAL_FLASH_Lock>

		return status;
 800133e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001342:	e000      	b.n	8001346 <execute_flash_erase+0x9a>
	}

	return INVALID_SECTOR;
 8001344:	2304      	movs	r3, #4
}
 8001346:	4618      	mov	r0, r3
 8001348:	3728      	adds	r7, #40	; 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40020400 	.word	0x40020400

08001354 <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only.
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len){
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]

	uint8_t status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	75fb      	strb	r3, [r7, #23]

	//We have to unlock flash module to get control of registers
	HAL_FLASH_Unlock();
 8001364:	f001 fab4 	bl	80028d0 <HAL_FLASH_Unlock>

	for(uint32_t i = 0; i < len; i++){
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	e013      	b.n	8001396 <execute_mem_write+0x42>
		//Here we program the flash byte by byte
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, mem_address + i, pBuffer[i]);
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	18d1      	adds	r1, r2, r3
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f04f 0400 	mov.w	r4, #0
 8001382:	461a      	mov	r2, r3
 8001384:	4623      	mov	r3, r4
 8001386:	2000      	movs	r0, #0
 8001388:	f001 fa46 	bl	8002818 <HAL_FLASH_Program>
 800138c:	4603      	mov	r3, r0
 800138e:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i = 0; i < len; i++){
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	3301      	adds	r3, #1
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3e7      	bcc.n	800136e <execute_mem_write+0x1a>
	}

	HAL_FLASH_Lock();
 800139e:	f001 fab9 	bl	8002914 <HAL_FLASH_Lock>

	return status;
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_MspInit+0x44>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_MspInit+0x44>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_MspInit+0x44>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_MspInit+0x44>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <HAL_MspInit+0x44>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_MspInit+0x44>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HAL_CRC_MspInit+0x38>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d10b      	bne.n	800141e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_CRC_MspInit+0x3c>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a09      	ldr	r2, [pc, #36]	; (8001430 <HAL_CRC_MspInit+0x3c>)
 800140c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <HAL_CRC_MspInit+0x3c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023000 	.word	0x40023000
 8001430:	40023800 	.word	0x40023800

08001434 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	; 0x38
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a4e      	ldr	r2, [pc, #312]	; (800158c <HAL_ETH_MspInit+0x158>)
 8001452:	4293      	cmp	r3, r2
 8001454:	f040 8096 	bne.w	8001584 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001458:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 800145e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001462:	6313      	str	r3, [r2, #48]	; 0x30
 8001464:	4b4a      	ldr	r3, [pc, #296]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146c:	623b      	str	r3, [r7, #32]
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4a46      	ldr	r2, [pc, #280]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 8001476:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
 800147c:	4b44      	ldr	r3, [pc, #272]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	4b41      	ldr	r3, [pc, #260]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	4a40      	ldr	r2, [pc, #256]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 800148e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001492:	6313      	str	r3, [r2, #48]	; 0x30
 8001494:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a3a      	ldr	r2, [pc, #232]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b38      	ldr	r3, [pc, #224]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4a34      	ldr	r2, [pc, #208]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
 80014c4:	4b32      	ldr	r3, [pc, #200]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4a2e      	ldr	r2, [pc, #184]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	6313      	str	r3, [r2, #48]	; 0x30
 80014dc:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	4a28      	ldr	r2, [pc, #160]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 80014ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f2:	6313      	str	r3, [r2, #48]	; 0x30
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <HAL_ETH_MspInit+0x15c>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001500:	2332      	movs	r3, #50	; 0x32
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001510:	230b      	movs	r3, #11
 8001512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	4619      	mov	r1, r3
 800151a:	481e      	ldr	r0, [pc, #120]	; (8001594 <HAL_ETH_MspInit+0x160>)
 800151c:	f001 fc2c 	bl	8002d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001520:	2386      	movs	r3, #134	; 0x86
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001530:	230b      	movs	r3, #11
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	4817      	ldr	r0, [pc, #92]	; (8001598 <HAL_ETH_MspInit+0x164>)
 800153c:	f001 fc1c 	bl	8002d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001552:	230b      	movs	r3, #11
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	480f      	ldr	r0, [pc, #60]	; (800159c <HAL_ETH_MspInit+0x168>)
 800155e:	f001 fc0b 	bl	8002d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001562:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001574:	230b      	movs	r3, #11
 8001576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157c:	4619      	mov	r1, r3
 800157e:	4808      	ldr	r0, [pc, #32]	; (80015a0 <HAL_ETH_MspInit+0x16c>)
 8001580:	f001 fbfa 	bl	8002d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	3738      	adds	r7, #56	; 0x38
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40028000 	.word	0x40028000
 8001590:	40023800 	.word	0x40023800
 8001594:	40020800 	.word	0x40020800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40021800 	.word	0x40021800

080015a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	; 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a2e      	ldr	r2, [pc, #184]	; (800167c <HAL_UART_MspInit+0xd8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d129      	bne.n	800161a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015c6:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <HAL_UART_MspInit+0xdc>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a2d      	ldr	r2, [pc, #180]	; (8001680 <HAL_UART_MspInit+0xdc>)
 80015cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <HAL_UART_MspInit+0xdc>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015de:	4b28      	ldr	r3, [pc, #160]	; (8001680 <HAL_UART_MspInit+0xdc>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_UART_MspInit+0xdc>)
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b25      	ldr	r3, [pc, #148]	; (8001680 <HAL_UART_MspInit+0xdc>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001608:	2307      	movs	r3, #7
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	481c      	ldr	r0, [pc, #112]	; (8001684 <HAL_UART_MspInit+0xe0>)
 8001614:	f001 fbb0 	bl	8002d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001618:	e02c      	b.n	8001674 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART6)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a1a      	ldr	r2, [pc, #104]	; (8001688 <HAL_UART_MspInit+0xe4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d127      	bne.n	8001674 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_UART_MspInit+0xdc>)
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	4a15      	ldr	r2, [pc, #84]	; (8001680 <HAL_UART_MspInit+0xdc>)
 800162a:	f043 0320 	orr.w	r3, r3, #32
 800162e:	6453      	str	r3, [r2, #68]	; 0x44
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <HAL_UART_MspInit+0xdc>)
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f003 0320 	and.w	r3, r3, #32
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163c:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_UART_MspInit+0xdc>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <HAL_UART_MspInit+0xdc>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6313      	str	r3, [r2, #48]	; 0x30
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_UART_MspInit+0xdc>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001654:	23c0      	movs	r3, #192	; 0xc0
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001664:	2308      	movs	r3, #8
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4619      	mov	r1, r3
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <HAL_UART_MspInit+0xe8>)
 8001670:	f001 fb82 	bl	8002d78 <HAL_GPIO_Init>
}
 8001674:	bf00      	nop
 8001676:	3730      	adds	r7, #48	; 0x30
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40004800 	.word	0x40004800
 8001680:	40023800 	.word	0x40023800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40011400 	.word	0x40011400
 800168c:	40020800 	.word	0x40020800

08001690 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016b0:	d141      	bne.n	8001736 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a22      	ldr	r2, [pc, #136]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016dc:	230a      	movs	r3, #10
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4817      	ldr	r0, [pc, #92]	; (8001744 <HAL_PCD_MspInit+0xb4>)
 80016e8:	f001 fb46 	bl	8002d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4810      	ldr	r0, [pc, #64]	; (8001744 <HAL_PCD_MspInit+0xb4>)
 8001702:	f001 fb39 	bl	8002d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 8001708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170a:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 800170c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001710:	6353      	str	r3, [r2, #52]	; 0x34
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179c:	f000 f8b4 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f003 ff88 	bl	80056e8 <__errno>
 80017d8:	4602      	mov	r2, r0
 80017da:	230c      	movs	r3, #12
 80017dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20080000 	.word	0x20080000
 8001804:	00000400 	.word	0x00000400
 8001808:	20000094 	.word	0x20000094
 800180c:	20000700 	.word	0x20000700

08001810 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <SystemInit+0x28>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <SystemInit+0x28>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <SystemInit+0x28>)
 8001826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800182a:	609a      	str	r2, [r3, #8]
#endif
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001840:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001842:	e003      	b.n	800184c <LoopCopyDataInit>

08001844 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001846:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001848:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800184a:	3104      	adds	r1, #4

0800184c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800184c:	480b      	ldr	r0, [pc, #44]	; (800187c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001850:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001852:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001854:	d3f6      	bcc.n	8001844 <CopyDataInit>
  ldr  r2, =_sbss
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001858:	e002      	b.n	8001860 <LoopFillZerobss>

0800185a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800185a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800185c:	f842 3b04 	str.w	r3, [r2], #4

08001860 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001862:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001864:	d3f9      	bcc.n	800185a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001866:	f7ff ffd3 	bl	8001810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186a:	f003 ff43 	bl	80056f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7fe febf 	bl	80005f0 <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001874:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001878:	080063e4 	.word	0x080063e4
  ldr  r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001880:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001884:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001888:	200006fc 	.word	0x200006fc

0800188c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC_IRQHandler>

0800188e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001892:	2003      	movs	r0, #3
 8001894:	f000 f92c 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001898:	2000      	movs	r0, #0
 800189a:	f000 f805 	bl	80018a8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800189e:	f7ff fd85 	bl	80013ac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f939 	bl	8001b3e <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 f90f 	bl	8001b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	; (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000008 	.word	0x20000008
 8001900:	20000010 	.word	0x20000010
 8001904:	2000000c 	.word	0x2000000c

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000010 	.word	0x20000010
 800192c:	200006d8 	.word	0x200006d8

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	200006d8 	.word	0x200006d8

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_Delay+0x40>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000010 	.word	0x20000010

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <__NVIC_SetPriorityGrouping+0x40>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	; (80019cc <__NVIC_SetPriorityGrouping+0x40>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00
 80019d0:	05fa0000 	.word	0x05fa0000

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f7ff ff8e 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff47 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff5c 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff8e 	bl	8001a44 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5d 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffb0 	bl	8001aac <SysTick_Config>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e054      	b.n	8001c14 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7f5b      	ldrb	r3, [r3, #29]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fc3a 	bl	80013f4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	791b      	ldrb	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <HAL_CRC_Init+0xc4>)
 8001b94:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0218 	bic.w	r2, r2, #24
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	e00c      	b.n	8001bc2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6899      	ldr	r1, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f93e 	bl	8001e34 <HAL_CRCEx_Polynomial_Set>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e028      	b.n	8001c14 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	795b      	ldrb	r3, [r3, #5]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d105      	bne.n	8001bd6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	e004      	b.n	8001be0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6912      	ldr	r2, [r2, #16]
 8001bde:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	04c11db7 	.word	0x04c11db7

08001c20 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2202      	movs	r2, #2
 8001c34:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d022      	beq.n	8001c84 <HAL_CRC_Accumulate+0x64>
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d002      	beq.n	8001c48 <HAL_CRC_Accumulate+0x28>
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d017      	beq.n	8001c76 <HAL_CRC_Accumulate+0x56>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8001c46:	e024      	b.n	8001c92 <HAL_CRC_Accumulate+0x72>
      for (index = 0U; index < BufferLength; index++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	e00a      	b.n	8001c64 <HAL_CRC_Accumulate+0x44>
        hcrc->Instance->DR = pBuffer[index];
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	441a      	add	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3f0      	bcc.n	8001c4e <HAL_CRC_Accumulate+0x2e>
      temp = hcrc->Instance->DR;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	613b      	str	r3, [r7, #16]
      break;
 8001c74:	e00d      	b.n	8001c92 <HAL_CRC_Accumulate+0x72>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f811 	bl	8001ca2 <CRC_Handle_8>
 8001c80:	6138      	str	r0, [r7, #16]
      break;
 8001c82:	e006      	b.n	8001c92 <HAL_CRC_Accumulate+0x72>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	68b9      	ldr	r1, [r7, #8]
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 f898 	bl	8001dbe <CRC_Handle_16>
 8001c8e:	6138      	str	r0, [r7, #16]
      break;
 8001c90:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001c98:	693b      	ldr	r3, [r7, #16]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b089      	sub	sp, #36	; 0x24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e023      	b.n	8001cfc <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	4413      	add	r3, r2
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	440b      	add	r3, r1
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001cce:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	440b      	add	r3, r1
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001cde:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	3303      	adds	r3, #3
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	440b      	add	r3, r1
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001cf2:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001cf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d3d6      	bcc.n	8001cb4 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d04d      	beq.n	8001dac <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d107      	bne.n	8001d2a <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	4413      	add	r3, r2
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d116      	bne.n	8001d62 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	3301      	adds	r3, #1
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	440b      	add	r3, r1
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	4313      	orrs	r3, r2
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	8b7a      	ldrh	r2, [r7, #26]
 8001d60:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d11f      	bne.n	8001dac <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	4413      	add	r3, r2
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	3301      	adds	r3, #1
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	440b      	add	r3, r1
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	8b7a      	ldrh	r2, [r7, #26]
 8001d98:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	4413      	add	r3, r2
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e013      	b.n	8001df8 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	041a      	lsls	r2, r3, #16
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	440b      	add	r3, r1
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3301      	adds	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d3e6      	bcc.n	8001dd0 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d009      	beq.n	8001e20 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	881a      	ldrh	r2, [r3, #0]
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	371c      	adds	r7, #28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001e44:	231f      	movs	r3, #31
 8001e46:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001e48:	bf00      	nop
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1e5a      	subs	r2, r3, #1
 8001e4e:	613a      	str	r2, [r7, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d009      	beq.n	8001e68 <HAL_CRCEx_Polynomial_Set+0x34>
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b18      	cmp	r3, #24
 8001e6c:	d846      	bhi.n	8001efc <HAL_CRCEx_Polynomial_Set+0xc8>
 8001e6e:	a201      	add	r2, pc, #4	; (adr r2, 8001e74 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e74:	08001f03 	.word	0x08001f03
 8001e78:	08001efd 	.word	0x08001efd
 8001e7c:	08001efd 	.word	0x08001efd
 8001e80:	08001efd 	.word	0x08001efd
 8001e84:	08001efd 	.word	0x08001efd
 8001e88:	08001efd 	.word	0x08001efd
 8001e8c:	08001efd 	.word	0x08001efd
 8001e90:	08001efd 	.word	0x08001efd
 8001e94:	08001ef1 	.word	0x08001ef1
 8001e98:	08001efd 	.word	0x08001efd
 8001e9c:	08001efd 	.word	0x08001efd
 8001ea0:	08001efd 	.word	0x08001efd
 8001ea4:	08001efd 	.word	0x08001efd
 8001ea8:	08001efd 	.word	0x08001efd
 8001eac:	08001efd 	.word	0x08001efd
 8001eb0:	08001efd 	.word	0x08001efd
 8001eb4:	08001ee5 	.word	0x08001ee5
 8001eb8:	08001efd 	.word	0x08001efd
 8001ebc:	08001efd 	.word	0x08001efd
 8001ec0:	08001efd 	.word	0x08001efd
 8001ec4:	08001efd 	.word	0x08001efd
 8001ec8:	08001efd 	.word	0x08001efd
 8001ecc:	08001efd 	.word	0x08001efd
 8001ed0:	08001efd 	.word	0x08001efd
 8001ed4:	08001ed9 	.word	0x08001ed9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d913      	bls.n	8001f06 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001ee2:	e010      	b.n	8001f06 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b07      	cmp	r3, #7
 8001ee8:	d90f      	bls.n	8001f0a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001eee:	e00c      	b.n	8001f0a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	2b0f      	cmp	r3, #15
 8001ef4:	d90b      	bls.n	8001f0e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001efa:	e008      	b.n	8001f0e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	75fb      	strb	r3, [r7, #23]
      break;
 8001f00:	e006      	b.n	8001f10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f02:	bf00      	nop
 8001f04:	e004      	b.n	8001f10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f06:	bf00      	nop
 8001f08:	e002      	b.n	8001f10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f0a:	bf00      	nop
 8001f0c:	e000      	b.n	8001f10 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001f0e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10d      	bne.n	8001f32 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 0118 	bic.w	r1, r3, #24
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001f50:	4ba9      	ldr	r3, [pc, #676]	; (80021f8 <HAL_ETH_Init+0x2b8>)
 8001f52:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e183      	b.n	800226e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d106      	bne.n	8001f80 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fa5a 	bl	8001434 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f80:	4b9e      	ldr	r3, [pc, #632]	; (80021fc <HAL_ETH_Init+0x2bc>)
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	4a9d      	ldr	r2, [pc, #628]	; (80021fc <HAL_ETH_Init+0x2bc>)
 8001f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8c:	4b9b      	ldr	r3, [pc, #620]	; (80021fc <HAL_ETH_Init+0x2bc>)
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f98:	4b99      	ldr	r3, [pc, #612]	; (8002200 <HAL_ETH_Init+0x2c0>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a98      	ldr	r2, [pc, #608]	; (8002200 <HAL_ETH_Init+0x2c0>)
 8001f9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fa2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001fa4:	4b96      	ldr	r3, [pc, #600]	; (8002200 <HAL_ETH_Init+0x2c0>)
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4994      	ldr	r1, [pc, #592]	; (8002200 <HAL_ETH_Init+0x2c0>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f042 0201 	orr.w	r2, r2, #1
 8001fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fca:	f7ff fcb1 	bl	8001930 <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001fd0:	e011      	b.n	8001ff6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001fd2:	f7ff fcad 	bl	8001930 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fe0:	d909      	bls.n	8001ff6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e13b      	b.n	800226e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1e4      	bne.n	8001fd2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f023 031c 	bic.w	r3, r3, #28
 8002016:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002018:	f001 fea4 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 800201c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4a78      	ldr	r2, [pc, #480]	; (8002204 <HAL_ETH_Init+0x2c4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d908      	bls.n	8002038 <HAL_ETH_Init+0xf8>
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	4a77      	ldr	r2, [pc, #476]	; (8002208 <HAL_ETH_Init+0x2c8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d804      	bhi.n	8002038 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f043 0308 	orr.w	r3, r3, #8
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	e027      	b.n	8002088 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	4a73      	ldr	r2, [pc, #460]	; (8002208 <HAL_ETH_Init+0x2c8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d908      	bls.n	8002052 <HAL_ETH_Init+0x112>
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	4a72      	ldr	r2, [pc, #456]	; (800220c <HAL_ETH_Init+0x2cc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d804      	bhi.n	8002052 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f043 030c 	orr.w	r3, r3, #12
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	e01a      	b.n	8002088 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4a6d      	ldr	r2, [pc, #436]	; (800220c <HAL_ETH_Init+0x2cc>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d903      	bls.n	8002062 <HAL_ETH_Init+0x122>
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4a6c      	ldr	r2, [pc, #432]	; (8002210 <HAL_ETH_Init+0x2d0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d911      	bls.n	8002086 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4a6a      	ldr	r2, [pc, #424]	; (8002210 <HAL_ETH_Init+0x2d0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d908      	bls.n	800207c <HAL_ETH_Init+0x13c>
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4a69      	ldr	r2, [pc, #420]	; (8002214 <HAL_ETH_Init+0x2d4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d804      	bhi.n	800207c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	e005      	b.n	8002088 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f043 0310 	orr.w	r3, r3, #16
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	e000      	b.n	8002088 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002086:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002090:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002094:	2100      	movs	r1, #0
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f956 	bl	8002348 <HAL_ETH_WritePHYRegister>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80020a6:	6939      	ldr	r1, [r7, #16]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f9b3 	bl	8002414 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0d9      	b.n	800226e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80020ba:	20ff      	movs	r0, #255	; 0xff
 80020bc:	f7ff fc44 	bl	8001948 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80a7 	beq.w	8002218 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80020ca:	f7ff fc31 	bl	8001930 <HAL_GetTick>
 80020ce:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	461a      	mov	r2, r3
 80020d6:	2101      	movs	r1, #1
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f8cd 	bl	8002278 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80020de:	f7ff fc27 	bl	8001930 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d90f      	bls.n	8002110 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020f4:	6939      	ldr	r1, [r7, #16]
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f98c 	bl	8002414 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0ae      	b.n	800226e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0da      	beq.n	80020d0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800211a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800211e:	2100      	movs	r1, #0
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f911 	bl	8002348 <HAL_ETH_WritePHYRegister>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00b      	beq.n	8002144 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002130:	6939      	ldr	r1, [r7, #16]
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f96e 	bl	8002414 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002140:	2301      	movs	r3, #1
 8002142:	e094      	b.n	800226e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002144:	f7ff fbf4 	bl	8001930 <HAL_GetTick>
 8002148:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	461a      	mov	r2, r3
 8002150:	2101      	movs	r1, #1
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f890 	bl	8002278 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002158:	f7ff fbea 	bl	8001930 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d90f      	bls.n	800218a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800216e:	6939      	ldr	r1, [r7, #16]
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f94f 	bl	8002414 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e071      	b.n	800226e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0da      	beq.n	800214a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	461a      	mov	r2, r3
 800219a:	211f      	movs	r1, #31
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f86b 	bl	8002278 <HAL_ETH_ReadPHYRegister>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00b      	beq.n	80021c0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80021ac:	6939      	ldr	r1, [r7, #16]
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f930 	bl	8002414 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80021bc:	2301      	movs	r3, #1
 80021be:	e056      	b.n	800226e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d004      	beq.n	80021d4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	e002      	b.n	80021da <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	e037      	b.n	800225c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	e032      	b.n	800225c <HAL_ETH_Init+0x31c>
 80021f6:	bf00      	nop
 80021f8:	03938700 	.word	0x03938700
 80021fc:	40023800 	.word	0x40023800
 8002200:	40013800 	.word	0x40013800
 8002204:	01312cff 	.word	0x01312cff
 8002208:	02160ebf 	.word	0x02160ebf
 800220c:	039386ff 	.word	0x039386ff
 8002210:	05f5e0ff 	.word	0x05f5e0ff
 8002214:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	08db      	lsrs	r3, r3, #3
 800221e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002228:	4313      	orrs	r3, r2
 800222a:	b29b      	uxth	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	2100      	movs	r1, #0
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f889 	bl	8002348 <HAL_ETH_WritePHYRegister>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00b      	beq.n	8002254 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002240:	6939      	ldr	r1, [r7, #16]
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f8e6 	bl	8002414 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e00c      	b.n	800226e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002254:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002258:	f7ff fb76 	bl	8001948 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f8d8 	bl	8002414 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop

08002278 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	460b      	mov	r3, r1
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b82      	cmp	r3, #130	; 0x82
 8002298:	d101      	bne.n	800229e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800229a:	2302      	movs	r3, #2
 800229c:	e050      	b.n	8002340 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2282      	movs	r2, #130	; 0x82
 80022a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 031c 	and.w	r3, r3, #28
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8a1b      	ldrh	r3, [r3, #16]
 80022ba:	02db      	lsls	r3, r3, #11
 80022bc:	b29b      	uxth	r3, r3
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80022c4:	897b      	ldrh	r3, [r7, #10]
 80022c6:	019b      	lsls	r3, r3, #6
 80022c8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f023 0302 	bic.w	r3, r3, #2
 80022d8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80022ea:	f7ff fb21 	bl	8001930 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022f0:	e015      	b.n	800231e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80022f2:	f7ff fb1d 	bl	8001930 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002300:	d309      	bcc.n	8002316 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e014      	b.n	8002340 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e4      	bne.n	80022f2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	460b      	mov	r3, r1
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b42      	cmp	r3, #66	; 0x42
 8002368:	d101      	bne.n	800236e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800236a:	2302      	movs	r3, #2
 800236c:	e04e      	b.n	800240c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2242      	movs	r2, #66	; 0x42
 8002372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 031c 	and.w	r3, r3, #28
 8002384:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8a1b      	ldrh	r3, [r3, #16]
 800238a:	02db      	lsls	r3, r3, #11
 800238c:	b29b      	uxth	r3, r3
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002394:	897b      	ldrh	r3, [r7, #10]
 8002396:	019b      	lsls	r3, r3, #6
 8002398:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80023c4:	f7ff fab4 	bl	8001930 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023ca:	e015      	b.n	80023f8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80023cc:	f7ff fab0 	bl	8001930 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023da:	d309      	bcc.n	80023f0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e00d      	b.n	800240c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e4      	bne.n	80023cc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0b0      	sub	sp, #192	; 0xc0
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002430:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002438:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800243a:	2300      	movs	r3, #0
 800243c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002442:	2300      	movs	r3, #0
 8002444:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002446:	2300      	movs	r3, #0
 8002448:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d103      	bne.n	8002462 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800245a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800245e:	663b      	str	r3, [r7, #96]	; 0x60
 8002460:	e001      	b.n	8002466 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800246a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002470:	2300      	movs	r3, #0
 8002472:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002480:	2340      	movs	r3, #64	; 0x40
 8002482:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800248a:	2300      	movs	r3, #0
 800248c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002496:	2300      	movs	r3, #0
 8002498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80024e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024ec:	4bab      	ldr	r3, [pc, #684]	; (800279c <ETH_MACDMAConfig+0x388>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80024f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80024f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80024f8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80024fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80024fc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80024fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002500:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002506:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800250a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800250c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800250e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002514:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002518:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800251a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800251c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800251e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002520:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002524:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002528:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800252a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800253c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff f9fd 	bl	8001948 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002556:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002558:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800255a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800255c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800255e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002560:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002562:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002566:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800256c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800256e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002572:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002574:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002578:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800257c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002584:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002586:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002592:	2001      	movs	r0, #1
 8002594:	f7ff f9d8 	bl	8001948 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025a0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025aa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80025b4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80025c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025c4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80025c8:	4013      	ands	r3, r2
 80025ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80025ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025d2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80025d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80025d8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80025da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80025de:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80025e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80025e4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80025e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80025ea:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80025ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80025f0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80025f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002604:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002610:	2001      	movs	r0, #1
 8002612:	f7ff f999 	bl	8001948 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800261e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002620:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002624:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800263a:	2001      	movs	r0, #1
 800263c:	f7ff f984 	bl	8001948 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002648:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800264e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002652:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002658:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800265c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800266e:	2304      	movs	r3, #4
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800267c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800267e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002688:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800268e:	2300      	movs	r3, #0
 8002690:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002692:	2300      	movs	r3, #0
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	f241 0318 	movw	r3, #4120	; 0x1018
 800269e:	4413      	add	r3, r2
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80026a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026aa:	4b3d      	ldr	r3, [pc, #244]	; (80027a0 <ETH_MACDMAConfig+0x38c>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80026b2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80026b4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80026b6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80026b8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80026ba:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80026bc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80026be:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80026c0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80026c2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80026c4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80026c6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80026c8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80026ca:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80026ce:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80026d2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80026d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	f241 0318 	movw	r3, #4120	; 0x1018
 80026e6:	4413      	add	r3, r2
 80026e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026ec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f241 0318 	movw	r3, #4120	; 0x1018
 80026f6:	4413      	add	r3, r2
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026fe:	2001      	movs	r0, #1
 8002700:	f7ff f922 	bl	8001948 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	f241 0318 	movw	r3, #4120	; 0x1018
 800270c:	4413      	add	r3, r2
 800270e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002712:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002718:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800271a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800271c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002720:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002724:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002728:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800272a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800272c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800272e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800274c:	2001      	movs	r0, #1
 800274e:	f7ff f8fb 	bl	8001948 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800275a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800275e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d10d      	bne.n	8002784 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002770:	4413      	add	r3, r2
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6811      	ldr	r1, [r2, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <ETH_MACDMAConfig+0x390>)
 800277a:	431a      	orrs	r2, r3
 800277c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002780:	440b      	add	r3, r1
 8002782:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	461a      	mov	r2, r3
 800278a:	2100      	movs	r1, #0
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f80b 	bl	80027a8 <ETH_MACAddressConfig>
}
 8002792:	bf00      	nop
 8002794:	37c0      	adds	r7, #192	; 0xc0
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	ff20810f 	.word	0xff20810f
 80027a0:	f8de3f23 	.word	0xf8de3f23
 80027a4:	00010040 	.word	0x00010040

080027a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3305      	adds	r3, #5
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	3204      	adds	r2, #4
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <ETH_MACAddressConfig+0x68>)
 80027ca:	4413      	add	r3, r2
 80027cc:	461a      	mov	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3303      	adds	r3, #3
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	061a      	lsls	r2, r3, #24
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3302      	adds	r3, #2
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3301      	adds	r3, #1
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	4313      	orrs	r3, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	7812      	ldrb	r2, [r2, #0]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <ETH_MACAddressConfig+0x6c>)
 80027fa:	4413      	add	r3, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	6013      	str	r3, [r2, #0]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40028040 	.word	0x40028040
 8002814:	40028044 	.word	0x40028044

08002818 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800282a:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_FLASH_Program+0xb0>)
 800282c:	7d1b      	ldrb	r3, [r3, #20]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_FLASH_Program+0x1e>
 8002832:	2302      	movs	r3, #2
 8002834:	e043      	b.n	80028be <HAL_FLASH_Program+0xa6>
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_FLASH_Program+0xb0>)
 8002838:	2201      	movs	r2, #1
 800283a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800283c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002840:	f000 f878 	bl	8002934 <FLASH_WaitForLastOperation>
 8002844:	4603      	mov	r3, r0
 8002846:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d133      	bne.n	80028b6 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b03      	cmp	r3, #3
 8002852:	d823      	bhi.n	800289c <HAL_FLASH_Program+0x84>
 8002854:	a201      	add	r2, pc, #4	; (adr r2, 800285c <HAL_FLASH_Program+0x44>)
 8002856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285a:	bf00      	nop
 800285c:	0800286d 	.word	0x0800286d
 8002860:	08002879 	.word	0x08002879
 8002864:	08002885 	.word	0x08002885
 8002868:	08002891 	.word	0x08002891
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800286c:	783b      	ldrb	r3, [r7, #0]
 800286e:	4619      	mov	r1, r3
 8002870:	68b8      	ldr	r0, [r7, #8]
 8002872:	f000 f919 	bl	8002aa8 <FLASH_Program_Byte>
        break;
 8002876:	e012      	b.n	800289e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002878:	883b      	ldrh	r3, [r7, #0]
 800287a:	4619      	mov	r1, r3
 800287c:	68b8      	ldr	r0, [r7, #8]
 800287e:	f000 f8ed 	bl	8002a5c <FLASH_Program_HalfWord>
        break;
 8002882:	e00c      	b.n	800289e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4619      	mov	r1, r3
 8002888:	68b8      	ldr	r0, [r7, #8]
 800288a:	f000 f8c3 	bl	8002a14 <FLASH_Program_Word>
        break;
 800288e:	e006      	b.n	800289e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8002890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002894:	68b8      	ldr	r0, [r7, #8]
 8002896:	f000 f88d 	bl	80029b4 <FLASH_Program_DoubleWord>
        break;
 800289a:	e000      	b.n	800289e <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 800289c:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800289e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028a2:	f000 f847 	bl	8002934 <FLASH_WaitForLastOperation>
 80028a6:	4603      	mov	r3, r0
 80028a8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_FLASH_Program+0xb4>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_FLASH_Program+0xb4>)
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028b6:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <HAL_FLASH_Program+0xb0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	751a      	strb	r2, [r3, #20]

  return status;
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	200006dc 	.word	0x200006dc
 80028cc:	40023c00 	.word	0x40023c00

080028d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_FLASH_Unlock+0x38>)
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	da0b      	bge.n	80028fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_FLASH_Unlock+0x38>)
 80028e4:	4a09      	ldr	r2, [pc, #36]	; (800290c <HAL_FLASH_Unlock+0x3c>)
 80028e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <HAL_FLASH_Unlock+0x38>)
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_FLASH_Unlock+0x40>)
 80028ec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_FLASH_Unlock+0x38>)
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	da01      	bge.n	80028fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80028fa:	79fb      	ldrb	r3, [r7, #7]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40023c00 	.word	0x40023c00
 800290c:	45670123 	.word	0x45670123
 8002910:	cdef89ab 	.word	0xcdef89ab

08002914 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_FLASH_Lock+0x1c>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_FLASH_Lock+0x1c>)
 800291e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002922:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40023c00 	.word	0x40023c00

08002934 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <FLASH_WaitForLastOperation+0x78>)
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002946:	f7fe fff3 	bl	8001930 <HAL_GetTick>
 800294a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800294c:	e010      	b.n	8002970 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d00c      	beq.n	8002970 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <FLASH_WaitForLastOperation+0x38>
 800295c:	f7fe ffe8 	bl	8001930 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	d201      	bcs.n	8002970 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e019      	b.n	80029a4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <FLASH_WaitForLastOperation+0x7c>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e8      	bne.n	800294e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <FLASH_WaitForLastOperation+0x7c>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002988:	f000 f8b2 	bl	8002af0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e009      	b.n	80029a4 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <FLASH_WaitForLastOperation+0x7c>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <FLASH_WaitForLastOperation+0x7c>)
 800299e:	2201      	movs	r2, #1
 80029a0:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
  
}  
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	200006dc 	.word	0x200006dc
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80029b4:	b490      	push	{r4, r7}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <FLASH_Program_DoubleWord+0x5c>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <FLASH_Program_DoubleWord+0x5c>)
 80029c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80029cc:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <FLASH_Program_DoubleWord+0x5c>)
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	4a0f      	ldr	r2, [pc, #60]	; (8002a10 <FLASH_Program_DoubleWord+0x5c>)
 80029d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80029d8:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <FLASH_Program_DoubleWord+0x5c>)
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <FLASH_Program_DoubleWord+0x5c>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80029ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	f04f 0400 	mov.w	r4, #0
 80029f6:	0013      	movs	r3, r2
 80029f8:	2400      	movs	r4, #0
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	3204      	adds	r2, #4
 80029fe:	6013      	str	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a00:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc90      	pop	{r4, r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00

08002a14 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <FLASH_Program_Word+0x44>)
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	4a0d      	ldr	r2, [pc, #52]	; (8002a58 <FLASH_Program_Word+0x44>)
 8002a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <FLASH_Program_Word+0x44>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <FLASH_Program_Word+0x44>)
 8002a30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <FLASH_Program_Word+0x44>)
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	4a07      	ldr	r2, [pc, #28]	; (8002a58 <FLASH_Program_Word+0x44>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40023c00 	.word	0x40023c00

08002a5c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <FLASH_Program_HalfWord+0x48>)
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	; (8002aa4 <FLASH_Program_HalfWord+0x48>)
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <FLASH_Program_HalfWord+0x48>)
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <FLASH_Program_HalfWord+0x48>)
 8002a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <FLASH_Program_HalfWord+0x48>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <FLASH_Program_HalfWord+0x48>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	801a      	strh	r2, [r3, #0]
 8002a92:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00

08002aa8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <FLASH_Program_Byte+0x44>)
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <FLASH_Program_Byte+0x44>)
 8002aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <FLASH_Program_Byte+0x44>)
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <FLASH_Program_Byte+0x44>)
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <FLASH_Program_Byte+0x44>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	4a07      	ldr	r2, [pc, #28]	; (8002aec <FLASH_Program_Byte+0x44>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40023c00 	.word	0x40023c00

08002af0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002af4:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <FLASH_SetErrorCode+0x8c>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d005      	beq.n	8002b0c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002b00:	4b1f      	ldr	r3, [pc, #124]	; (8002b80 <FLASH_SetErrorCode+0x90>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f043 0320 	orr.w	r3, r3, #32
 8002b08:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <FLASH_SetErrorCode+0x90>)
 8002b0a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <FLASH_SetErrorCode+0x8c>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <FLASH_SetErrorCode+0x90>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f043 0310 	orr.w	r3, r3, #16
 8002b20:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <FLASH_SetErrorCode+0x90>)
 8002b22:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <FLASH_SetErrorCode+0x8c>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002b30:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <FLASH_SetErrorCode+0x90>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f043 0308 	orr.w	r3, r3, #8
 8002b38:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <FLASH_SetErrorCode+0x90>)
 8002b3a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <FLASH_SetErrorCode+0x8c>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002b48:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <FLASH_SetErrorCode+0x90>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f043 0304 	orr.w	r3, r3, #4
 8002b50:	4a0b      	ldr	r2, [pc, #44]	; (8002b80 <FLASH_SetErrorCode+0x90>)
 8002b52:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <FLASH_SetErrorCode+0x8c>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002b60:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <FLASH_SetErrorCode+0x90>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <FLASH_SetErrorCode+0x90>)
 8002b6a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <FLASH_SetErrorCode+0x8c>)
 8002b6e:	22f2      	movs	r2, #242	; 0xf2
 8002b70:	60da      	str	r2, [r3, #12]
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	40023c00 	.word	0x40023c00
 8002b80:	200006dc 	.word	0x200006dc

08002b84 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b96:	4b30      	ldr	r3, [pc, #192]	; (8002c58 <HAL_FLASHEx_Erase+0xd4>)
 8002b98:	7d1b      	ldrb	r3, [r3, #20]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_FLASHEx_Erase+0x1e>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e056      	b.n	8002c50 <HAL_FLASHEx_Erase+0xcc>
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <HAL_FLASHEx_Erase+0xd4>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ba8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002bac:	f7ff fec2 	bl	8002934 <FLASH_WaitForLastOperation>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d146      	bne.n	8002c48 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc0:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d115      	bne.n	8002bf6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	f000 f844 	bl	8002c64 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002be0:	f7ff fea8 	bl	8002934 <FLASH_WaitForLastOperation>
 8002be4:	4603      	mov	r3, r0
 8002be6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002be8:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <HAL_FLASHEx_Erase+0xd8>)
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	491b      	ldr	r1, [pc, #108]	; (8002c5c <HAL_FLASHEx_Erase+0xd8>)
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <HAL_FLASHEx_Erase+0xdc>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	610b      	str	r3, [r1, #16]
 8002bf4:	e028      	b.n	8002c48 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	e01c      	b.n	8002c38 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4619      	mov	r1, r3
 8002c06:	68b8      	ldr	r0, [r7, #8]
 8002c08:	f000 f866 	bl	8002cd8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c10:	f7ff fe90 	bl	8002934 <FLASH_WaitForLastOperation>
 8002c14:	4603      	mov	r3, r0
 8002c16:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_FLASHEx_Erase+0xd8>)
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <HAL_FLASHEx_Erase+0xd8>)
 8002c1e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002c22:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	601a      	str	r2, [r3, #0]
          break;
 8002c30:	e00a      	b.n	8002c48 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	3301      	adds	r3, #1
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4413      	add	r3, r2
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d3da      	bcc.n	8002bfe <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <HAL_FLASHEx_Erase+0xd4>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	751a      	strb	r2, [r3, #20]

  return status;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	200006dc 	.word	0x200006dc
 8002c5c:	40023c00 	.word	0x40023c00
 8002c60:	ffff7ffb 	.word	0xffff7ffb

08002c64 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	6039      	str	r1, [r7, #0]
 8002c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8002c70:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <FLASH_MassErase+0x70>)
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	4a17      	ldr	r2, [pc, #92]	; (8002cd4 <FLASH_MassErase+0x70>)
 8002c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7a:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d107      	bne.n	8002c92 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002c82:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <FLASH_MassErase+0x70>)
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	4913      	ldr	r1, [pc, #76]	; (8002cd4 <FLASH_MassErase+0x70>)
 8002c88:	f248 0304 	movw	r3, #32772	; 0x8004
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	610b      	str	r3, [r1, #16]
 8002c90:	e00f      	b.n	8002cb2 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d106      	bne.n	8002ca6 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002c98:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <FLASH_MassErase+0x70>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <FLASH_MassErase+0x70>)
 8002c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ca2:	6113      	str	r3, [r2, #16]
 8002ca4:	e005      	b.n	8002cb2 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <FLASH_MassErase+0x70>)
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <FLASH_MassErase+0x70>)
 8002cac:	f043 0304 	orr.w	r3, r3, #4
 8002cb0:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <FLASH_MassErase+0x70>)
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	4a05      	ldr	r2, [pc, #20]	; (8002cd4 <FLASH_MassErase+0x70>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc2:	6113      	str	r3, [r2, #16]
 8002cc4:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40023c00 	.word	0x40023c00

08002cd8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e010      	b.n	8002d16 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002cf4:	78fb      	ldrb	r3, [r7, #3]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d103      	bne.n	8002d02 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	e009      	b.n	8002d16 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d103      	bne.n	8002d10 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	e002      	b.n	8002d16 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002d10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d14:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b0b      	cmp	r3, #11
 8002d1a:	d902      	bls.n	8002d22 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <FLASH_Erase_Sector+0x9c>)
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <FLASH_Erase_Sector+0x9c>)
 8002d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <FLASH_Erase_Sector+0x9c>)
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	4910      	ldr	r1, [pc, #64]	; (8002d74 <FLASH_Erase_Sector+0x9c>)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <FLASH_Erase_Sector+0x9c>)
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	4a0d      	ldr	r2, [pc, #52]	; (8002d74 <FLASH_Erase_Sector+0x9c>)
 8002d40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <FLASH_Erase_Sector+0x9c>)
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	4a08      	ldr	r2, [pc, #32]	; (8002d74 <FLASH_Erase_Sector+0x9c>)
 8002d52:	f043 0302 	orr.w	r3, r3, #2
 8002d56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <FLASH_Erase_Sector+0x9c>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <FLASH_Erase_Sector+0x9c>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	6113      	str	r3, [r2, #16]
 8002d64:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40023c00 	.word	0x40023c00

08002d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	e175      	b.n	8003084 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	f040 8164 	bne.w	800307e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_GPIO_Init+0x5e>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d007      	beq.n	8002dd6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dca:	2b11      	cmp	r3, #17
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b12      	cmp	r3, #18
 8002dd4:	d130      	bne.n	8002e38 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	2203      	movs	r2, #3
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 0201 	and.w	r2, r3, #1
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	2203      	movs	r2, #3
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x100>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b12      	cmp	r3, #18
 8002e76:	d123      	bne.n	8002ec0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	08da      	lsrs	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3208      	adds	r2, #8
 8002e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	220f      	movs	r2, #15
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	08da      	lsrs	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3208      	adds	r2, #8
 8002eba:	69b9      	ldr	r1, [r7, #24]
 8002ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0203 	and.w	r2, r3, #3
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80be 	beq.w	800307e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f02:	4b65      	ldr	r3, [pc, #404]	; (8003098 <HAL_GPIO_Init+0x320>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	4a64      	ldr	r2, [pc, #400]	; (8003098 <HAL_GPIO_Init+0x320>)
 8002f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0e:	4b62      	ldr	r3, [pc, #392]	; (8003098 <HAL_GPIO_Init+0x320>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f1a:	4a60      	ldr	r2, [pc, #384]	; (800309c <HAL_GPIO_Init+0x324>)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	089b      	lsrs	r3, r3, #2
 8002f20:	3302      	adds	r3, #2
 8002f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	220f      	movs	r2, #15
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a57      	ldr	r2, [pc, #348]	; (80030a0 <HAL_GPIO_Init+0x328>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d037      	beq.n	8002fb6 <HAL_GPIO_Init+0x23e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a56      	ldr	r2, [pc, #344]	; (80030a4 <HAL_GPIO_Init+0x32c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d031      	beq.n	8002fb2 <HAL_GPIO_Init+0x23a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a55      	ldr	r2, [pc, #340]	; (80030a8 <HAL_GPIO_Init+0x330>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d02b      	beq.n	8002fae <HAL_GPIO_Init+0x236>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a54      	ldr	r2, [pc, #336]	; (80030ac <HAL_GPIO_Init+0x334>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d025      	beq.n	8002faa <HAL_GPIO_Init+0x232>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a53      	ldr	r2, [pc, #332]	; (80030b0 <HAL_GPIO_Init+0x338>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01f      	beq.n	8002fa6 <HAL_GPIO_Init+0x22e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_GPIO_Init+0x33c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d019      	beq.n	8002fa2 <HAL_GPIO_Init+0x22a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a51      	ldr	r2, [pc, #324]	; (80030b8 <HAL_GPIO_Init+0x340>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_GPIO_Init+0x226>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a50      	ldr	r2, [pc, #320]	; (80030bc <HAL_GPIO_Init+0x344>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00d      	beq.n	8002f9a <HAL_GPIO_Init+0x222>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4f      	ldr	r2, [pc, #316]	; (80030c0 <HAL_GPIO_Init+0x348>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <HAL_GPIO_Init+0x21e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4e      	ldr	r2, [pc, #312]	; (80030c4 <HAL_GPIO_Init+0x34c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d101      	bne.n	8002f92 <HAL_GPIO_Init+0x21a>
 8002f8e:	2309      	movs	r3, #9
 8002f90:	e012      	b.n	8002fb8 <HAL_GPIO_Init+0x240>
 8002f92:	230a      	movs	r3, #10
 8002f94:	e010      	b.n	8002fb8 <HAL_GPIO_Init+0x240>
 8002f96:	2308      	movs	r3, #8
 8002f98:	e00e      	b.n	8002fb8 <HAL_GPIO_Init+0x240>
 8002f9a:	2307      	movs	r3, #7
 8002f9c:	e00c      	b.n	8002fb8 <HAL_GPIO_Init+0x240>
 8002f9e:	2306      	movs	r3, #6
 8002fa0:	e00a      	b.n	8002fb8 <HAL_GPIO_Init+0x240>
 8002fa2:	2305      	movs	r3, #5
 8002fa4:	e008      	b.n	8002fb8 <HAL_GPIO_Init+0x240>
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	e006      	b.n	8002fb8 <HAL_GPIO_Init+0x240>
 8002faa:	2303      	movs	r3, #3
 8002fac:	e004      	b.n	8002fb8 <HAL_GPIO_Init+0x240>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e002      	b.n	8002fb8 <HAL_GPIO_Init+0x240>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_GPIO_Init+0x240>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f002 0203 	and.w	r2, r2, #3
 8002fbe:	0092      	lsls	r2, r2, #2
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fc8:	4934      	ldr	r1, [pc, #208]	; (800309c <HAL_GPIO_Init+0x324>)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	3302      	adds	r3, #2
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd6:	4b3c      	ldr	r3, [pc, #240]	; (80030c8 <HAL_GPIO_Init+0x350>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ffa:	4a33      	ldr	r2, [pc, #204]	; (80030c8 <HAL_GPIO_Init+0x350>)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003000:	4b31      	ldr	r3, [pc, #196]	; (80030c8 <HAL_GPIO_Init+0x350>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003024:	4a28      	ldr	r2, [pc, #160]	; (80030c8 <HAL_GPIO_Init+0x350>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800302a:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <HAL_GPIO_Init+0x350>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800304e:	4a1e      	ldr	r2, [pc, #120]	; (80030c8 <HAL_GPIO_Init+0x350>)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003054:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <HAL_GPIO_Init+0x350>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003078:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <HAL_GPIO_Init+0x350>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3301      	adds	r3, #1
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2b0f      	cmp	r3, #15
 8003088:	f67f ae86 	bls.w	8002d98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800308c:	bf00      	nop
 800308e:	3724      	adds	r7, #36	; 0x24
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40023800 	.word	0x40023800
 800309c:	40013800 	.word	0x40013800
 80030a0:	40020000 	.word	0x40020000
 80030a4:	40020400 	.word	0x40020400
 80030a8:	40020800 	.word	0x40020800
 80030ac:	40020c00 	.word	0x40020c00
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40021400 	.word	0x40021400
 80030b8:	40021800 	.word	0x40021800
 80030bc:	40021c00 	.word	0x40021c00
 80030c0:	40022000 	.word	0x40022000
 80030c4:	40022400 	.word	0x40022400
 80030c8:	40013c00 	.word	0x40013c00

080030cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	887b      	ldrh	r3, [r7, #2]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e001      	b.n	80030ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	807b      	strh	r3, [r7, #2]
 8003108:	4613      	mov	r3, r2
 800310a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800310c:	787b      	ldrb	r3, [r7, #1]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003112:	887a      	ldrh	r2, [r7, #2]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003118:	e003      	b.n	8003122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	041a      	lsls	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	619a      	str	r2, [r3, #24]
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800312e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003130:	b08f      	sub	sp, #60	; 0x3c
 8003132:	af0a      	add	r7, sp, #40	; 0x28
 8003134:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e116      	b.n	800336e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fe fa98 	bl	8001690 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2203      	movs	r2, #3
 8003164:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f002 f85a 	bl	8005238 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	687e      	ldr	r6, [r7, #4]
 800318c:	466d      	mov	r5, sp
 800318e:	f106 0410 	add.w	r4, r6, #16
 8003192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800319e:	e885 0003 	stmia.w	r5, {r0, r1}
 80031a2:	1d33      	adds	r3, r6, #4
 80031a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a6:	6838      	ldr	r0, [r7, #0]
 80031a8:	f001 ffee 	bl	8005188 <USB_CoreInit>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0d7      	b.n	800336e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 f848 	bl	800525a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	e04a      	b.n	8003266 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	333d      	adds	r3, #61	; 0x3d
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	333c      	adds	r3, #60	; 0x3c
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	b298      	uxth	r0, r3
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	3342      	adds	r3, #66	; 0x42
 800320c:	4602      	mov	r2, r0
 800320e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	333f      	adds	r3, #63	; 0x3f
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3344      	adds	r3, #68	; 0x44
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	3348      	adds	r3, #72	; 0x48
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3350      	adds	r3, #80	; 0x50
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	3301      	adds	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d3af      	bcc.n	80031d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e044      	b.n	8003300 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800328c:	7bfa      	ldrb	r2, [r7, #15]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	3301      	adds	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	d3b5      	bcc.n	8003276 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	687e      	ldr	r6, [r7, #4]
 8003312:	466d      	mov	r5, sp
 8003314:	f106 0410 	add.w	r4, r6, #16
 8003318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800331a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800331c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800331e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003320:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003324:	e885 0003 	stmia.w	r5, {r0, r1}
 8003328:	1d33      	adds	r3, r6, #4
 800332a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800332c:	6838      	ldr	r0, [r7, #0]
 800332e:	f001 ffbf 	bl	80052b0 <USB_DevInit>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e014      	b.n	800336e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	2b01      	cmp	r3, #1
 800335a:	d102      	bne.n	8003362 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f80b 	bl	8003378 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f002 f971 	bl	800564e <USB_DevDisconnect>

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003378 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_PCDEx_ActivateLPM+0x44>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	10000003 	.word	0x10000003

080033c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a04      	ldr	r2, [pc, #16]	; (80033dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ce:	6013      	str	r3, [r2, #0]
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40007000 	.word	0x40007000

080033e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_PWREx_EnableOverDrive+0x98>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	4a22      	ldr	r2, [pc, #136]	; (8003478 <HAL_PWREx_EnableOverDrive+0x98>)
 80033f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f4:	6413      	str	r3, [r2, #64]	; 0x40
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_PWREx_EnableOverDrive+0x98>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003402:	4b1e      	ldr	r3, [pc, #120]	; (800347c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800340e:	f7fe fa8f 	bl	8001930 <HAL_GetTick>
 8003412:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003414:	e009      	b.n	800342a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003416:	f7fe fa8b 	bl	8001930 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003424:	d901      	bls.n	800342a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e022      	b.n	8003470 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_PWREx_EnableOverDrive+0x9c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003436:	d1ee      	bne.n	8003416 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003438:	4b10      	ldr	r3, [pc, #64]	; (800347c <HAL_PWREx_EnableOverDrive+0x9c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0f      	ldr	r2, [pc, #60]	; (800347c <HAL_PWREx_EnableOverDrive+0x9c>)
 800343e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003442:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003444:	f7fe fa74 	bl	8001930 <HAL_GetTick>
 8003448:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800344a:	e009      	b.n	8003460 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800344c:	f7fe fa70 	bl	8001930 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800345a:	d901      	bls.n	8003460 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e007      	b.n	8003470 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800346c:	d1ee      	bne.n	800344c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40023800 	.word	0x40023800
 800347c:	40007000 	.word	0x40007000

08003480 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003488:	2300      	movs	r3, #0
 800348a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e29b      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8087 	beq.w	80035b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a4:	4b96      	ldr	r3, [pc, #600]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 030c 	and.w	r3, r3, #12
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d00c      	beq.n	80034ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b0:	4b93      	ldr	r3, [pc, #588]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 030c 	and.w	r3, r3, #12
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d112      	bne.n	80034e2 <HAL_RCC_OscConfig+0x62>
 80034bc:	4b90      	ldr	r3, [pc, #576]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c8:	d10b      	bne.n	80034e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ca:	4b8d      	ldr	r3, [pc, #564]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d06c      	beq.n	80035b0 <HAL_RCC_OscConfig+0x130>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d168      	bne.n	80035b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e275      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x7a>
 80034ec:	4b84      	ldr	r3, [pc, #528]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a83      	ldr	r2, [pc, #524]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	e02e      	b.n	8003558 <HAL_RCC_OscConfig+0xd8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x9c>
 8003502:	4b7f      	ldr	r3, [pc, #508]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a7e      	ldr	r2, [pc, #504]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b7c      	ldr	r3, [pc, #496]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7b      	ldr	r2, [pc, #492]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e01d      	b.n	8003558 <HAL_RCC_OscConfig+0xd8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0xc0>
 8003526:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a75      	ldr	r2, [pc, #468]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800352c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4b73      	ldr	r3, [pc, #460]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a72      	ldr	r2, [pc, #456]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e00b      	b.n	8003558 <HAL_RCC_OscConfig+0xd8>
 8003540:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a6e      	ldr	r2, [pc, #440]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b6c      	ldr	r3, [pc, #432]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6b      	ldr	r2, [pc, #428]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe f9e6 	bl	8001930 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003568:	f7fe f9e2 	bl	8001930 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	; 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e229      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0xe8>
 8003586:	e014      	b.n	80035b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe f9d2 	bl	8001930 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003590:	f7fe f9ce 	bl	8001930 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e215      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	4b57      	ldr	r3, [pc, #348]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x110>
 80035ae:	e000      	b.n	80035b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d069      	beq.n	8003692 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035be:	4b50      	ldr	r3, [pc, #320]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ca:	4b4d      	ldr	r3, [pc, #308]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d11c      	bne.n	8003610 <HAL_RCC_OscConfig+0x190>
 80035d6:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d116      	bne.n	8003610 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	4b47      	ldr	r3, [pc, #284]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_RCC_OscConfig+0x17a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d001      	beq.n	80035fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e1e9      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	493d      	ldr	r1, [pc, #244]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360e:	e040      	b.n	8003692 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d023      	beq.n	8003660 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003618:	4b39      	ldr	r3, [pc, #228]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a38      	ldr	r2, [pc, #224]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fe f984 	bl	8001930 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362c:	f7fe f980 	bl	8001930 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e1c7      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363e:	4b30      	ldr	r3, [pc, #192]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364a:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4929      	ldr	r1, [pc, #164]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
 800365e:	e018      	b.n	8003692 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a26      	ldr	r2, [pc, #152]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe f960 	bl	8001930 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003674:	f7fe f95c 	bl	8001930 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e1a3      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0308 	and.w	r3, r3, #8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d038      	beq.n	8003710 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d019      	beq.n	80036da <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80036a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036aa:	4a15      	ldr	r2, [pc, #84]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b2:	f7fe f93d 	bl	8001930 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ba:	f7fe f939 	bl	8001930 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e180      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80036ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x23a>
 80036d8:	e01a      	b.n	8003710 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80036dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036de:	4a08      	ldr	r2, [pc, #32]	; (8003700 <HAL_RCC_OscConfig+0x280>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fe f923 	bl	8001930 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ee:	f7fe f91f 	bl	8001930 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d903      	bls.n	8003704 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e166      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
 8003700:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	4b92      	ldr	r3, [pc, #584]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ee      	bne.n	80036ee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a4 	beq.w	8003866 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371e:	4b8c      	ldr	r3, [pc, #560]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800372a:	4b89      	ldr	r3, [pc, #548]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a88      	ldr	r2, [pc, #544]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
 8003736:	4b86      	ldr	r3, [pc, #536]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373e:	60bb      	str	r3, [r7, #8]
 8003740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003742:	2301      	movs	r3, #1
 8003744:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003746:	4b83      	ldr	r3, [pc, #524]	; (8003954 <HAL_RCC_OscConfig+0x4d4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d118      	bne.n	8003784 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003752:	4b80      	ldr	r3, [pc, #512]	; (8003954 <HAL_RCC_OscConfig+0x4d4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a7f      	ldr	r2, [pc, #508]	; (8003954 <HAL_RCC_OscConfig+0x4d4>)
 8003758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800375e:	f7fe f8e7 	bl	8001930 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003766:	f7fe f8e3 	bl	8001930 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b64      	cmp	r3, #100	; 0x64
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e12a      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003778:	4b76      	ldr	r3, [pc, #472]	; (8003954 <HAL_RCC_OscConfig+0x4d4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d106      	bne.n	800379a <HAL_RCC_OscConfig+0x31a>
 800378c:	4b70      	ldr	r3, [pc, #448]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800378e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003790:	4a6f      	ldr	r2, [pc, #444]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	6713      	str	r3, [r2, #112]	; 0x70
 8003798:	e02d      	b.n	80037f6 <HAL_RCC_OscConfig+0x376>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10c      	bne.n	80037bc <HAL_RCC_OscConfig+0x33c>
 80037a2:	4b6b      	ldr	r3, [pc, #428]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	4a6a      	ldr	r2, [pc, #424]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6713      	str	r3, [r2, #112]	; 0x70
 80037ae:	4b68      	ldr	r3, [pc, #416]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	4a67      	ldr	r2, [pc, #412]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ba:	e01c      	b.n	80037f6 <HAL_RCC_OscConfig+0x376>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b05      	cmp	r3, #5
 80037c2:	d10c      	bne.n	80037de <HAL_RCC_OscConfig+0x35e>
 80037c4:	4b62      	ldr	r3, [pc, #392]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c8:	4a61      	ldr	r2, [pc, #388]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	6713      	str	r3, [r2, #112]	; 0x70
 80037d0:	4b5f      	ldr	r3, [pc, #380]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a5e      	ldr	r2, [pc, #376]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	e00b      	b.n	80037f6 <HAL_RCC_OscConfig+0x376>
 80037de:	4b5c      	ldr	r3, [pc, #368]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a5b      	ldr	r2, [pc, #364]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ea:	4b59      	ldr	r3, [pc, #356]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a58      	ldr	r2, [pc, #352]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d015      	beq.n	800382a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fe f897 	bl	8001930 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fe f893 	bl	8001930 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	; 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e0d8      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381c:	4b4c      	ldr	r3, [pc, #304]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0ee      	beq.n	8003806 <HAL_RCC_OscConfig+0x386>
 8003828:	e014      	b.n	8003854 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fe f881 	bl	8001930 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7fe f87d 	bl	8001930 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0c2      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003848:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ee      	bne.n	8003832 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003854:	7dfb      	ldrb	r3, [r7, #23]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d105      	bne.n	8003866 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385a:	4b3d      	ldr	r3, [pc, #244]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003864:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80ae 	beq.w	80039cc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003870:	4b37      	ldr	r3, [pc, #220]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	2b08      	cmp	r3, #8
 800387a:	d06d      	beq.n	8003958 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d14b      	bne.n	800391c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003884:	4b32      	ldr	r3, [pc, #200]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a31      	ldr	r2, [pc, #196]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800388a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fe f84e 	bl	8001930 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003898:	f7fe f84a 	bl	8001930 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e091      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69da      	ldr	r2, [r3, #28]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	019b      	lsls	r3, r3, #6
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	3b01      	subs	r3, #1
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	061b      	lsls	r3, r3, #24
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	071b      	lsls	r3, r3, #28
 80038e2:	491b      	ldr	r1, [pc, #108]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e8:	4b19      	ldr	r3, [pc, #100]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 80038ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fe f81c 	bl	8001930 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fc:	f7fe f818 	bl	8001930 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e05f      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x47c>
 800391a:	e057      	b.n	80039cc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fe f802 	bl	8001930 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7fd fffe 	bl	8001930 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e045      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b03      	ldr	r3, [pc, #12]	; (8003950 <HAL_RCC_OscConfig+0x4d0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x4b0>
 800394e:	e03d      	b.n	80039cc <HAL_RCC_OscConfig+0x54c>
 8003950:	40023800 	.word	0x40023800
 8003954:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <HAL_RCC_OscConfig+0x558>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d030      	beq.n	80039c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d129      	bne.n	80039c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d122      	bne.n	80039c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003988:	4013      	ands	r3, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800398e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003990:	4293      	cmp	r3, r2
 8003992:	d119      	bne.n	80039c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	3b01      	subs	r3, #1
 80039a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10f      	bne.n	80039c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0d0      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b6a      	ldr	r3, [pc, #424]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d910      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b67      	ldr	r3, [pc, #412]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 020f 	bic.w	r2, r3, #15
 8003a0a:	4965      	ldr	r1, [pc, #404]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b63      	ldr	r3, [pc, #396]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0b8      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a3c:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a58      	ldr	r2, [pc, #352]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a54:	4b53      	ldr	r3, [pc, #332]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a52      	ldr	r2, [pc, #328]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a60:	4b50      	ldr	r3, [pc, #320]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	494d      	ldr	r1, [pc, #308]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d040      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d115      	bne.n	8003abe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	4b41      	ldr	r3, [pc, #260]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e073      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aae:	4b3d      	ldr	r3, [pc, #244]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e06b      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b39      	ldr	r3, [pc, #228]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4936      	ldr	r1, [pc, #216]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad0:	f7fd ff2e 	bl	8001930 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fd ff2a 	bl	8001930 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e053      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	4b2d      	ldr	r3, [pc, #180]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b00:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d210      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 020f 	bic.w	r2, r3, #15
 8003b16:	4922      	ldr	r1, [pc, #136]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e032      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3c:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4916      	ldr	r1, [pc, #88]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	490e      	ldr	r1, [pc, #56]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b6e:	f000 f821 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8003b72:	4601      	mov	r1, r0
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <HAL_RCC_ClockConfig+0x1cc>)
 8003b80:	5cd3      	ldrb	r3, [r2, r3]
 8003b82:	fa21 f303 	lsr.w	r3, r1, r3
 8003b86:	4a09      	ldr	r2, [pc, #36]	; (8003bac <HAL_RCC_ClockConfig+0x1d0>)
 8003b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1d4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd fe8a 	bl	80018a8 <HAL_InitTick>

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023c00 	.word	0x40023c00
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	08006388 	.word	0x08006388
 8003bac:	20000008 	.word	0x20000008
 8003bb0:	2000000c 	.word	0x2000000c

08003bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bca:	4b63      	ldr	r3, [pc, #396]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d007      	beq.n	8003be6 <HAL_RCC_GetSysClockFreq+0x32>
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d008      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x38>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 80b4 	bne.w	8003d48 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4b5e      	ldr	r3, [pc, #376]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003be2:	60bb      	str	r3, [r7, #8]
      break;
 8003be4:	e0b3      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be6:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003be8:	60bb      	str	r3, [r7, #8]
      break;
 8003bea:	e0b0      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bec:	4b5a      	ldr	r3, [pc, #360]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bf6:	4b58      	ldr	r3, [pc, #352]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d04a      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c02:	4b55      	ldr	r3, [pc, #340]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	099b      	lsrs	r3, r3, #6
 8003c08:	f04f 0400 	mov.w	r4, #0
 8003c0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	ea03 0501 	and.w	r5, r3, r1
 8003c18:	ea04 0602 	and.w	r6, r4, r2
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	4632      	mov	r2, r6
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	f04f 0400 	mov.w	r4, #0
 8003c28:	0154      	lsls	r4, r2, #5
 8003c2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c2e:	014b      	lsls	r3, r1, #5
 8003c30:	4619      	mov	r1, r3
 8003c32:	4622      	mov	r2, r4
 8003c34:	1b49      	subs	r1, r1, r5
 8003c36:	eb62 0206 	sbc.w	r2, r2, r6
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	f04f 0400 	mov.w	r4, #0
 8003c42:	0194      	lsls	r4, r2, #6
 8003c44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c48:	018b      	lsls	r3, r1, #6
 8003c4a:	1a5b      	subs	r3, r3, r1
 8003c4c:	eb64 0402 	sbc.w	r4, r4, r2
 8003c50:	f04f 0100 	mov.w	r1, #0
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	00e2      	lsls	r2, r4, #3
 8003c5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c5e:	00d9      	lsls	r1, r3, #3
 8003c60:	460b      	mov	r3, r1
 8003c62:	4614      	mov	r4, r2
 8003c64:	195b      	adds	r3, r3, r5
 8003c66:	eb44 0406 	adc.w	r4, r4, r6
 8003c6a:	f04f 0100 	mov.w	r1, #0
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	0262      	lsls	r2, r4, #9
 8003c74:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c78:	0259      	lsls	r1, r3, #9
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	4621      	mov	r1, r4
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f04f 0400 	mov.w	r4, #0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4623      	mov	r3, r4
 8003c8c:	f7fc fb30 	bl	80002f0 <__aeabi_uldivmod>
 8003c90:	4603      	mov	r3, r0
 8003c92:	460c      	mov	r4, r1
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	e049      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c98:	4b2f      	ldr	r3, [pc, #188]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	f04f 0400 	mov.w	r4, #0
 8003ca2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	ea03 0501 	and.w	r5, r3, r1
 8003cae:	ea04 0602 	and.w	r6, r4, r2
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	4632      	mov	r2, r6
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	f04f 0400 	mov.w	r4, #0
 8003cbe:	0154      	lsls	r4, r2, #5
 8003cc0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cc4:	014b      	lsls	r3, r1, #5
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4622      	mov	r2, r4
 8003cca:	1b49      	subs	r1, r1, r5
 8003ccc:	eb62 0206 	sbc.w	r2, r2, r6
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	f04f 0400 	mov.w	r4, #0
 8003cd8:	0194      	lsls	r4, r2, #6
 8003cda:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cde:	018b      	lsls	r3, r1, #6
 8003ce0:	1a5b      	subs	r3, r3, r1
 8003ce2:	eb64 0402 	sbc.w	r4, r4, r2
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	00e2      	lsls	r2, r4, #3
 8003cf0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cf4:	00d9      	lsls	r1, r3, #3
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4614      	mov	r4, r2
 8003cfa:	195b      	adds	r3, r3, r5
 8003cfc:	eb44 0406 	adc.w	r4, r4, r6
 8003d00:	f04f 0100 	mov.w	r1, #0
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	02a2      	lsls	r2, r4, #10
 8003d0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d0e:	0299      	lsls	r1, r3, #10
 8003d10:	460b      	mov	r3, r1
 8003d12:	4614      	mov	r4, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	4621      	mov	r1, r4
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f04f 0400 	mov.w	r4, #0
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4623      	mov	r3, r4
 8003d22:	f7fc fae5 	bl	80002f0 <__aeabi_uldivmod>
 8003d26:	4603      	mov	r3, r0
 8003d28:	460c      	mov	r4, r1
 8003d2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	3301      	adds	r3, #1
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	60bb      	str	r3, [r7, #8]
      break;
 8003d46:	e002      	b.n	8003d4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d4a:	60bb      	str	r3, [r7, #8]
      break;
 8003d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	00f42400 	.word	0x00f42400
 8003d60:	007a1200 	.word	0x007a1200

08003d64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	20000008 	.word	0x20000008

08003d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d80:	f7ff fff0 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003d84:	4601      	mov	r1, r0
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0a9b      	lsrs	r3, r3, #10
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	4a03      	ldr	r2, [pc, #12]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d92:	5cd3      	ldrb	r3, [r2, r3]
 8003d94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	08006398 	.word	0x08006398

08003da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003da8:	f7ff ffdc 	bl	8003d64 <HAL_RCC_GetHCLKFreq>
 8003dac:	4601      	mov	r1, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0b5b      	lsrs	r3, r3, #13
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4a03      	ldr	r2, [pc, #12]	; (8003dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dba:	5cd3      	ldrb	r3, [r2, r3]
 8003dbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	08006398 	.word	0x08006398

08003dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d012      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003df4:	4b69      	ldr	r3, [pc, #420]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4a68      	ldr	r2, [pc, #416]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003dfe:	6093      	str	r3, [r2, #8]
 8003e00:	4b66      	ldr	r3, [pc, #408]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e08:	4964      	ldr	r1, [pc, #400]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d017      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e26:	4b5d      	ldr	r3, [pc, #372]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e34:	4959      	ldr	r1, [pc, #356]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e44:	d101      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e46:	2301      	movs	r3, #1
 8003e48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e52:	2301      	movs	r3, #1
 8003e54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d017      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e62:	4b4e      	ldr	r3, [pc, #312]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	494a      	ldr	r1, [pc, #296]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e80:	d101      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e82:	2301      	movs	r3, #1
 8003e84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 808b 	beq.w	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eb0:	4b3a      	ldr	r3, [pc, #232]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	4a39      	ldr	r2, [pc, #228]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eba:	6413      	str	r3, [r2, #64]	; 0x40
 8003ebc:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ec8:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a34      	ldr	r2, [pc, #208]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed4:	f7fd fd2c 	bl	8001930 <HAL_GetTick>
 8003ed8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003edc:	f7fd fd28 	bl	8001930 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	; 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e38d      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003eee:	4b2c      	ldr	r3, [pc, #176]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003efa:	4b28      	ldr	r3, [pc, #160]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d035      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d02e      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f18:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f22:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a1d      	ldr	r2, [pc, #116]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f2e:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f3a:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f40:	4b16      	ldr	r3, [pc, #88]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d114      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fcf0 	bl	8001930 <HAL_GetTick>
 8003f50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f52:	e00a      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f54:	f7fd fcec 	bl	8001930 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e34f      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0ee      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f82:	d111      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f90:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f92:	400b      	ands	r3, r1
 8003f94:	4901      	ldr	r1, [pc, #4]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	608b      	str	r3, [r1, #8]
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	0ffffcff 	.word	0x0ffffcff
 8003fa8:	4bb3      	ldr	r3, [pc, #716]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4ab2      	ldr	r2, [pc, #712]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fb2:	6093      	str	r3, [r2, #8]
 8003fb4:	4bb0      	ldr	r3, [pc, #704]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc0:	49ad      	ldr	r1, [pc, #692]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d010      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fd2:	4ba9      	ldr	r3, [pc, #676]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fd8:	4aa7      	ldr	r2, [pc, #668]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003fe2:	4ba5      	ldr	r3, [pc, #660]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	49a2      	ldr	r1, [pc, #648]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004000:	4b9d      	ldr	r3, [pc, #628]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800400e:	499a      	ldr	r1, [pc, #616]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004022:	4b95      	ldr	r3, [pc, #596]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004030:	4991      	ldr	r1, [pc, #580]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004044:	4b8c      	ldr	r3, [pc, #560]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004052:	4989      	ldr	r1, [pc, #548]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004066:	4b84      	ldr	r3, [pc, #528]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	4980      	ldr	r1, [pc, #512]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004088:	4b7b      	ldr	r3, [pc, #492]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	f023 0203 	bic.w	r2, r3, #3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	4978      	ldr	r1, [pc, #480]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040aa:	4b73      	ldr	r3, [pc, #460]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b0:	f023 020c 	bic.w	r2, r3, #12
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b8:	496f      	ldr	r1, [pc, #444]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040cc:	4b6a      	ldr	r3, [pc, #424]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	4967      	ldr	r1, [pc, #412]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040ee:	4b62      	ldr	r3, [pc, #392]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fc:	495e      	ldr	r1, [pc, #376]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004110:	4b59      	ldr	r3, [pc, #356]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	4956      	ldr	r1, [pc, #344]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004132:	4b51      	ldr	r3, [pc, #324]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	494d      	ldr	r1, [pc, #308]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004154:	4b48      	ldr	r3, [pc, #288]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004162:	4945      	ldr	r1, [pc, #276]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004176:	4b40      	ldr	r3, [pc, #256]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004184:	493c      	ldr	r1, [pc, #240]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004198:	4b37      	ldr	r3, [pc, #220]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a6:	4934      	ldr	r1, [pc, #208]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d011      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041ba:	4b2f      	ldr	r3, [pc, #188]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c8:	492b      	ldr	r1, [pc, #172]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041d8:	d101      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041da:	2301      	movs	r3, #1
 80041dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041fa:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004208:	491b      	ldr	r1, [pc, #108]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00b      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800421c:	4b16      	ldr	r3, [pc, #88]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800422c:	4912      	ldr	r1, [pc, #72]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00b      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004240:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004250:	4909      	ldr	r1, [pc, #36]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00f      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800426a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004274:	e002      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800
 800427c:	4985      	ldr	r1, [pc, #532]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00b      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004290:	4b80      	ldr	r3, [pc, #512]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004296:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a0:	497c      	ldr	r1, [pc, #496]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d005      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042b6:	f040 80d6 	bne.w	8004466 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042ba:	4b76      	ldr	r3, [pc, #472]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a75      	ldr	r2, [pc, #468]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c6:	f7fd fb33 	bl	8001930 <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042cc:	e008      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042ce:	f7fd fb2f 	bl	8001930 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b64      	cmp	r3, #100	; 0x64
 80042da:	d901      	bls.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e194      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042e0:	4b6c      	ldr	r3, [pc, #432]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1f0      	bne.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d021      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d11d      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004300:	4b64      	ldr	r3, [pc, #400]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800430e:	4b61      	ldr	r3, [pc, #388]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004314:	0e1b      	lsrs	r3, r3, #24
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	019a      	lsls	r2, r3, #6
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	431a      	orrs	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	061b      	lsls	r3, r3, #24
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	071b      	lsls	r3, r3, #28
 8004334:	4957      	ldr	r1, [pc, #348]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004350:	d00a      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800435a:	2b00      	cmp	r3, #0
 800435c:	d02e      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004366:	d129      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004368:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800436a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436e:	0c1b      	lsrs	r3, r3, #16
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004376:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437c:	0f1b      	lsrs	r3, r3, #28
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	019a      	lsls	r2, r3, #6
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	431a      	orrs	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	071b      	lsls	r3, r3, #28
 800439c:	493d      	ldr	r1, [pc, #244]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043a4:	4b3b      	ldr	r3, [pc, #236]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043aa:	f023 021f 	bic.w	r2, r3, #31
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	3b01      	subs	r3, #1
 80043b4:	4937      	ldr	r1, [pc, #220]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d01d      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043c8:	4b32      	ldr	r3, [pc, #200]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ce:	0e1b      	lsrs	r3, r3, #24
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043d6:	4b2f      	ldr	r3, [pc, #188]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043dc:	0f1b      	lsrs	r3, r3, #28
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	019a      	lsls	r2, r3, #6
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	041b      	lsls	r3, r3, #16
 80043f0:	431a      	orrs	r2, r3
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	431a      	orrs	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	071b      	lsls	r3, r3, #28
 80043fc:	4925      	ldr	r1, [pc, #148]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d011      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	019a      	lsls	r2, r3, #6
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	431a      	orrs	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	071b      	lsls	r3, r3, #28
 800442c:	4919      	ldr	r1, [pc, #100]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004434:	4b17      	ldr	r3, [pc, #92]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a16      	ldr	r2, [pc, #88]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800443a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800443e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004440:	f7fd fa76 	bl	8001930 <HAL_GetTick>
 8004444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004448:	f7fd fa72 	bl	8001930 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b64      	cmp	r3, #100	; 0x64
 8004454:	d901      	bls.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e0d7      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800445a:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b01      	cmp	r3, #1
 800446a:	f040 80cd 	bne.w	8004608 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a08      	ldr	r2, [pc, #32]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447a:	f7fd fa59 	bl	8001930 <HAL_GetTick>
 800447e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004480:	e00a      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004482:	f7fd fa55 	bl	8001930 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b64      	cmp	r3, #100	; 0x64
 800448e:	d903      	bls.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e0ba      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004494:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004498:	4b5e      	ldr	r3, [pc, #376]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a4:	d0ed      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d02e      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d12a      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044ce:	4b51      	ldr	r3, [pc, #324]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044dc:	4b4d      	ldr	r3, [pc, #308]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	0f1b      	lsrs	r3, r3, #28
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	019a      	lsls	r2, r3, #6
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	061b      	lsls	r3, r3, #24
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	071b      	lsls	r3, r3, #28
 8004502:	4944      	ldr	r1, [pc, #272]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800450a:	4b42      	ldr	r3, [pc, #264]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800450c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004510:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004518:	3b01      	subs	r3, #1
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	493d      	ldr	r1, [pc, #244]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d022      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004538:	d11d      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800453a:	4b36      	ldr	r3, [pc, #216]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	0e1b      	lsrs	r3, r3, #24
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004548:	4b32      	ldr	r3, [pc, #200]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454e:	0f1b      	lsrs	r3, r3, #28
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	019a      	lsls	r2, r3, #6
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	041b      	lsls	r3, r3, #16
 8004562:	431a      	orrs	r2, r3
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	061b      	lsls	r3, r3, #24
 8004568:	431a      	orrs	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	071b      	lsls	r3, r3, #28
 800456e:	4929      	ldr	r1, [pc, #164]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d028      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004582:	4b24      	ldr	r3, [pc, #144]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	0e1b      	lsrs	r3, r3, #24
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004590:	4b20      	ldr	r3, [pc, #128]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	019a      	lsls	r2, r3, #6
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	431a      	orrs	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	061b      	lsls	r3, r3, #24
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	071b      	lsls	r3, r3, #28
 80045b6:	4917      	ldr	r1, [pc, #92]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045be:	4b15      	ldr	r3, [pc, #84]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	4911      	ldr	r1, [pc, #68]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a0e      	ldr	r2, [pc, #56]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e0:	f7fd f9a6 	bl	8001930 <HAL_GetTick>
 80045e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045e8:	f7fd f9a2 	bl	8001930 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e007      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004606:	d1ef      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800

08004618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e040      	b.n	80046ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fc ffb2 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2224      	movs	r2, #36	; 0x24
 8004644:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f98a 	bl	8004970 <UART_SetConfig>
 800465c:	4603      	mov	r3, r0
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e022      	b.n	80046ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fc28 	bl	8004ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fcaf 	bl	8005008 <UART_CheckIdleState>
 80046aa:	4603      	mov	r3, r0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08a      	sub	sp, #40	; 0x28
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d17f      	bne.n	80047cc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <HAL_UART_Transmit+0x24>
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e078      	b.n	80047ce <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_UART_Transmit+0x36>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e071      	b.n	80047ce <HAL_UART_Transmit+0x11a>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2221      	movs	r2, #33	; 0x21
 80046fc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80046fe:	f7fd f917 	bl	8001930 <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	88fa      	ldrh	r2, [r7, #6]
 8004710:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471c:	d108      	bne.n	8004730 <HAL_UART_Transmit+0x7c>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d104      	bne.n	8004730 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	e003      	b.n	8004738 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004734:	2300      	movs	r3, #0
 8004736:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004740:	e02c      	b.n	800479c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2200      	movs	r2, #0
 800474a:	2180      	movs	r1, #128	; 0x80
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fca0 	bl	8005092 <UART_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e038      	b.n	80047ce <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10b      	bne.n	800477a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004770:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	3302      	adds	r3, #2
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	e007      	b.n	800478a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	781a      	ldrb	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	3301      	adds	r3, #1
 8004788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1cc      	bne.n	8004742 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2200      	movs	r2, #0
 80047b0:	2140      	movs	r1, #64	; 0x40
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fc6d 	bl	8005092 <UART_WaitOnFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e005      	b.n	80047ce <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b08a      	sub	sp, #40	; 0x28
 80047da:	af02      	add	r7, sp, #8
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	f040 80ba 	bne.w	8004964 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_UART_Receive+0x26>
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e0b2      	b.n	8004966 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_UART_Receive+0x38>
 800480a:	2302      	movs	r3, #2
 800480c:	e0ab      	b.n	8004966 <HAL_UART_Receive+0x190>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2222      	movs	r2, #34	; 0x22
 8004820:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004822:	f7fd f885 	bl	8001930 <HAL_GetTick>
 8004826:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	88fa      	ldrh	r2, [r7, #6]
 8004834:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004840:	d10e      	bne.n	8004860 <HAL_UART_Receive+0x8a>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <HAL_UART_Receive+0x80>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004850:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004854:	e02d      	b.n	80048b2 <HAL_UART_Receive+0xdc>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	22ff      	movs	r2, #255	; 0xff
 800485a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800485e:	e028      	b.n	80048b2 <HAL_UART_Receive+0xdc>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10d      	bne.n	8004884 <HAL_UART_Receive+0xae>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d104      	bne.n	800487a <HAL_UART_Receive+0xa4>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	22ff      	movs	r2, #255	; 0xff
 8004874:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004878:	e01b      	b.n	80048b2 <HAL_UART_Receive+0xdc>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	227f      	movs	r2, #127	; 0x7f
 800487e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004882:	e016      	b.n	80048b2 <HAL_UART_Receive+0xdc>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800488c:	d10d      	bne.n	80048aa <HAL_UART_Receive+0xd4>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d104      	bne.n	80048a0 <HAL_UART_Receive+0xca>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	227f      	movs	r2, #127	; 0x7f
 800489a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800489e:	e008      	b.n	80048b2 <HAL_UART_Receive+0xdc>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	223f      	movs	r2, #63	; 0x3f
 80048a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048a8:	e003      	b.n	80048b2 <HAL_UART_Receive+0xdc>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048b8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c2:	d108      	bne.n	80048d6 <HAL_UART_Receive+0x100>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	e003      	b.n	80048de <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80048e6:	e032      	b.n	800494e <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2200      	movs	r2, #0
 80048f0:	2120      	movs	r1, #32
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 fbcd 	bl	8005092 <UART_WaitOnFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e031      	b.n	8004966 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10c      	bne.n	8004922 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	b29a      	uxth	r2, r3
 8004910:	8a7b      	ldrh	r3, [r7, #18]
 8004912:	4013      	ands	r3, r2
 8004914:	b29a      	uxth	r2, r3
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	3302      	adds	r3, #2
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	e00c      	b.n	800493c <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	b2da      	uxtb	r2, r3
 800492a:	8a7b      	ldrh	r3, [r7, #18]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	4013      	ands	r3, r2
 8004930:	b2da      	uxtb	r2, r3
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3301      	adds	r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004942:	b29b      	uxth	r3, r3
 8004944:	3b01      	subs	r3, #1
 8004946:	b29a      	uxth	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1c6      	bne.n	80048e8 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e000      	b.n	8004966 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8004964:	2302      	movs	r3, #2
  }
}
 8004966:	4618      	mov	r0, r3
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	4313      	orrs	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4bb1      	ldr	r3, [pc, #708]	; (8004c64 <UART_SetConfig+0x2f4>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	6939      	ldr	r1, [r7, #16]
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a9f      	ldr	r2, [pc, #636]	; (8004c68 <UART_SetConfig+0x2f8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d121      	bne.n	8004a34 <UART_SetConfig+0xc4>
 80049f0:	4b9e      	ldr	r3, [pc, #632]	; (8004c6c <UART_SetConfig+0x2fc>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d816      	bhi.n	8004a2c <UART_SetConfig+0xbc>
 80049fe:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <UART_SetConfig+0x94>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a15 	.word	0x08004a15
 8004a08:	08004a21 	.word	0x08004a21
 8004a0c:	08004a1b 	.word	0x08004a1b
 8004a10:	08004a27 	.word	0x08004a27
 8004a14:	2301      	movs	r3, #1
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e151      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e14e      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004a20:	2304      	movs	r3, #4
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e14b      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004a26:	2308      	movs	r3, #8
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e148      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	bf00      	nop
 8004a32:	e144      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a8d      	ldr	r2, [pc, #564]	; (8004c70 <UART_SetConfig+0x300>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d134      	bne.n	8004aa8 <UART_SetConfig+0x138>
 8004a3e:	4b8b      	ldr	r3, [pc, #556]	; (8004c6c <UART_SetConfig+0x2fc>)
 8004a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	d829      	bhi.n	8004aa0 <UART_SetConfig+0x130>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0xe4>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a89 	.word	0x08004a89
 8004a58:	08004aa1 	.word	0x08004aa1
 8004a5c:	08004aa1 	.word	0x08004aa1
 8004a60:	08004aa1 	.word	0x08004aa1
 8004a64:	08004a95 	.word	0x08004a95
 8004a68:	08004aa1 	.word	0x08004aa1
 8004a6c:	08004aa1 	.word	0x08004aa1
 8004a70:	08004aa1 	.word	0x08004aa1
 8004a74:	08004a8f 	.word	0x08004a8f
 8004a78:	08004aa1 	.word	0x08004aa1
 8004a7c:	08004aa1 	.word	0x08004aa1
 8004a80:	08004aa1 	.word	0x08004aa1
 8004a84:	08004a9b 	.word	0x08004a9b
 8004a88:	2300      	movs	r3, #0
 8004a8a:	77fb      	strb	r3, [r7, #31]
 8004a8c:	e117      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004a8e:	2302      	movs	r3, #2
 8004a90:	77fb      	strb	r3, [r7, #31]
 8004a92:	e114      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004a94:	2304      	movs	r3, #4
 8004a96:	77fb      	strb	r3, [r7, #31]
 8004a98:	e111      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004a9a:	2308      	movs	r3, #8
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	e10e      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	bf00      	nop
 8004aa6:	e10a      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a71      	ldr	r2, [pc, #452]	; (8004c74 <UART_SetConfig+0x304>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d120      	bne.n	8004af4 <UART_SetConfig+0x184>
 8004ab2:	4b6e      	ldr	r3, [pc, #440]	; (8004c6c <UART_SetConfig+0x2fc>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004abc:	2b10      	cmp	r3, #16
 8004abe:	d00f      	beq.n	8004ae0 <UART_SetConfig+0x170>
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d802      	bhi.n	8004aca <UART_SetConfig+0x15a>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <UART_SetConfig+0x164>
 8004ac8:	e010      	b.n	8004aec <UART_SetConfig+0x17c>
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d005      	beq.n	8004ada <UART_SetConfig+0x16a>
 8004ace:	2b30      	cmp	r3, #48	; 0x30
 8004ad0:	d009      	beq.n	8004ae6 <UART_SetConfig+0x176>
 8004ad2:	e00b      	b.n	8004aec <UART_SetConfig+0x17c>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e0f1      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004ada:	2302      	movs	r3, #2
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e0ee      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e0eb      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e0e8      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004aec:	2310      	movs	r3, #16
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	bf00      	nop
 8004af2:	e0e4      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a5f      	ldr	r2, [pc, #380]	; (8004c78 <UART_SetConfig+0x308>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d120      	bne.n	8004b40 <UART_SetConfig+0x1d0>
 8004afe:	4b5b      	ldr	r3, [pc, #364]	; (8004c6c <UART_SetConfig+0x2fc>)
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d00f      	beq.n	8004b2c <UART_SetConfig+0x1bc>
 8004b0c:	2b40      	cmp	r3, #64	; 0x40
 8004b0e:	d802      	bhi.n	8004b16 <UART_SetConfig+0x1a6>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <UART_SetConfig+0x1b0>
 8004b14:	e010      	b.n	8004b38 <UART_SetConfig+0x1c8>
 8004b16:	2b80      	cmp	r3, #128	; 0x80
 8004b18:	d005      	beq.n	8004b26 <UART_SetConfig+0x1b6>
 8004b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b1c:	d009      	beq.n	8004b32 <UART_SetConfig+0x1c2>
 8004b1e:	e00b      	b.n	8004b38 <UART_SetConfig+0x1c8>
 8004b20:	2300      	movs	r3, #0
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e0cb      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004b26:	2302      	movs	r3, #2
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e0c8      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	e0c5      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004b32:	2308      	movs	r3, #8
 8004b34:	77fb      	strb	r3, [r7, #31]
 8004b36:	e0c2      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	bf00      	nop
 8004b3e:	e0be      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a4d      	ldr	r2, [pc, #308]	; (8004c7c <UART_SetConfig+0x30c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d124      	bne.n	8004b94 <UART_SetConfig+0x224>
 8004b4a:	4b48      	ldr	r3, [pc, #288]	; (8004c6c <UART_SetConfig+0x2fc>)
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b58:	d012      	beq.n	8004b80 <UART_SetConfig+0x210>
 8004b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b5e:	d802      	bhi.n	8004b66 <UART_SetConfig+0x1f6>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <UART_SetConfig+0x204>
 8004b64:	e012      	b.n	8004b8c <UART_SetConfig+0x21c>
 8004b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6a:	d006      	beq.n	8004b7a <UART_SetConfig+0x20a>
 8004b6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b70:	d009      	beq.n	8004b86 <UART_SetConfig+0x216>
 8004b72:	e00b      	b.n	8004b8c <UART_SetConfig+0x21c>
 8004b74:	2300      	movs	r3, #0
 8004b76:	77fb      	strb	r3, [r7, #31]
 8004b78:	e0a1      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	77fb      	strb	r3, [r7, #31]
 8004b7e:	e09e      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004b80:	2304      	movs	r3, #4
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	e09b      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004b86:	2308      	movs	r3, #8
 8004b88:	77fb      	strb	r3, [r7, #31]
 8004b8a:	e098      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	bf00      	nop
 8004b92:	e094      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a39      	ldr	r2, [pc, #228]	; (8004c80 <UART_SetConfig+0x310>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d124      	bne.n	8004be8 <UART_SetConfig+0x278>
 8004b9e:	4b33      	ldr	r3, [pc, #204]	; (8004c6c <UART_SetConfig+0x2fc>)
 8004ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bac:	d012      	beq.n	8004bd4 <UART_SetConfig+0x264>
 8004bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb2:	d802      	bhi.n	8004bba <UART_SetConfig+0x24a>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <UART_SetConfig+0x258>
 8004bb8:	e012      	b.n	8004be0 <UART_SetConfig+0x270>
 8004bba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bbe:	d006      	beq.n	8004bce <UART_SetConfig+0x25e>
 8004bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bc4:	d009      	beq.n	8004bda <UART_SetConfig+0x26a>
 8004bc6:	e00b      	b.n	8004be0 <UART_SetConfig+0x270>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e077      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e074      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e071      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004bda:	2308      	movs	r3, #8
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e06e      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004be0:	2310      	movs	r3, #16
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	bf00      	nop
 8004be6:	e06a      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a25      	ldr	r2, [pc, #148]	; (8004c84 <UART_SetConfig+0x314>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d124      	bne.n	8004c3c <UART_SetConfig+0x2cc>
 8004bf2:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <UART_SetConfig+0x2fc>)
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c00:	d012      	beq.n	8004c28 <UART_SetConfig+0x2b8>
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c06:	d802      	bhi.n	8004c0e <UART_SetConfig+0x29e>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <UART_SetConfig+0x2ac>
 8004c0c:	e012      	b.n	8004c34 <UART_SetConfig+0x2c4>
 8004c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c12:	d006      	beq.n	8004c22 <UART_SetConfig+0x2b2>
 8004c14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c18:	d009      	beq.n	8004c2e <UART_SetConfig+0x2be>
 8004c1a:	e00b      	b.n	8004c34 <UART_SetConfig+0x2c4>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e04d      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004c22:	2302      	movs	r3, #2
 8004c24:	77fb      	strb	r3, [r7, #31]
 8004c26:	e04a      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e047      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004c2e:	2308      	movs	r3, #8
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e044      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004c34:	2310      	movs	r3, #16
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	bf00      	nop
 8004c3a:	e040      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <UART_SetConfig+0x318>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d139      	bne.n	8004cba <UART_SetConfig+0x34a>
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <UART_SetConfig+0x2fc>)
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c54:	d027      	beq.n	8004ca6 <UART_SetConfig+0x336>
 8004c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c5a:	d817      	bhi.n	8004c8c <UART_SetConfig+0x31c>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01c      	beq.n	8004c9a <UART_SetConfig+0x32a>
 8004c60:	e027      	b.n	8004cb2 <UART_SetConfig+0x342>
 8004c62:	bf00      	nop
 8004c64:	efff69f3 	.word	0xefff69f3
 8004c68:	40011000 	.word	0x40011000
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40004400 	.word	0x40004400
 8004c74:	40004800 	.word	0x40004800
 8004c78:	40004c00 	.word	0x40004c00
 8004c7c:	40005000 	.word	0x40005000
 8004c80:	40011400 	.word	0x40011400
 8004c84:	40007800 	.word	0x40007800
 8004c88:	40007c00 	.word	0x40007c00
 8004c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c90:	d006      	beq.n	8004ca0 <UART_SetConfig+0x330>
 8004c92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c96:	d009      	beq.n	8004cac <UART_SetConfig+0x33c>
 8004c98:	e00b      	b.n	8004cb2 <UART_SetConfig+0x342>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	77fb      	strb	r3, [r7, #31]
 8004c9e:	e00e      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e00b      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004ca6:	2304      	movs	r3, #4
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e008      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004cac:	2308      	movs	r3, #8
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e005      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004cb2:	2310      	movs	r3, #16
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	bf00      	nop
 8004cb8:	e001      	b.n	8004cbe <UART_SetConfig+0x34e>
 8004cba:	2310      	movs	r3, #16
 8004cbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc6:	d17f      	bne.n	8004dc8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004cc8:	7ffb      	ldrb	r3, [r7, #31]
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d85c      	bhi.n	8004d88 <UART_SetConfig+0x418>
 8004cce:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <UART_SetConfig+0x364>)
 8004cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd4:	08004cf9 	.word	0x08004cf9
 8004cd8:	08004d19 	.word	0x08004d19
 8004cdc:	08004d39 	.word	0x08004d39
 8004ce0:	08004d89 	.word	0x08004d89
 8004ce4:	08004d51 	.word	0x08004d51
 8004ce8:	08004d89 	.word	0x08004d89
 8004cec:	08004d89 	.word	0x08004d89
 8004cf0:	08004d89 	.word	0x08004d89
 8004cf4:	08004d71 	.word	0x08004d71
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf8:	f7ff f840 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8004cfc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	005a      	lsls	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	441a      	add	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	61bb      	str	r3, [r7, #24]
        break;
 8004d16:	e03a      	b.n	8004d8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d18:	f7ff f844 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 8004d1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	005a      	lsls	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	441a      	add	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	61bb      	str	r3, [r7, #24]
        break;
 8004d36:	e02a      	b.n	8004d8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	085a      	lsrs	r2, r3, #1
 8004d3e:	4b5f      	ldr	r3, [pc, #380]	; (8004ebc <UART_SetConfig+0x54c>)
 8004d40:	4413      	add	r3, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6852      	ldr	r2, [r2, #4]
 8004d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	61bb      	str	r3, [r7, #24]
        break;
 8004d4e:	e01e      	b.n	8004d8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d50:	f7fe ff30 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8004d54:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	005a      	lsls	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	441a      	add	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	61bb      	str	r3, [r7, #24]
        break;
 8004d6e:	e00e      	b.n	8004d8e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	085b      	lsrs	r3, r3, #1
 8004d76:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	61bb      	str	r3, [r7, #24]
        break;
 8004d86:	e002      	b.n	8004d8e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	75fb      	strb	r3, [r7, #23]
        break;
 8004d8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b0f      	cmp	r3, #15
 8004d92:	d916      	bls.n	8004dc2 <UART_SetConfig+0x452>
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d9a:	d212      	bcs.n	8004dc2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f023 030f 	bic.w	r3, r3, #15
 8004da4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	897b      	ldrh	r3, [r7, #10]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	897a      	ldrh	r2, [r7, #10]
 8004dbe:	60da      	str	r2, [r3, #12]
 8004dc0:	e070      	b.n	8004ea4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	75fb      	strb	r3, [r7, #23]
 8004dc6:	e06d      	b.n	8004ea4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004dc8:	7ffb      	ldrb	r3, [r7, #31]
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d859      	bhi.n	8004e82 <UART_SetConfig+0x512>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <UART_SetConfig+0x464>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004df9 	.word	0x08004df9
 8004dd8:	08004e17 	.word	0x08004e17
 8004ddc:	08004e35 	.word	0x08004e35
 8004de0:	08004e83 	.word	0x08004e83
 8004de4:	08004e4d 	.word	0x08004e4d
 8004de8:	08004e83 	.word	0x08004e83
 8004dec:	08004e83 	.word	0x08004e83
 8004df0:	08004e83 	.word	0x08004e83
 8004df4:	08004e6b 	.word	0x08004e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df8:	f7fe ffc0 	bl	8003d7c <HAL_RCC_GetPCLK1Freq>
 8004dfc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	085a      	lsrs	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	441a      	add	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	61bb      	str	r3, [r7, #24]
        break;
 8004e14:	e038      	b.n	8004e88 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e16:	f7fe ffc5 	bl	8003da4 <HAL_RCC_GetPCLK2Freq>
 8004e1a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	085a      	lsrs	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	441a      	add	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	61bb      	str	r3, [r7, #24]
        break;
 8004e32:	e029      	b.n	8004e88 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	085a      	lsrs	r2, r3, #1
 8004e3a:	4b21      	ldr	r3, [pc, #132]	; (8004ec0 <UART_SetConfig+0x550>)
 8004e3c:	4413      	add	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6852      	ldr	r2, [r2, #4]
 8004e42:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	61bb      	str	r3, [r7, #24]
        break;
 8004e4a:	e01d      	b.n	8004e88 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e4c:	f7fe feb2 	bl	8003bb4 <HAL_RCC_GetSysClockFreq>
 8004e50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	085a      	lsrs	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	441a      	add	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	61bb      	str	r3, [r7, #24]
        break;
 8004e68:	e00e      	b.n	8004e88 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	61bb      	str	r3, [r7, #24]
        break;
 8004e80:	e002      	b.n	8004e88 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
        break;
 8004e86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b0f      	cmp	r3, #15
 8004e8c:	d908      	bls.n	8004ea0 <UART_SetConfig+0x530>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d204      	bcs.n	8004ea0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	e001      	b.n	8004ea4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3720      	adds	r7, #32
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	01e84800 	.word	0x01e84800
 8004ec0:	00f42400 	.word	0x00f42400

08004ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01a      	beq.n	8004fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc2:	d10a      	bne.n	8004fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af02      	add	r7, sp, #8
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005016:	f7fc fc8b 	bl	8001930 <HAL_GetTick>
 800501a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b08      	cmp	r3, #8
 8005028:	d10e      	bne.n	8005048 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800502a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f82a 	bl	8005092 <UART_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e020      	b.n	800508a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b04      	cmp	r3, #4
 8005054:	d10e      	bne.n	8005074 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005056:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f814 	bl	8005092 <UART_WaitOnFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e00a      	b.n	800508a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	603b      	str	r3, [r7, #0]
 800509e:	4613      	mov	r3, r2
 80050a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a2:	e05d      	b.n	8005160 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d059      	beq.n	8005160 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ac:	f7fc fc40 	bl	8001930 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d302      	bcc.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d11b      	bne.n	80050fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e042      	b.n	8005180 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d02b      	beq.n	8005160 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005116:	d123      	bne.n	8005160 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005120:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005130:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0201 	bic.w	r2, r2, #1
 8005140:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2220      	movs	r2, #32
 8005146:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2220      	movs	r2, #32
 800514c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e00f      	b.n	8005180 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69da      	ldr	r2, [r3, #28]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	4013      	ands	r3, r2
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	429a      	cmp	r2, r3
 800516e:	bf0c      	ite	eq
 8005170:	2301      	moveq	r3, #1
 8005172:	2300      	movne	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	429a      	cmp	r2, r3
 800517c:	d092      	beq.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005188:	b084      	sub	sp, #16
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	f107 001c 	add.w	r0, r7, #28
 8005196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	2b01      	cmp	r3, #1
 800519e:	d120      	bne.n	80051e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	4b20      	ldr	r3, [pc, #128]	; (8005234 <USB_CoreInit+0xac>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d105      	bne.n	80051d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa52 	bl	8005680 <USB_CoreReset>
 80051dc:	4603      	mov	r3, r0
 80051de:	73fb      	strb	r3, [r7, #15]
 80051e0:	e010      	b.n	8005204 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa46 	bl	8005680 <USB_CoreReset>
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	2b01      	cmp	r3, #1
 8005208:	d10b      	bne.n	8005222 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f043 0206 	orr.w	r2, r3, #6
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f043 0220 	orr.w	r2, r3, #32
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005222:	7bfb      	ldrb	r3, [r7, #15]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800522e:	b004      	add	sp, #16
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	ffbdffbf 	.word	0xffbdffbf

08005238 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f023 0201 	bic.w	r2, r3, #1
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b082      	sub	sp, #8
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d106      	bne.n	8005286 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60da      	str	r2, [r3, #12]
 8005284:	e00b      	b.n	800529e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d106      	bne.n	800529a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	60da      	str	r2, [r3, #12]
 8005298:	e001      	b.n	800529e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e003      	b.n	80052a6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800529e:	2032      	movs	r0, #50	; 0x32
 80052a0:	f7fc fb52 	bl	8001948 <HAL_Delay>

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052b0:	b084      	sub	sp, #16
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b086      	sub	sp, #24
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80052be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	e009      	b.n	80052e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	3340      	adds	r3, #64	; 0x40
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	2200      	movs	r2, #0
 80052dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	3301      	adds	r3, #1
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2b0e      	cmp	r3, #14
 80052e8:	d9f2      	bls.n	80052d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d11c      	bne.n	800532a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052fe:	f043 0302 	orr.w	r3, r3, #2
 8005302:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005308:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	e005      	b.n	8005336 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800533c:	461a      	mov	r2, r3
 800533e:	2300      	movs	r3, #0
 8005340:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005348:	4619      	mov	r1, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005350:	461a      	mov	r2, r3
 8005352:	680b      	ldr	r3, [r1, #0]
 8005354:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	2b01      	cmp	r3, #1
 800535a:	d10c      	bne.n	8005376 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d104      	bne.n	800536c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005362:	2100      	movs	r1, #0
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f959 	bl	800561c <USB_SetDevSpeed>
 800536a:	e018      	b.n	800539e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800536c:	2101      	movs	r1, #1
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f954 	bl	800561c <USB_SetDevSpeed>
 8005374:	e013      	b.n	800539e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	2b03      	cmp	r3, #3
 800537a:	d10c      	bne.n	8005396 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005382:	2100      	movs	r1, #0
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f949 	bl	800561c <USB_SetDevSpeed>
 800538a:	e008      	b.n	800539e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800538c:	2101      	movs	r1, #1
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f944 	bl	800561c <USB_SetDevSpeed>
 8005394:	e003      	b.n	800539e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005396:	2103      	movs	r1, #3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f93f 	bl	800561c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800539e:	2110      	movs	r1, #16
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f8f3 	bl	800558c <USB_FlushTxFifo>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f911 	bl	80055d8 <USB_FlushRxFifo>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c6:	461a      	mov	r2, r3
 80053c8:	2300      	movs	r3, #0
 80053ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	461a      	mov	r2, r3
 80053d4:	2300      	movs	r3, #0
 80053d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053de:	461a      	mov	r2, r3
 80053e0:	2300      	movs	r3, #0
 80053e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053e4:	2300      	movs	r3, #0
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	e043      	b.n	8005472 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005400:	d118      	bne.n	8005434 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005414:	461a      	mov	r2, r3
 8005416:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	e013      	b.n	8005446 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542a:	461a      	mov	r2, r3
 800542c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e008      	b.n	8005446 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005440:	461a      	mov	r2, r3
 8005442:	2300      	movs	r3, #0
 8005444:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005452:	461a      	mov	r2, r3
 8005454:	2300      	movs	r3, #0
 8005456:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	461a      	mov	r2, r3
 8005466:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800546a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	3301      	adds	r3, #1
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	429a      	cmp	r2, r3
 8005478:	d3b7      	bcc.n	80053ea <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800547a:	2300      	movs	r3, #0
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	e043      	b.n	8005508 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005496:	d118      	bne.n	80054ca <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054aa:	461a      	mov	r2, r3
 80054ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	e013      	b.n	80054dc <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c0:	461a      	mov	r2, r3
 80054c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	e008      	b.n	80054dc <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d6:	461a      	mov	r2, r3
 80054d8:	2300      	movs	r3, #0
 80054da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	461a      	mov	r2, r3
 80054ea:	2300      	movs	r3, #0
 80054ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fa:	461a      	mov	r2, r3
 80054fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005500:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3301      	adds	r3, #1
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	429a      	cmp	r2, r3
 800550e:	d3b7      	bcc.n	8005480 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800551e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005522:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005530:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	2b00      	cmp	r3, #0
 8005536:	d105      	bne.n	8005544 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f043 0210 	orr.w	r2, r3, #16
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	699a      	ldr	r2, [r3, #24]
 8005548:	4b0e      	ldr	r3, [pc, #56]	; (8005584 <USB_DevInit+0x2d4>)
 800554a:	4313      	orrs	r3, r2
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d005      	beq.n	8005562 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f043 0208 	orr.w	r2, r3, #8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005564:	2b01      	cmp	r3, #1
 8005566:	d105      	bne.n	8005574 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	699a      	ldr	r2, [r3, #24]
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <USB_DevInit+0x2d8>)
 800556e:	4313      	orrs	r3, r2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005574:	7dfb      	ldrb	r3, [r7, #23]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005580:	b004      	add	sp, #16
 8005582:	4770      	bx	lr
 8005584:	803c3800 	.word	0x803c3800
 8005588:	40000004 	.word	0x40000004

0800558c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	019b      	lsls	r3, r3, #6
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3301      	adds	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <USB_FlushTxFifo+0x48>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d901      	bls.n	80055b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e006      	b.n	80055c6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d0f0      	beq.n	80055a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	00030d40 	.word	0x00030d40

080055d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2210      	movs	r2, #16
 80055e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3301      	adds	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a09      	ldr	r2, [pc, #36]	; (8005618 <USB_FlushRxFifo+0x40>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d901      	bls.n	80055fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e006      	b.n	800560a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b10      	cmp	r3, #16
 8005606:	d0f0      	beq.n	80055ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	00030d40 	.word	0x00030d40

0800561c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800563c:	4313      	orrs	r3, r2
 800563e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005668:	f043 0302 	orr.w	r3, r3, #2
 800566c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800566e:	2003      	movs	r0, #3
 8005670:	f7fc f96a 	bl	8001948 <HAL_Delay>

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3301      	adds	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4a13      	ldr	r2, [pc, #76]	; (80056e4 <USB_CoreReset+0x64>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e01b      	b.n	80056d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	daf2      	bge.n	800568c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f043 0201 	orr.w	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3301      	adds	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <USB_CoreReset+0x64>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d901      	bls.n	80056c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e006      	b.n	80056d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d0f0      	beq.n	80056b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	00030d40 	.word	0x00030d40

080056e8 <__errno>:
 80056e8:	4b01      	ldr	r3, [pc, #4]	; (80056f0 <__errno+0x8>)
 80056ea:	6818      	ldr	r0, [r3, #0]
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	20000014 	.word	0x20000014

080056f4 <__libc_init_array>:
 80056f4:	b570      	push	{r4, r5, r6, lr}
 80056f6:	4e0d      	ldr	r6, [pc, #52]	; (800572c <__libc_init_array+0x38>)
 80056f8:	4c0d      	ldr	r4, [pc, #52]	; (8005730 <__libc_init_array+0x3c>)
 80056fa:	1ba4      	subs	r4, r4, r6
 80056fc:	10a4      	asrs	r4, r4, #2
 80056fe:	2500      	movs	r5, #0
 8005700:	42a5      	cmp	r5, r4
 8005702:	d109      	bne.n	8005718 <__libc_init_array+0x24>
 8005704:	4e0b      	ldr	r6, [pc, #44]	; (8005734 <__libc_init_array+0x40>)
 8005706:	4c0c      	ldr	r4, [pc, #48]	; (8005738 <__libc_init_array+0x44>)
 8005708:	f000 fc26 	bl	8005f58 <_init>
 800570c:	1ba4      	subs	r4, r4, r6
 800570e:	10a4      	asrs	r4, r4, #2
 8005710:	2500      	movs	r5, #0
 8005712:	42a5      	cmp	r5, r4
 8005714:	d105      	bne.n	8005722 <__libc_init_array+0x2e>
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800571c:	4798      	blx	r3
 800571e:	3501      	adds	r5, #1
 8005720:	e7ee      	b.n	8005700 <__libc_init_array+0xc>
 8005722:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005726:	4798      	blx	r3
 8005728:	3501      	adds	r5, #1
 800572a:	e7f2      	b.n	8005712 <__libc_init_array+0x1e>
 800572c:	080063dc 	.word	0x080063dc
 8005730:	080063dc 	.word	0x080063dc
 8005734:	080063dc 	.word	0x080063dc
 8005738:	080063e0 	.word	0x080063e0

0800573c <memset>:
 800573c:	4402      	add	r2, r0
 800573e:	4603      	mov	r3, r0
 8005740:	4293      	cmp	r3, r2
 8005742:	d100      	bne.n	8005746 <memset+0xa>
 8005744:	4770      	bx	lr
 8005746:	f803 1b01 	strb.w	r1, [r3], #1
 800574a:	e7f9      	b.n	8005740 <memset+0x4>

0800574c <_vsiprintf_r>:
 800574c:	b500      	push	{lr}
 800574e:	b09b      	sub	sp, #108	; 0x6c
 8005750:	9100      	str	r1, [sp, #0]
 8005752:	9104      	str	r1, [sp, #16]
 8005754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005758:	9105      	str	r1, [sp, #20]
 800575a:	9102      	str	r1, [sp, #8]
 800575c:	4905      	ldr	r1, [pc, #20]	; (8005774 <_vsiprintf_r+0x28>)
 800575e:	9103      	str	r1, [sp, #12]
 8005760:	4669      	mov	r1, sp
 8005762:	f000 f86d 	bl	8005840 <_svfiprintf_r>
 8005766:	9b00      	ldr	r3, [sp, #0]
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	b01b      	add	sp, #108	; 0x6c
 800576e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005772:	bf00      	nop
 8005774:	ffff0208 	.word	0xffff0208

08005778 <vsiprintf>:
 8005778:	4613      	mov	r3, r2
 800577a:	460a      	mov	r2, r1
 800577c:	4601      	mov	r1, r0
 800577e:	4802      	ldr	r0, [pc, #8]	; (8005788 <vsiprintf+0x10>)
 8005780:	6800      	ldr	r0, [r0, #0]
 8005782:	f7ff bfe3 	b.w	800574c <_vsiprintf_r>
 8005786:	bf00      	nop
 8005788:	20000014 	.word	0x20000014

0800578c <__ssputs_r>:
 800578c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	688e      	ldr	r6, [r1, #8]
 8005792:	429e      	cmp	r6, r3
 8005794:	4682      	mov	sl, r0
 8005796:	460c      	mov	r4, r1
 8005798:	4690      	mov	r8, r2
 800579a:	4699      	mov	r9, r3
 800579c:	d837      	bhi.n	800580e <__ssputs_r+0x82>
 800579e:	898a      	ldrh	r2, [r1, #12]
 80057a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057a4:	d031      	beq.n	800580a <__ssputs_r+0x7e>
 80057a6:	6825      	ldr	r5, [r4, #0]
 80057a8:	6909      	ldr	r1, [r1, #16]
 80057aa:	1a6f      	subs	r7, r5, r1
 80057ac:	6965      	ldr	r5, [r4, #20]
 80057ae:	2302      	movs	r3, #2
 80057b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80057b8:	f109 0301 	add.w	r3, r9, #1
 80057bc:	443b      	add	r3, r7
 80057be:	429d      	cmp	r5, r3
 80057c0:	bf38      	it	cc
 80057c2:	461d      	movcc	r5, r3
 80057c4:	0553      	lsls	r3, r2, #21
 80057c6:	d530      	bpl.n	800582a <__ssputs_r+0x9e>
 80057c8:	4629      	mov	r1, r5
 80057ca:	f000 fb2b 	bl	8005e24 <_malloc_r>
 80057ce:	4606      	mov	r6, r0
 80057d0:	b950      	cbnz	r0, 80057e8 <__ssputs_r+0x5c>
 80057d2:	230c      	movs	r3, #12
 80057d4:	f8ca 3000 	str.w	r3, [sl]
 80057d8:	89a3      	ldrh	r3, [r4, #12]
 80057da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057de:	81a3      	strh	r3, [r4, #12]
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e8:	463a      	mov	r2, r7
 80057ea:	6921      	ldr	r1, [r4, #16]
 80057ec:	f000 faa8 	bl	8005d40 <memcpy>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	6126      	str	r6, [r4, #16]
 80057fe:	6165      	str	r5, [r4, #20]
 8005800:	443e      	add	r6, r7
 8005802:	1bed      	subs	r5, r5, r7
 8005804:	6026      	str	r6, [r4, #0]
 8005806:	60a5      	str	r5, [r4, #8]
 8005808:	464e      	mov	r6, r9
 800580a:	454e      	cmp	r6, r9
 800580c:	d900      	bls.n	8005810 <__ssputs_r+0x84>
 800580e:	464e      	mov	r6, r9
 8005810:	4632      	mov	r2, r6
 8005812:	4641      	mov	r1, r8
 8005814:	6820      	ldr	r0, [r4, #0]
 8005816:	f000 fa9e 	bl	8005d56 <memmove>
 800581a:	68a3      	ldr	r3, [r4, #8]
 800581c:	1b9b      	subs	r3, r3, r6
 800581e:	60a3      	str	r3, [r4, #8]
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	441e      	add	r6, r3
 8005824:	6026      	str	r6, [r4, #0]
 8005826:	2000      	movs	r0, #0
 8005828:	e7dc      	b.n	80057e4 <__ssputs_r+0x58>
 800582a:	462a      	mov	r2, r5
 800582c:	f000 fb54 	bl	8005ed8 <_realloc_r>
 8005830:	4606      	mov	r6, r0
 8005832:	2800      	cmp	r0, #0
 8005834:	d1e2      	bne.n	80057fc <__ssputs_r+0x70>
 8005836:	6921      	ldr	r1, [r4, #16]
 8005838:	4650      	mov	r0, sl
 800583a:	f000 faa5 	bl	8005d88 <_free_r>
 800583e:	e7c8      	b.n	80057d2 <__ssputs_r+0x46>

08005840 <_svfiprintf_r>:
 8005840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	461d      	mov	r5, r3
 8005846:	898b      	ldrh	r3, [r1, #12]
 8005848:	061f      	lsls	r7, r3, #24
 800584a:	b09d      	sub	sp, #116	; 0x74
 800584c:	4680      	mov	r8, r0
 800584e:	460c      	mov	r4, r1
 8005850:	4616      	mov	r6, r2
 8005852:	d50f      	bpl.n	8005874 <_svfiprintf_r+0x34>
 8005854:	690b      	ldr	r3, [r1, #16]
 8005856:	b96b      	cbnz	r3, 8005874 <_svfiprintf_r+0x34>
 8005858:	2140      	movs	r1, #64	; 0x40
 800585a:	f000 fae3 	bl	8005e24 <_malloc_r>
 800585e:	6020      	str	r0, [r4, #0]
 8005860:	6120      	str	r0, [r4, #16]
 8005862:	b928      	cbnz	r0, 8005870 <_svfiprintf_r+0x30>
 8005864:	230c      	movs	r3, #12
 8005866:	f8c8 3000 	str.w	r3, [r8]
 800586a:	f04f 30ff 	mov.w	r0, #4294967295
 800586e:	e0c8      	b.n	8005a02 <_svfiprintf_r+0x1c2>
 8005870:	2340      	movs	r3, #64	; 0x40
 8005872:	6163      	str	r3, [r4, #20]
 8005874:	2300      	movs	r3, #0
 8005876:	9309      	str	r3, [sp, #36]	; 0x24
 8005878:	2320      	movs	r3, #32
 800587a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800587e:	2330      	movs	r3, #48	; 0x30
 8005880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005884:	9503      	str	r5, [sp, #12]
 8005886:	f04f 0b01 	mov.w	fp, #1
 800588a:	4637      	mov	r7, r6
 800588c:	463d      	mov	r5, r7
 800588e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005892:	b10b      	cbz	r3, 8005898 <_svfiprintf_r+0x58>
 8005894:	2b25      	cmp	r3, #37	; 0x25
 8005896:	d13e      	bne.n	8005916 <_svfiprintf_r+0xd6>
 8005898:	ebb7 0a06 	subs.w	sl, r7, r6
 800589c:	d00b      	beq.n	80058b6 <_svfiprintf_r+0x76>
 800589e:	4653      	mov	r3, sl
 80058a0:	4632      	mov	r2, r6
 80058a2:	4621      	mov	r1, r4
 80058a4:	4640      	mov	r0, r8
 80058a6:	f7ff ff71 	bl	800578c <__ssputs_r>
 80058aa:	3001      	adds	r0, #1
 80058ac:	f000 80a4 	beq.w	80059f8 <_svfiprintf_r+0x1b8>
 80058b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b2:	4453      	add	r3, sl
 80058b4:	9309      	str	r3, [sp, #36]	; 0x24
 80058b6:	783b      	ldrb	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 809d 	beq.w	80059f8 <_svfiprintf_r+0x1b8>
 80058be:	2300      	movs	r3, #0
 80058c0:	f04f 32ff 	mov.w	r2, #4294967295
 80058c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058c8:	9304      	str	r3, [sp, #16]
 80058ca:	9307      	str	r3, [sp, #28]
 80058cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058d0:	931a      	str	r3, [sp, #104]	; 0x68
 80058d2:	462f      	mov	r7, r5
 80058d4:	2205      	movs	r2, #5
 80058d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80058da:	4850      	ldr	r0, [pc, #320]	; (8005a1c <_svfiprintf_r+0x1dc>)
 80058dc:	f7fa fcb8 	bl	8000250 <memchr>
 80058e0:	9b04      	ldr	r3, [sp, #16]
 80058e2:	b9d0      	cbnz	r0, 800591a <_svfiprintf_r+0xda>
 80058e4:	06d9      	lsls	r1, r3, #27
 80058e6:	bf44      	itt	mi
 80058e8:	2220      	movmi	r2, #32
 80058ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058ee:	071a      	lsls	r2, r3, #28
 80058f0:	bf44      	itt	mi
 80058f2:	222b      	movmi	r2, #43	; 0x2b
 80058f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058f8:	782a      	ldrb	r2, [r5, #0]
 80058fa:	2a2a      	cmp	r2, #42	; 0x2a
 80058fc:	d015      	beq.n	800592a <_svfiprintf_r+0xea>
 80058fe:	9a07      	ldr	r2, [sp, #28]
 8005900:	462f      	mov	r7, r5
 8005902:	2000      	movs	r0, #0
 8005904:	250a      	movs	r5, #10
 8005906:	4639      	mov	r1, r7
 8005908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800590c:	3b30      	subs	r3, #48	; 0x30
 800590e:	2b09      	cmp	r3, #9
 8005910:	d94d      	bls.n	80059ae <_svfiprintf_r+0x16e>
 8005912:	b1b8      	cbz	r0, 8005944 <_svfiprintf_r+0x104>
 8005914:	e00f      	b.n	8005936 <_svfiprintf_r+0xf6>
 8005916:	462f      	mov	r7, r5
 8005918:	e7b8      	b.n	800588c <_svfiprintf_r+0x4c>
 800591a:	4a40      	ldr	r2, [pc, #256]	; (8005a1c <_svfiprintf_r+0x1dc>)
 800591c:	1a80      	subs	r0, r0, r2
 800591e:	fa0b f000 	lsl.w	r0, fp, r0
 8005922:	4318      	orrs	r0, r3
 8005924:	9004      	str	r0, [sp, #16]
 8005926:	463d      	mov	r5, r7
 8005928:	e7d3      	b.n	80058d2 <_svfiprintf_r+0x92>
 800592a:	9a03      	ldr	r2, [sp, #12]
 800592c:	1d11      	adds	r1, r2, #4
 800592e:	6812      	ldr	r2, [r2, #0]
 8005930:	9103      	str	r1, [sp, #12]
 8005932:	2a00      	cmp	r2, #0
 8005934:	db01      	blt.n	800593a <_svfiprintf_r+0xfa>
 8005936:	9207      	str	r2, [sp, #28]
 8005938:	e004      	b.n	8005944 <_svfiprintf_r+0x104>
 800593a:	4252      	negs	r2, r2
 800593c:	f043 0302 	orr.w	r3, r3, #2
 8005940:	9207      	str	r2, [sp, #28]
 8005942:	9304      	str	r3, [sp, #16]
 8005944:	783b      	ldrb	r3, [r7, #0]
 8005946:	2b2e      	cmp	r3, #46	; 0x2e
 8005948:	d10c      	bne.n	8005964 <_svfiprintf_r+0x124>
 800594a:	787b      	ldrb	r3, [r7, #1]
 800594c:	2b2a      	cmp	r3, #42	; 0x2a
 800594e:	d133      	bne.n	80059b8 <_svfiprintf_r+0x178>
 8005950:	9b03      	ldr	r3, [sp, #12]
 8005952:	1d1a      	adds	r2, r3, #4
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	9203      	str	r2, [sp, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	bfb8      	it	lt
 800595c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005960:	3702      	adds	r7, #2
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	4d2e      	ldr	r5, [pc, #184]	; (8005a20 <_svfiprintf_r+0x1e0>)
 8005966:	7839      	ldrb	r1, [r7, #0]
 8005968:	2203      	movs	r2, #3
 800596a:	4628      	mov	r0, r5
 800596c:	f7fa fc70 	bl	8000250 <memchr>
 8005970:	b138      	cbz	r0, 8005982 <_svfiprintf_r+0x142>
 8005972:	2340      	movs	r3, #64	; 0x40
 8005974:	1b40      	subs	r0, r0, r5
 8005976:	fa03 f000 	lsl.w	r0, r3, r0
 800597a:	9b04      	ldr	r3, [sp, #16]
 800597c:	4303      	orrs	r3, r0
 800597e:	3701      	adds	r7, #1
 8005980:	9304      	str	r3, [sp, #16]
 8005982:	7839      	ldrb	r1, [r7, #0]
 8005984:	4827      	ldr	r0, [pc, #156]	; (8005a24 <_svfiprintf_r+0x1e4>)
 8005986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800598a:	2206      	movs	r2, #6
 800598c:	1c7e      	adds	r6, r7, #1
 800598e:	f7fa fc5f 	bl	8000250 <memchr>
 8005992:	2800      	cmp	r0, #0
 8005994:	d038      	beq.n	8005a08 <_svfiprintf_r+0x1c8>
 8005996:	4b24      	ldr	r3, [pc, #144]	; (8005a28 <_svfiprintf_r+0x1e8>)
 8005998:	bb13      	cbnz	r3, 80059e0 <_svfiprintf_r+0x1a0>
 800599a:	9b03      	ldr	r3, [sp, #12]
 800599c:	3307      	adds	r3, #7
 800599e:	f023 0307 	bic.w	r3, r3, #7
 80059a2:	3308      	adds	r3, #8
 80059a4:	9303      	str	r3, [sp, #12]
 80059a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a8:	444b      	add	r3, r9
 80059aa:	9309      	str	r3, [sp, #36]	; 0x24
 80059ac:	e76d      	b.n	800588a <_svfiprintf_r+0x4a>
 80059ae:	fb05 3202 	mla	r2, r5, r2, r3
 80059b2:	2001      	movs	r0, #1
 80059b4:	460f      	mov	r7, r1
 80059b6:	e7a6      	b.n	8005906 <_svfiprintf_r+0xc6>
 80059b8:	2300      	movs	r3, #0
 80059ba:	3701      	adds	r7, #1
 80059bc:	9305      	str	r3, [sp, #20]
 80059be:	4619      	mov	r1, r3
 80059c0:	250a      	movs	r5, #10
 80059c2:	4638      	mov	r0, r7
 80059c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059c8:	3a30      	subs	r2, #48	; 0x30
 80059ca:	2a09      	cmp	r2, #9
 80059cc:	d903      	bls.n	80059d6 <_svfiprintf_r+0x196>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0c8      	beq.n	8005964 <_svfiprintf_r+0x124>
 80059d2:	9105      	str	r1, [sp, #20]
 80059d4:	e7c6      	b.n	8005964 <_svfiprintf_r+0x124>
 80059d6:	fb05 2101 	mla	r1, r5, r1, r2
 80059da:	2301      	movs	r3, #1
 80059dc:	4607      	mov	r7, r0
 80059de:	e7f0      	b.n	80059c2 <_svfiprintf_r+0x182>
 80059e0:	ab03      	add	r3, sp, #12
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	4622      	mov	r2, r4
 80059e6:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <_svfiprintf_r+0x1ec>)
 80059e8:	a904      	add	r1, sp, #16
 80059ea:	4640      	mov	r0, r8
 80059ec:	f3af 8000 	nop.w
 80059f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80059f4:	4681      	mov	r9, r0
 80059f6:	d1d6      	bne.n	80059a6 <_svfiprintf_r+0x166>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	065b      	lsls	r3, r3, #25
 80059fc:	f53f af35 	bmi.w	800586a <_svfiprintf_r+0x2a>
 8005a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a02:	b01d      	add	sp, #116	; 0x74
 8005a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a08:	ab03      	add	r3, sp, #12
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <_svfiprintf_r+0x1ec>)
 8005a10:	a904      	add	r1, sp, #16
 8005a12:	4640      	mov	r0, r8
 8005a14:	f000 f882 	bl	8005b1c <_printf_i>
 8005a18:	e7ea      	b.n	80059f0 <_svfiprintf_r+0x1b0>
 8005a1a:	bf00      	nop
 8005a1c:	080063a0 	.word	0x080063a0
 8005a20:	080063a6 	.word	0x080063a6
 8005a24:	080063aa 	.word	0x080063aa
 8005a28:	00000000 	.word	0x00000000
 8005a2c:	0800578d 	.word	0x0800578d

08005a30 <_printf_common>:
 8005a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a34:	4691      	mov	r9, r2
 8005a36:	461f      	mov	r7, r3
 8005a38:	688a      	ldr	r2, [r1, #8]
 8005a3a:	690b      	ldr	r3, [r1, #16]
 8005a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a40:	4293      	cmp	r3, r2
 8005a42:	bfb8      	it	lt
 8005a44:	4613      	movlt	r3, r2
 8005a46:	f8c9 3000 	str.w	r3, [r9]
 8005a4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a4e:	4606      	mov	r6, r0
 8005a50:	460c      	mov	r4, r1
 8005a52:	b112      	cbz	r2, 8005a5a <_printf_common+0x2a>
 8005a54:	3301      	adds	r3, #1
 8005a56:	f8c9 3000 	str.w	r3, [r9]
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	0699      	lsls	r1, r3, #26
 8005a5e:	bf42      	ittt	mi
 8005a60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a64:	3302      	addmi	r3, #2
 8005a66:	f8c9 3000 	strmi.w	r3, [r9]
 8005a6a:	6825      	ldr	r5, [r4, #0]
 8005a6c:	f015 0506 	ands.w	r5, r5, #6
 8005a70:	d107      	bne.n	8005a82 <_printf_common+0x52>
 8005a72:	f104 0a19 	add.w	sl, r4, #25
 8005a76:	68e3      	ldr	r3, [r4, #12]
 8005a78:	f8d9 2000 	ldr.w	r2, [r9]
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	42ab      	cmp	r3, r5
 8005a80:	dc28      	bgt.n	8005ad4 <_printf_common+0xa4>
 8005a82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	3300      	adds	r3, #0
 8005a8a:	bf18      	it	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	0692      	lsls	r2, r2, #26
 8005a90:	d42d      	bmi.n	8005aee <_printf_common+0xbe>
 8005a92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a96:	4639      	mov	r1, r7
 8005a98:	4630      	mov	r0, r6
 8005a9a:	47c0      	blx	r8
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d020      	beq.n	8005ae2 <_printf_common+0xb2>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	68e5      	ldr	r5, [r4, #12]
 8005aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8005aa8:	f003 0306 	and.w	r3, r3, #6
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	bf08      	it	eq
 8005ab0:	1aad      	subeq	r5, r5, r2
 8005ab2:	68a3      	ldr	r3, [r4, #8]
 8005ab4:	6922      	ldr	r2, [r4, #16]
 8005ab6:	bf0c      	ite	eq
 8005ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005abc:	2500      	movne	r5, #0
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	bfc4      	itt	gt
 8005ac2:	1a9b      	subgt	r3, r3, r2
 8005ac4:	18ed      	addgt	r5, r5, r3
 8005ac6:	f04f 0900 	mov.w	r9, #0
 8005aca:	341a      	adds	r4, #26
 8005acc:	454d      	cmp	r5, r9
 8005ace:	d11a      	bne.n	8005b06 <_printf_common+0xd6>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	e008      	b.n	8005ae6 <_printf_common+0xb6>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	4652      	mov	r2, sl
 8005ad8:	4639      	mov	r1, r7
 8005ada:	4630      	mov	r0, r6
 8005adc:	47c0      	blx	r8
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d103      	bne.n	8005aea <_printf_common+0xba>
 8005ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aea:	3501      	adds	r5, #1
 8005aec:	e7c3      	b.n	8005a76 <_printf_common+0x46>
 8005aee:	18e1      	adds	r1, r4, r3
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	2030      	movs	r0, #48	; 0x30
 8005af4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005af8:	4422      	add	r2, r4
 8005afa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005afe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b02:	3302      	adds	r3, #2
 8005b04:	e7c5      	b.n	8005a92 <_printf_common+0x62>
 8005b06:	2301      	movs	r3, #1
 8005b08:	4622      	mov	r2, r4
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	4630      	mov	r0, r6
 8005b0e:	47c0      	blx	r8
 8005b10:	3001      	adds	r0, #1
 8005b12:	d0e6      	beq.n	8005ae2 <_printf_common+0xb2>
 8005b14:	f109 0901 	add.w	r9, r9, #1
 8005b18:	e7d8      	b.n	8005acc <_printf_common+0x9c>
	...

08005b1c <_printf_i>:
 8005b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b24:	460c      	mov	r4, r1
 8005b26:	7e09      	ldrb	r1, [r1, #24]
 8005b28:	b085      	sub	sp, #20
 8005b2a:	296e      	cmp	r1, #110	; 0x6e
 8005b2c:	4617      	mov	r7, r2
 8005b2e:	4606      	mov	r6, r0
 8005b30:	4698      	mov	r8, r3
 8005b32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b34:	f000 80b3 	beq.w	8005c9e <_printf_i+0x182>
 8005b38:	d822      	bhi.n	8005b80 <_printf_i+0x64>
 8005b3a:	2963      	cmp	r1, #99	; 0x63
 8005b3c:	d036      	beq.n	8005bac <_printf_i+0x90>
 8005b3e:	d80a      	bhi.n	8005b56 <_printf_i+0x3a>
 8005b40:	2900      	cmp	r1, #0
 8005b42:	f000 80b9 	beq.w	8005cb8 <_printf_i+0x19c>
 8005b46:	2958      	cmp	r1, #88	; 0x58
 8005b48:	f000 8083 	beq.w	8005c52 <_printf_i+0x136>
 8005b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005b54:	e032      	b.n	8005bbc <_printf_i+0xa0>
 8005b56:	2964      	cmp	r1, #100	; 0x64
 8005b58:	d001      	beq.n	8005b5e <_printf_i+0x42>
 8005b5a:	2969      	cmp	r1, #105	; 0x69
 8005b5c:	d1f6      	bne.n	8005b4c <_printf_i+0x30>
 8005b5e:	6820      	ldr	r0, [r4, #0]
 8005b60:	6813      	ldr	r3, [r2, #0]
 8005b62:	0605      	lsls	r5, r0, #24
 8005b64:	f103 0104 	add.w	r1, r3, #4
 8005b68:	d52a      	bpl.n	8005bc0 <_printf_i+0xa4>
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6011      	str	r1, [r2, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da03      	bge.n	8005b7a <_printf_i+0x5e>
 8005b72:	222d      	movs	r2, #45	; 0x2d
 8005b74:	425b      	negs	r3, r3
 8005b76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b7a:	486f      	ldr	r0, [pc, #444]	; (8005d38 <_printf_i+0x21c>)
 8005b7c:	220a      	movs	r2, #10
 8005b7e:	e039      	b.n	8005bf4 <_printf_i+0xd8>
 8005b80:	2973      	cmp	r1, #115	; 0x73
 8005b82:	f000 809d 	beq.w	8005cc0 <_printf_i+0x1a4>
 8005b86:	d808      	bhi.n	8005b9a <_printf_i+0x7e>
 8005b88:	296f      	cmp	r1, #111	; 0x6f
 8005b8a:	d020      	beq.n	8005bce <_printf_i+0xb2>
 8005b8c:	2970      	cmp	r1, #112	; 0x70
 8005b8e:	d1dd      	bne.n	8005b4c <_printf_i+0x30>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	f043 0320 	orr.w	r3, r3, #32
 8005b96:	6023      	str	r3, [r4, #0]
 8005b98:	e003      	b.n	8005ba2 <_printf_i+0x86>
 8005b9a:	2975      	cmp	r1, #117	; 0x75
 8005b9c:	d017      	beq.n	8005bce <_printf_i+0xb2>
 8005b9e:	2978      	cmp	r1, #120	; 0x78
 8005ba0:	d1d4      	bne.n	8005b4c <_printf_i+0x30>
 8005ba2:	2378      	movs	r3, #120	; 0x78
 8005ba4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ba8:	4864      	ldr	r0, [pc, #400]	; (8005d3c <_printf_i+0x220>)
 8005baa:	e055      	b.n	8005c58 <_printf_i+0x13c>
 8005bac:	6813      	ldr	r3, [r2, #0]
 8005bae:	1d19      	adds	r1, r3, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6011      	str	r1, [r2, #0]
 8005bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e08c      	b.n	8005cda <_printf_i+0x1be>
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6011      	str	r1, [r2, #0]
 8005bc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bc8:	bf18      	it	ne
 8005bca:	b21b      	sxthne	r3, r3
 8005bcc:	e7cf      	b.n	8005b6e <_printf_i+0x52>
 8005bce:	6813      	ldr	r3, [r2, #0]
 8005bd0:	6825      	ldr	r5, [r4, #0]
 8005bd2:	1d18      	adds	r0, r3, #4
 8005bd4:	6010      	str	r0, [r2, #0]
 8005bd6:	0628      	lsls	r0, r5, #24
 8005bd8:	d501      	bpl.n	8005bde <_printf_i+0xc2>
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	e002      	b.n	8005be4 <_printf_i+0xc8>
 8005bde:	0668      	lsls	r0, r5, #25
 8005be0:	d5fb      	bpl.n	8005bda <_printf_i+0xbe>
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	4854      	ldr	r0, [pc, #336]	; (8005d38 <_printf_i+0x21c>)
 8005be6:	296f      	cmp	r1, #111	; 0x6f
 8005be8:	bf14      	ite	ne
 8005bea:	220a      	movne	r2, #10
 8005bec:	2208      	moveq	r2, #8
 8005bee:	2100      	movs	r1, #0
 8005bf0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bf4:	6865      	ldr	r5, [r4, #4]
 8005bf6:	60a5      	str	r5, [r4, #8]
 8005bf8:	2d00      	cmp	r5, #0
 8005bfa:	f2c0 8095 	blt.w	8005d28 <_printf_i+0x20c>
 8005bfe:	6821      	ldr	r1, [r4, #0]
 8005c00:	f021 0104 	bic.w	r1, r1, #4
 8005c04:	6021      	str	r1, [r4, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d13d      	bne.n	8005c86 <_printf_i+0x16a>
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	f040 808e 	bne.w	8005d2c <_printf_i+0x210>
 8005c10:	4665      	mov	r5, ip
 8005c12:	2a08      	cmp	r2, #8
 8005c14:	d10b      	bne.n	8005c2e <_printf_i+0x112>
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	07db      	lsls	r3, r3, #31
 8005c1a:	d508      	bpl.n	8005c2e <_printf_i+0x112>
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	6862      	ldr	r2, [r4, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	bfde      	ittt	le
 8005c24:	2330      	movle	r3, #48	; 0x30
 8005c26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c2e:	ebac 0305 	sub.w	r3, ip, r5
 8005c32:	6123      	str	r3, [r4, #16]
 8005c34:	f8cd 8000 	str.w	r8, [sp]
 8005c38:	463b      	mov	r3, r7
 8005c3a:	aa03      	add	r2, sp, #12
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f7ff fef6 	bl	8005a30 <_printf_common>
 8005c44:	3001      	adds	r0, #1
 8005c46:	d14d      	bne.n	8005ce4 <_printf_i+0x1c8>
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295
 8005c4c:	b005      	add	sp, #20
 8005c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c52:	4839      	ldr	r0, [pc, #228]	; (8005d38 <_printf_i+0x21c>)
 8005c54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005c58:	6813      	ldr	r3, [r2, #0]
 8005c5a:	6821      	ldr	r1, [r4, #0]
 8005c5c:	1d1d      	adds	r5, r3, #4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6015      	str	r5, [r2, #0]
 8005c62:	060a      	lsls	r2, r1, #24
 8005c64:	d50b      	bpl.n	8005c7e <_printf_i+0x162>
 8005c66:	07ca      	lsls	r2, r1, #31
 8005c68:	bf44      	itt	mi
 8005c6a:	f041 0120 	orrmi.w	r1, r1, #32
 8005c6e:	6021      	strmi	r1, [r4, #0]
 8005c70:	b91b      	cbnz	r3, 8005c7a <_printf_i+0x15e>
 8005c72:	6822      	ldr	r2, [r4, #0]
 8005c74:	f022 0220 	bic.w	r2, r2, #32
 8005c78:	6022      	str	r2, [r4, #0]
 8005c7a:	2210      	movs	r2, #16
 8005c7c:	e7b7      	b.n	8005bee <_printf_i+0xd2>
 8005c7e:	064d      	lsls	r5, r1, #25
 8005c80:	bf48      	it	mi
 8005c82:	b29b      	uxthmi	r3, r3
 8005c84:	e7ef      	b.n	8005c66 <_printf_i+0x14a>
 8005c86:	4665      	mov	r5, ip
 8005c88:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c8c:	fb02 3311 	mls	r3, r2, r1, r3
 8005c90:	5cc3      	ldrb	r3, [r0, r3]
 8005c92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005c96:	460b      	mov	r3, r1
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	d1f5      	bne.n	8005c88 <_printf_i+0x16c>
 8005c9c:	e7b9      	b.n	8005c12 <_printf_i+0xf6>
 8005c9e:	6813      	ldr	r3, [r2, #0]
 8005ca0:	6825      	ldr	r5, [r4, #0]
 8005ca2:	6961      	ldr	r1, [r4, #20]
 8005ca4:	1d18      	adds	r0, r3, #4
 8005ca6:	6010      	str	r0, [r2, #0]
 8005ca8:	0628      	lsls	r0, r5, #24
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	d501      	bpl.n	8005cb2 <_printf_i+0x196>
 8005cae:	6019      	str	r1, [r3, #0]
 8005cb0:	e002      	b.n	8005cb8 <_printf_i+0x19c>
 8005cb2:	066a      	lsls	r2, r5, #25
 8005cb4:	d5fb      	bpl.n	8005cae <_printf_i+0x192>
 8005cb6:	8019      	strh	r1, [r3, #0]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	6123      	str	r3, [r4, #16]
 8005cbc:	4665      	mov	r5, ip
 8005cbe:	e7b9      	b.n	8005c34 <_printf_i+0x118>
 8005cc0:	6813      	ldr	r3, [r2, #0]
 8005cc2:	1d19      	adds	r1, r3, #4
 8005cc4:	6011      	str	r1, [r2, #0]
 8005cc6:	681d      	ldr	r5, [r3, #0]
 8005cc8:	6862      	ldr	r2, [r4, #4]
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f7fa fabf 	bl	8000250 <memchr>
 8005cd2:	b108      	cbz	r0, 8005cd8 <_printf_i+0x1bc>
 8005cd4:	1b40      	subs	r0, r0, r5
 8005cd6:	6060      	str	r0, [r4, #4]
 8005cd8:	6863      	ldr	r3, [r4, #4]
 8005cda:	6123      	str	r3, [r4, #16]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ce2:	e7a7      	b.n	8005c34 <_printf_i+0x118>
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	4639      	mov	r1, r7
 8005cea:	4630      	mov	r0, r6
 8005cec:	47c0      	blx	r8
 8005cee:	3001      	adds	r0, #1
 8005cf0:	d0aa      	beq.n	8005c48 <_printf_i+0x12c>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	079b      	lsls	r3, r3, #30
 8005cf6:	d413      	bmi.n	8005d20 <_printf_i+0x204>
 8005cf8:	68e0      	ldr	r0, [r4, #12]
 8005cfa:	9b03      	ldr	r3, [sp, #12]
 8005cfc:	4298      	cmp	r0, r3
 8005cfe:	bfb8      	it	lt
 8005d00:	4618      	movlt	r0, r3
 8005d02:	e7a3      	b.n	8005c4c <_printf_i+0x130>
 8005d04:	2301      	movs	r3, #1
 8005d06:	464a      	mov	r2, r9
 8005d08:	4639      	mov	r1, r7
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	47c0      	blx	r8
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d09a      	beq.n	8005c48 <_printf_i+0x12c>
 8005d12:	3501      	adds	r5, #1
 8005d14:	68e3      	ldr	r3, [r4, #12]
 8005d16:	9a03      	ldr	r2, [sp, #12]
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	42ab      	cmp	r3, r5
 8005d1c:	dcf2      	bgt.n	8005d04 <_printf_i+0x1e8>
 8005d1e:	e7eb      	b.n	8005cf8 <_printf_i+0x1dc>
 8005d20:	2500      	movs	r5, #0
 8005d22:	f104 0919 	add.w	r9, r4, #25
 8005d26:	e7f5      	b.n	8005d14 <_printf_i+0x1f8>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1ac      	bne.n	8005c86 <_printf_i+0x16a>
 8005d2c:	7803      	ldrb	r3, [r0, #0]
 8005d2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d36:	e76c      	b.n	8005c12 <_printf_i+0xf6>
 8005d38:	080063b1 	.word	0x080063b1
 8005d3c:	080063c2 	.word	0x080063c2

08005d40 <memcpy>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	1e43      	subs	r3, r0, #1
 8005d44:	440a      	add	r2, r1
 8005d46:	4291      	cmp	r1, r2
 8005d48:	d100      	bne.n	8005d4c <memcpy+0xc>
 8005d4a:	bd10      	pop	{r4, pc}
 8005d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d54:	e7f7      	b.n	8005d46 <memcpy+0x6>

08005d56 <memmove>:
 8005d56:	4288      	cmp	r0, r1
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	eb01 0302 	add.w	r3, r1, r2
 8005d5e:	d807      	bhi.n	8005d70 <memmove+0x1a>
 8005d60:	1e42      	subs	r2, r0, #1
 8005d62:	4299      	cmp	r1, r3
 8005d64:	d00a      	beq.n	8005d7c <memmove+0x26>
 8005d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d6a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005d6e:	e7f8      	b.n	8005d62 <memmove+0xc>
 8005d70:	4283      	cmp	r3, r0
 8005d72:	d9f5      	bls.n	8005d60 <memmove+0xa>
 8005d74:	1881      	adds	r1, r0, r2
 8005d76:	1ad2      	subs	r2, r2, r3
 8005d78:	42d3      	cmn	r3, r2
 8005d7a:	d100      	bne.n	8005d7e <memmove+0x28>
 8005d7c:	bd10      	pop	{r4, pc}
 8005d7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d82:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005d86:	e7f7      	b.n	8005d78 <memmove+0x22>

08005d88 <_free_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	2900      	cmp	r1, #0
 8005d8e:	d045      	beq.n	8005e1c <_free_r+0x94>
 8005d90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d94:	1f0c      	subs	r4, r1, #4
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	bfb8      	it	lt
 8005d9a:	18e4      	addlt	r4, r4, r3
 8005d9c:	f000 f8d2 	bl	8005f44 <__malloc_lock>
 8005da0:	4a1f      	ldr	r2, [pc, #124]	; (8005e20 <_free_r+0x98>)
 8005da2:	6813      	ldr	r3, [r2, #0]
 8005da4:	4610      	mov	r0, r2
 8005da6:	b933      	cbnz	r3, 8005db6 <_free_r+0x2e>
 8005da8:	6063      	str	r3, [r4, #4]
 8005daa:	6014      	str	r4, [r2, #0]
 8005dac:	4628      	mov	r0, r5
 8005dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005db2:	f000 b8c8 	b.w	8005f46 <__malloc_unlock>
 8005db6:	42a3      	cmp	r3, r4
 8005db8:	d90c      	bls.n	8005dd4 <_free_r+0x4c>
 8005dba:	6821      	ldr	r1, [r4, #0]
 8005dbc:	1862      	adds	r2, r4, r1
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	bf04      	itt	eq
 8005dc2:	681a      	ldreq	r2, [r3, #0]
 8005dc4:	685b      	ldreq	r3, [r3, #4]
 8005dc6:	6063      	str	r3, [r4, #4]
 8005dc8:	bf04      	itt	eq
 8005dca:	1852      	addeq	r2, r2, r1
 8005dcc:	6022      	streq	r2, [r4, #0]
 8005dce:	6004      	str	r4, [r0, #0]
 8005dd0:	e7ec      	b.n	8005dac <_free_r+0x24>
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	b10a      	cbz	r2, 8005ddc <_free_r+0x54>
 8005dd8:	42a2      	cmp	r2, r4
 8005dda:	d9fa      	bls.n	8005dd2 <_free_r+0x4a>
 8005ddc:	6819      	ldr	r1, [r3, #0]
 8005dde:	1858      	adds	r0, r3, r1
 8005de0:	42a0      	cmp	r0, r4
 8005de2:	d10b      	bne.n	8005dfc <_free_r+0x74>
 8005de4:	6820      	ldr	r0, [r4, #0]
 8005de6:	4401      	add	r1, r0
 8005de8:	1858      	adds	r0, r3, r1
 8005dea:	4282      	cmp	r2, r0
 8005dec:	6019      	str	r1, [r3, #0]
 8005dee:	d1dd      	bne.n	8005dac <_free_r+0x24>
 8005df0:	6810      	ldr	r0, [r2, #0]
 8005df2:	6852      	ldr	r2, [r2, #4]
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	4401      	add	r1, r0
 8005df8:	6019      	str	r1, [r3, #0]
 8005dfa:	e7d7      	b.n	8005dac <_free_r+0x24>
 8005dfc:	d902      	bls.n	8005e04 <_free_r+0x7c>
 8005dfe:	230c      	movs	r3, #12
 8005e00:	602b      	str	r3, [r5, #0]
 8005e02:	e7d3      	b.n	8005dac <_free_r+0x24>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	1821      	adds	r1, r4, r0
 8005e08:	428a      	cmp	r2, r1
 8005e0a:	bf04      	itt	eq
 8005e0c:	6811      	ldreq	r1, [r2, #0]
 8005e0e:	6852      	ldreq	r2, [r2, #4]
 8005e10:	6062      	str	r2, [r4, #4]
 8005e12:	bf04      	itt	eq
 8005e14:	1809      	addeq	r1, r1, r0
 8005e16:	6021      	streq	r1, [r4, #0]
 8005e18:	605c      	str	r4, [r3, #4]
 8005e1a:	e7c7      	b.n	8005dac <_free_r+0x24>
 8005e1c:	bd38      	pop	{r3, r4, r5, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000098 	.word	0x20000098

08005e24 <_malloc_r>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	1ccd      	adds	r5, r1, #3
 8005e28:	f025 0503 	bic.w	r5, r5, #3
 8005e2c:	3508      	adds	r5, #8
 8005e2e:	2d0c      	cmp	r5, #12
 8005e30:	bf38      	it	cc
 8005e32:	250c      	movcc	r5, #12
 8005e34:	2d00      	cmp	r5, #0
 8005e36:	4606      	mov	r6, r0
 8005e38:	db01      	blt.n	8005e3e <_malloc_r+0x1a>
 8005e3a:	42a9      	cmp	r1, r5
 8005e3c:	d903      	bls.n	8005e46 <_malloc_r+0x22>
 8005e3e:	230c      	movs	r3, #12
 8005e40:	6033      	str	r3, [r6, #0]
 8005e42:	2000      	movs	r0, #0
 8005e44:	bd70      	pop	{r4, r5, r6, pc}
 8005e46:	f000 f87d 	bl	8005f44 <__malloc_lock>
 8005e4a:	4a21      	ldr	r2, [pc, #132]	; (8005ed0 <_malloc_r+0xac>)
 8005e4c:	6814      	ldr	r4, [r2, #0]
 8005e4e:	4621      	mov	r1, r4
 8005e50:	b991      	cbnz	r1, 8005e78 <_malloc_r+0x54>
 8005e52:	4c20      	ldr	r4, [pc, #128]	; (8005ed4 <_malloc_r+0xb0>)
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	b91b      	cbnz	r3, 8005e60 <_malloc_r+0x3c>
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f000 f863 	bl	8005f24 <_sbrk_r>
 8005e5e:	6020      	str	r0, [r4, #0]
 8005e60:	4629      	mov	r1, r5
 8005e62:	4630      	mov	r0, r6
 8005e64:	f000 f85e 	bl	8005f24 <_sbrk_r>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d124      	bne.n	8005eb6 <_malloc_r+0x92>
 8005e6c:	230c      	movs	r3, #12
 8005e6e:	6033      	str	r3, [r6, #0]
 8005e70:	4630      	mov	r0, r6
 8005e72:	f000 f868 	bl	8005f46 <__malloc_unlock>
 8005e76:	e7e4      	b.n	8005e42 <_malloc_r+0x1e>
 8005e78:	680b      	ldr	r3, [r1, #0]
 8005e7a:	1b5b      	subs	r3, r3, r5
 8005e7c:	d418      	bmi.n	8005eb0 <_malloc_r+0x8c>
 8005e7e:	2b0b      	cmp	r3, #11
 8005e80:	d90f      	bls.n	8005ea2 <_malloc_r+0x7e>
 8005e82:	600b      	str	r3, [r1, #0]
 8005e84:	50cd      	str	r5, [r1, r3]
 8005e86:	18cc      	adds	r4, r1, r3
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f000 f85c 	bl	8005f46 <__malloc_unlock>
 8005e8e:	f104 000b 	add.w	r0, r4, #11
 8005e92:	1d23      	adds	r3, r4, #4
 8005e94:	f020 0007 	bic.w	r0, r0, #7
 8005e98:	1ac3      	subs	r3, r0, r3
 8005e9a:	d0d3      	beq.n	8005e44 <_malloc_r+0x20>
 8005e9c:	425a      	negs	r2, r3
 8005e9e:	50e2      	str	r2, [r4, r3]
 8005ea0:	e7d0      	b.n	8005e44 <_malloc_r+0x20>
 8005ea2:	428c      	cmp	r4, r1
 8005ea4:	684b      	ldr	r3, [r1, #4]
 8005ea6:	bf16      	itet	ne
 8005ea8:	6063      	strne	r3, [r4, #4]
 8005eaa:	6013      	streq	r3, [r2, #0]
 8005eac:	460c      	movne	r4, r1
 8005eae:	e7eb      	b.n	8005e88 <_malloc_r+0x64>
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	6849      	ldr	r1, [r1, #4]
 8005eb4:	e7cc      	b.n	8005e50 <_malloc_r+0x2c>
 8005eb6:	1cc4      	adds	r4, r0, #3
 8005eb8:	f024 0403 	bic.w	r4, r4, #3
 8005ebc:	42a0      	cmp	r0, r4
 8005ebe:	d005      	beq.n	8005ecc <_malloc_r+0xa8>
 8005ec0:	1a21      	subs	r1, r4, r0
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f000 f82e 	bl	8005f24 <_sbrk_r>
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d0cf      	beq.n	8005e6c <_malloc_r+0x48>
 8005ecc:	6025      	str	r5, [r4, #0]
 8005ece:	e7db      	b.n	8005e88 <_malloc_r+0x64>
 8005ed0:	20000098 	.word	0x20000098
 8005ed4:	2000009c 	.word	0x2000009c

08005ed8 <_realloc_r>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	4607      	mov	r7, r0
 8005edc:	4614      	mov	r4, r2
 8005ede:	460e      	mov	r6, r1
 8005ee0:	b921      	cbnz	r1, 8005eec <_realloc_r+0x14>
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ee8:	f7ff bf9c 	b.w	8005e24 <_malloc_r>
 8005eec:	b922      	cbnz	r2, 8005ef8 <_realloc_r+0x20>
 8005eee:	f7ff ff4b 	bl	8005d88 <_free_r>
 8005ef2:	4625      	mov	r5, r4
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef8:	f000 f826 	bl	8005f48 <_malloc_usable_size_r>
 8005efc:	42a0      	cmp	r0, r4
 8005efe:	d20f      	bcs.n	8005f20 <_realloc_r+0x48>
 8005f00:	4621      	mov	r1, r4
 8005f02:	4638      	mov	r0, r7
 8005f04:	f7ff ff8e 	bl	8005e24 <_malloc_r>
 8005f08:	4605      	mov	r5, r0
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d0f2      	beq.n	8005ef4 <_realloc_r+0x1c>
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4622      	mov	r2, r4
 8005f12:	f7ff ff15 	bl	8005d40 <memcpy>
 8005f16:	4631      	mov	r1, r6
 8005f18:	4638      	mov	r0, r7
 8005f1a:	f7ff ff35 	bl	8005d88 <_free_r>
 8005f1e:	e7e9      	b.n	8005ef4 <_realloc_r+0x1c>
 8005f20:	4635      	mov	r5, r6
 8005f22:	e7e7      	b.n	8005ef4 <_realloc_r+0x1c>

08005f24 <_sbrk_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4c06      	ldr	r4, [pc, #24]	; (8005f40 <_sbrk_r+0x1c>)
 8005f28:	2300      	movs	r3, #0
 8005f2a:	4605      	mov	r5, r0
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	f7fb fc38 	bl	80017a4 <_sbrk>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d102      	bne.n	8005f3e <_sbrk_r+0x1a>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	b103      	cbz	r3, 8005f3e <_sbrk_r+0x1a>
 8005f3c:	602b      	str	r3, [r5, #0]
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	200006f8 	.word	0x200006f8

08005f44 <__malloc_lock>:
 8005f44:	4770      	bx	lr

08005f46 <__malloc_unlock>:
 8005f46:	4770      	bx	lr

08005f48 <_malloc_usable_size_r>:
 8005f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f4c:	1f18      	subs	r0, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	bfbc      	itt	lt
 8005f52:	580b      	ldrlt	r3, [r1, r0]
 8005f54:	18c0      	addlt	r0, r0, r3
 8005f56:	4770      	bx	lr

08005f58 <_init>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	bf00      	nop
 8005f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5e:	bc08      	pop	{r3}
 8005f60:	469e      	mov	lr, r3
 8005f62:	4770      	bx	lr

08005f64 <_fini>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	bf00      	nop
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr
