
02_User_app_STM32F7xxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd8  080081f8  080081f8  000081f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800c1d0  0800c1d0  0000c1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1e8  0800c1e8  0001002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1e8  0800c1e8  0000c1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1f0  0800c1f0  0001002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1f0  0800c1f0  0000c1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1f4  0800c1f4  0000c1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800c1f8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ec  2000002c  0800c224  0001002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  0800c224  00010518  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2df  00000000  00000000  0001005a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f74  00000000  00000000  0001e339  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  000202b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  00020eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002797a  00000000  00000000  000219b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a356  00000000  00000000  00049332  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f86a6  00000000  00000000  00053688  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bd2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003154  00000000  00000000  0014bdac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080081f8 <__do_global_dtors_aux>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	4c05      	ldr	r4, [pc, #20]	; (8008210 <__do_global_dtors_aux+0x18>)
 80081fc:	7823      	ldrb	r3, [r4, #0]
 80081fe:	b933      	cbnz	r3, 800820e <__do_global_dtors_aux+0x16>
 8008200:	4b04      	ldr	r3, [pc, #16]	; (8008214 <__do_global_dtors_aux+0x1c>)
 8008202:	b113      	cbz	r3, 800820a <__do_global_dtors_aux+0x12>
 8008204:	4804      	ldr	r0, [pc, #16]	; (8008218 <__do_global_dtors_aux+0x20>)
 8008206:	f3af 8000 	nop.w
 800820a:	2301      	movs	r3, #1
 800820c:	7023      	strb	r3, [r4, #0]
 800820e:	bd10      	pop	{r4, pc}
 8008210:	2000002c 	.word	0x2000002c
 8008214:	00000000 	.word	0x00000000
 8008218:	0800c1b8 	.word	0x0800c1b8

0800821c <frame_dummy>:
 800821c:	b508      	push	{r3, lr}
 800821e:	4b03      	ldr	r3, [pc, #12]	; (800822c <frame_dummy+0x10>)
 8008220:	b11b      	cbz	r3, 800822a <frame_dummy+0xe>
 8008222:	4903      	ldr	r1, [pc, #12]	; (8008230 <frame_dummy+0x14>)
 8008224:	4803      	ldr	r0, [pc, #12]	; (8008234 <frame_dummy+0x18>)
 8008226:	f3af 8000 	nop.w
 800822a:	bd08      	pop	{r3, pc}
 800822c:	00000000 	.word	0x00000000
 8008230:	20000030 	.word	0x20000030
 8008234:	0800c1b8 	.word	0x0800c1b8

08008238 <__aeabi_uldivmod>:
 8008238:	b953      	cbnz	r3, 8008250 <__aeabi_uldivmod+0x18>
 800823a:	b94a      	cbnz	r2, 8008250 <__aeabi_uldivmod+0x18>
 800823c:	2900      	cmp	r1, #0
 800823e:	bf08      	it	eq
 8008240:	2800      	cmpeq	r0, #0
 8008242:	bf1c      	itt	ne
 8008244:	f04f 31ff 	movne.w	r1, #4294967295
 8008248:	f04f 30ff 	movne.w	r0, #4294967295
 800824c:	f000 b972 	b.w	8008534 <__aeabi_idiv0>
 8008250:	f1ad 0c08 	sub.w	ip, sp, #8
 8008254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008258:	f000 f806 	bl	8008268 <__udivmoddi4>
 800825c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008264:	b004      	add	sp, #16
 8008266:	4770      	bx	lr

08008268 <__udivmoddi4>:
 8008268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800826c:	9e08      	ldr	r6, [sp, #32]
 800826e:	4604      	mov	r4, r0
 8008270:	4688      	mov	r8, r1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d14b      	bne.n	800830e <__udivmoddi4+0xa6>
 8008276:	428a      	cmp	r2, r1
 8008278:	4615      	mov	r5, r2
 800827a:	d967      	bls.n	800834c <__udivmoddi4+0xe4>
 800827c:	fab2 f282 	clz	r2, r2
 8008280:	b14a      	cbz	r2, 8008296 <__udivmoddi4+0x2e>
 8008282:	f1c2 0720 	rsb	r7, r2, #32
 8008286:	fa01 f302 	lsl.w	r3, r1, r2
 800828a:	fa20 f707 	lsr.w	r7, r0, r7
 800828e:	4095      	lsls	r5, r2
 8008290:	ea47 0803 	orr.w	r8, r7, r3
 8008294:	4094      	lsls	r4, r2
 8008296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800829a:	0c23      	lsrs	r3, r4, #16
 800829c:	fbb8 f7fe 	udiv	r7, r8, lr
 80082a0:	fa1f fc85 	uxth.w	ip, r5
 80082a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80082a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80082ac:	fb07 f10c 	mul.w	r1, r7, ip
 80082b0:	4299      	cmp	r1, r3
 80082b2:	d909      	bls.n	80082c8 <__udivmoddi4+0x60>
 80082b4:	18eb      	adds	r3, r5, r3
 80082b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80082ba:	f080 811b 	bcs.w	80084f4 <__udivmoddi4+0x28c>
 80082be:	4299      	cmp	r1, r3
 80082c0:	f240 8118 	bls.w	80084f4 <__udivmoddi4+0x28c>
 80082c4:	3f02      	subs	r7, #2
 80082c6:	442b      	add	r3, r5
 80082c8:	1a5b      	subs	r3, r3, r1
 80082ca:	b2a4      	uxth	r4, r4
 80082cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80082d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80082d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80082d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80082dc:	45a4      	cmp	ip, r4
 80082de:	d909      	bls.n	80082f4 <__udivmoddi4+0x8c>
 80082e0:	192c      	adds	r4, r5, r4
 80082e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80082e6:	f080 8107 	bcs.w	80084f8 <__udivmoddi4+0x290>
 80082ea:	45a4      	cmp	ip, r4
 80082ec:	f240 8104 	bls.w	80084f8 <__udivmoddi4+0x290>
 80082f0:	3802      	subs	r0, #2
 80082f2:	442c      	add	r4, r5
 80082f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80082f8:	eba4 040c 	sub.w	r4, r4, ip
 80082fc:	2700      	movs	r7, #0
 80082fe:	b11e      	cbz	r6, 8008308 <__udivmoddi4+0xa0>
 8008300:	40d4      	lsrs	r4, r2
 8008302:	2300      	movs	r3, #0
 8008304:	e9c6 4300 	strd	r4, r3, [r6]
 8008308:	4639      	mov	r1, r7
 800830a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830e:	428b      	cmp	r3, r1
 8008310:	d909      	bls.n	8008326 <__udivmoddi4+0xbe>
 8008312:	2e00      	cmp	r6, #0
 8008314:	f000 80eb 	beq.w	80084ee <__udivmoddi4+0x286>
 8008318:	2700      	movs	r7, #0
 800831a:	e9c6 0100 	strd	r0, r1, [r6]
 800831e:	4638      	mov	r0, r7
 8008320:	4639      	mov	r1, r7
 8008322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008326:	fab3 f783 	clz	r7, r3
 800832a:	2f00      	cmp	r7, #0
 800832c:	d147      	bne.n	80083be <__udivmoddi4+0x156>
 800832e:	428b      	cmp	r3, r1
 8008330:	d302      	bcc.n	8008338 <__udivmoddi4+0xd0>
 8008332:	4282      	cmp	r2, r0
 8008334:	f200 80fa 	bhi.w	800852c <__udivmoddi4+0x2c4>
 8008338:	1a84      	subs	r4, r0, r2
 800833a:	eb61 0303 	sbc.w	r3, r1, r3
 800833e:	2001      	movs	r0, #1
 8008340:	4698      	mov	r8, r3
 8008342:	2e00      	cmp	r6, #0
 8008344:	d0e0      	beq.n	8008308 <__udivmoddi4+0xa0>
 8008346:	e9c6 4800 	strd	r4, r8, [r6]
 800834a:	e7dd      	b.n	8008308 <__udivmoddi4+0xa0>
 800834c:	b902      	cbnz	r2, 8008350 <__udivmoddi4+0xe8>
 800834e:	deff      	udf	#255	; 0xff
 8008350:	fab2 f282 	clz	r2, r2
 8008354:	2a00      	cmp	r2, #0
 8008356:	f040 808f 	bne.w	8008478 <__udivmoddi4+0x210>
 800835a:	1b49      	subs	r1, r1, r5
 800835c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008360:	fa1f f885 	uxth.w	r8, r5
 8008364:	2701      	movs	r7, #1
 8008366:	fbb1 fcfe 	udiv	ip, r1, lr
 800836a:	0c23      	lsrs	r3, r4, #16
 800836c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008374:	fb08 f10c 	mul.w	r1, r8, ip
 8008378:	4299      	cmp	r1, r3
 800837a:	d907      	bls.n	800838c <__udivmoddi4+0x124>
 800837c:	18eb      	adds	r3, r5, r3
 800837e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008382:	d202      	bcs.n	800838a <__udivmoddi4+0x122>
 8008384:	4299      	cmp	r1, r3
 8008386:	f200 80cd 	bhi.w	8008524 <__udivmoddi4+0x2bc>
 800838a:	4684      	mov	ip, r0
 800838c:	1a59      	subs	r1, r3, r1
 800838e:	b2a3      	uxth	r3, r4
 8008390:	fbb1 f0fe 	udiv	r0, r1, lr
 8008394:	fb0e 1410 	mls	r4, lr, r0, r1
 8008398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800839c:	fb08 f800 	mul.w	r8, r8, r0
 80083a0:	45a0      	cmp	r8, r4
 80083a2:	d907      	bls.n	80083b4 <__udivmoddi4+0x14c>
 80083a4:	192c      	adds	r4, r5, r4
 80083a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80083aa:	d202      	bcs.n	80083b2 <__udivmoddi4+0x14a>
 80083ac:	45a0      	cmp	r8, r4
 80083ae:	f200 80b6 	bhi.w	800851e <__udivmoddi4+0x2b6>
 80083b2:	4618      	mov	r0, r3
 80083b4:	eba4 0408 	sub.w	r4, r4, r8
 80083b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80083bc:	e79f      	b.n	80082fe <__udivmoddi4+0x96>
 80083be:	f1c7 0c20 	rsb	ip, r7, #32
 80083c2:	40bb      	lsls	r3, r7
 80083c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80083c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80083cc:	fa01 f407 	lsl.w	r4, r1, r7
 80083d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80083d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80083d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80083dc:	4325      	orrs	r5, r4
 80083de:	fbb3 f9f8 	udiv	r9, r3, r8
 80083e2:	0c2c      	lsrs	r4, r5, #16
 80083e4:	fb08 3319 	mls	r3, r8, r9, r3
 80083e8:	fa1f fa8e 	uxth.w	sl, lr
 80083ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80083f0:	fb09 f40a 	mul.w	r4, r9, sl
 80083f4:	429c      	cmp	r4, r3
 80083f6:	fa02 f207 	lsl.w	r2, r2, r7
 80083fa:	fa00 f107 	lsl.w	r1, r0, r7
 80083fe:	d90b      	bls.n	8008418 <__udivmoddi4+0x1b0>
 8008400:	eb1e 0303 	adds.w	r3, lr, r3
 8008404:	f109 30ff 	add.w	r0, r9, #4294967295
 8008408:	f080 8087 	bcs.w	800851a <__udivmoddi4+0x2b2>
 800840c:	429c      	cmp	r4, r3
 800840e:	f240 8084 	bls.w	800851a <__udivmoddi4+0x2b2>
 8008412:	f1a9 0902 	sub.w	r9, r9, #2
 8008416:	4473      	add	r3, lr
 8008418:	1b1b      	subs	r3, r3, r4
 800841a:	b2ad      	uxth	r5, r5
 800841c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008420:	fb08 3310 	mls	r3, r8, r0, r3
 8008424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008428:	fb00 fa0a 	mul.w	sl, r0, sl
 800842c:	45a2      	cmp	sl, r4
 800842e:	d908      	bls.n	8008442 <__udivmoddi4+0x1da>
 8008430:	eb1e 0404 	adds.w	r4, lr, r4
 8008434:	f100 33ff 	add.w	r3, r0, #4294967295
 8008438:	d26b      	bcs.n	8008512 <__udivmoddi4+0x2aa>
 800843a:	45a2      	cmp	sl, r4
 800843c:	d969      	bls.n	8008512 <__udivmoddi4+0x2aa>
 800843e:	3802      	subs	r0, #2
 8008440:	4474      	add	r4, lr
 8008442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008446:	fba0 8902 	umull	r8, r9, r0, r2
 800844a:	eba4 040a 	sub.w	r4, r4, sl
 800844e:	454c      	cmp	r4, r9
 8008450:	46c2      	mov	sl, r8
 8008452:	464b      	mov	r3, r9
 8008454:	d354      	bcc.n	8008500 <__udivmoddi4+0x298>
 8008456:	d051      	beq.n	80084fc <__udivmoddi4+0x294>
 8008458:	2e00      	cmp	r6, #0
 800845a:	d069      	beq.n	8008530 <__udivmoddi4+0x2c8>
 800845c:	ebb1 050a 	subs.w	r5, r1, sl
 8008460:	eb64 0403 	sbc.w	r4, r4, r3
 8008464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008468:	40fd      	lsrs	r5, r7
 800846a:	40fc      	lsrs	r4, r7
 800846c:	ea4c 0505 	orr.w	r5, ip, r5
 8008470:	e9c6 5400 	strd	r5, r4, [r6]
 8008474:	2700      	movs	r7, #0
 8008476:	e747      	b.n	8008308 <__udivmoddi4+0xa0>
 8008478:	f1c2 0320 	rsb	r3, r2, #32
 800847c:	fa20 f703 	lsr.w	r7, r0, r3
 8008480:	4095      	lsls	r5, r2
 8008482:	fa01 f002 	lsl.w	r0, r1, r2
 8008486:	fa21 f303 	lsr.w	r3, r1, r3
 800848a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800848e:	4338      	orrs	r0, r7
 8008490:	0c01      	lsrs	r1, r0, #16
 8008492:	fbb3 f7fe 	udiv	r7, r3, lr
 8008496:	fa1f f885 	uxth.w	r8, r5
 800849a:	fb0e 3317 	mls	r3, lr, r7, r3
 800849e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084a2:	fb07 f308 	mul.w	r3, r7, r8
 80084a6:	428b      	cmp	r3, r1
 80084a8:	fa04 f402 	lsl.w	r4, r4, r2
 80084ac:	d907      	bls.n	80084be <__udivmoddi4+0x256>
 80084ae:	1869      	adds	r1, r5, r1
 80084b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80084b4:	d22f      	bcs.n	8008516 <__udivmoddi4+0x2ae>
 80084b6:	428b      	cmp	r3, r1
 80084b8:	d92d      	bls.n	8008516 <__udivmoddi4+0x2ae>
 80084ba:	3f02      	subs	r7, #2
 80084bc:	4429      	add	r1, r5
 80084be:	1acb      	subs	r3, r1, r3
 80084c0:	b281      	uxth	r1, r0
 80084c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80084c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80084ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084ce:	fb00 f308 	mul.w	r3, r0, r8
 80084d2:	428b      	cmp	r3, r1
 80084d4:	d907      	bls.n	80084e6 <__udivmoddi4+0x27e>
 80084d6:	1869      	adds	r1, r5, r1
 80084d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80084dc:	d217      	bcs.n	800850e <__udivmoddi4+0x2a6>
 80084de:	428b      	cmp	r3, r1
 80084e0:	d915      	bls.n	800850e <__udivmoddi4+0x2a6>
 80084e2:	3802      	subs	r0, #2
 80084e4:	4429      	add	r1, r5
 80084e6:	1ac9      	subs	r1, r1, r3
 80084e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80084ec:	e73b      	b.n	8008366 <__udivmoddi4+0xfe>
 80084ee:	4637      	mov	r7, r6
 80084f0:	4630      	mov	r0, r6
 80084f2:	e709      	b.n	8008308 <__udivmoddi4+0xa0>
 80084f4:	4607      	mov	r7, r0
 80084f6:	e6e7      	b.n	80082c8 <__udivmoddi4+0x60>
 80084f8:	4618      	mov	r0, r3
 80084fa:	e6fb      	b.n	80082f4 <__udivmoddi4+0x8c>
 80084fc:	4541      	cmp	r1, r8
 80084fe:	d2ab      	bcs.n	8008458 <__udivmoddi4+0x1f0>
 8008500:	ebb8 0a02 	subs.w	sl, r8, r2
 8008504:	eb69 020e 	sbc.w	r2, r9, lr
 8008508:	3801      	subs	r0, #1
 800850a:	4613      	mov	r3, r2
 800850c:	e7a4      	b.n	8008458 <__udivmoddi4+0x1f0>
 800850e:	4660      	mov	r0, ip
 8008510:	e7e9      	b.n	80084e6 <__udivmoddi4+0x27e>
 8008512:	4618      	mov	r0, r3
 8008514:	e795      	b.n	8008442 <__udivmoddi4+0x1da>
 8008516:	4667      	mov	r7, ip
 8008518:	e7d1      	b.n	80084be <__udivmoddi4+0x256>
 800851a:	4681      	mov	r9, r0
 800851c:	e77c      	b.n	8008418 <__udivmoddi4+0x1b0>
 800851e:	3802      	subs	r0, #2
 8008520:	442c      	add	r4, r5
 8008522:	e747      	b.n	80083b4 <__udivmoddi4+0x14c>
 8008524:	f1ac 0c02 	sub.w	ip, ip, #2
 8008528:	442b      	add	r3, r5
 800852a:	e72f      	b.n	800838c <__udivmoddi4+0x124>
 800852c:	4638      	mov	r0, r7
 800852e:	e708      	b.n	8008342 <__udivmoddi4+0xda>
 8008530:	4637      	mov	r7, r6
 8008532:	e6e9      	b.n	8008308 <__udivmoddi4+0xa0>

08008534 <__aeabi_idiv0>:
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop

08008538 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void){
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800853e:	f000 fc00 	bl	8008d42 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8008542:	f000 f821 	bl	8008588 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8008546:	f000 f953 	bl	80087f0 <MX_GPIO_Init>
	MX_ETH_Init();
 800854a:	f000 f8b3 	bl	80086b4 <MX_ETH_Init>
	MX_USART3_UART_Init();
 800854e:	f000 f8f1 	bl	8008734 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8008552:	f000 f91f 	bl	8008794 <MX_USB_OTG_FS_PCD_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while(1){
		/* USER CODE END WHILE */
		uint32_t current_tick = HAL_GetTick();
 8008556:	f000 fc45 	bl	8008de4 <HAL_GetTick>
 800855a:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t*) somedata, sizeof(somedata), HAL_MAX_DELAY);
 800855c:	f04f 33ff 	mov.w	r3, #4294967295
 8008560:	221f      	movs	r2, #31
 8008562:	4907      	ldr	r1, [pc, #28]	; (8008580 <main+0x48>)
 8008564:	4807      	ldr	r0, [pc, #28]	; (8008584 <main+0x4c>)
 8008566:	f002 fead 	bl	800b2c4 <HAL_UART_Transmit>
		while(HAL_GetTick() <= (current_tick + 500));
 800856a:	bf00      	nop
 800856c:	f000 fc3a 	bl	8008de4 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008578:	429a      	cmp	r2, r3
 800857a:	d9f7      	bls.n	800856c <main+0x34>
	while(1){
 800857c:	e7eb      	b.n	8008556 <main+0x1e>
 800857e:	bf00      	nop
 8008580:	20000000 	.word	0x20000000
 8008584:	20000048 	.word	0x20000048

08008588 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void){
 8008588:	b580      	push	{r7, lr}
 800858a:	b0b8      	sub	sp, #224	; 0xe0
 800858c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800858e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008592:	2234      	movs	r2, #52	; 0x34
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f003 fe06 	bl	800c1a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800859c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	605a      	str	r2, [r3, #4]
 80085a6:	609a      	str	r2, [r3, #8]
 80085a8:	60da      	str	r2, [r3, #12]
 80085aa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80085ac:	f107 0308 	add.w	r3, r7, #8
 80085b0:	2290      	movs	r2, #144	; 0x90
 80085b2:	2100      	movs	r1, #0
 80085b4:	4618      	mov	r0, r3
 80085b6:	f003 fdf7 	bl	800c1a8 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80085ba:	f001 fd09 	bl	8009fd0 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80085be:	4b3a      	ldr	r3, [pc, #232]	; (80086a8 <SystemClock_Config+0x120>)
 80085c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c2:	4a39      	ldr	r2, [pc, #228]	; (80086a8 <SystemClock_Config+0x120>)
 80085c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085c8:	6413      	str	r3, [r2, #64]	; 0x40
 80085ca:	4b37      	ldr	r3, [pc, #220]	; (80086a8 <SystemClock_Config+0x120>)
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085d2:	607b      	str	r3, [r7, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80085d6:	4b35      	ldr	r3, [pc, #212]	; (80086ac <SystemClock_Config+0x124>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80085de:	4a33      	ldr	r2, [pc, #204]	; (80086ac <SystemClock_Config+0x124>)
 80085e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	4b31      	ldr	r3, [pc, #196]	; (80086ac <SystemClock_Config+0x124>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80085ee:	603b      	str	r3, [r7, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085f2:	2301      	movs	r3, #1
 80085f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80085f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80085fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008600:	2302      	movs	r3, #2
 8008602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800860a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 800860e:	2304      	movs	r3, #4
 8008610:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 8008614:	2360      	movs	r3, #96	; 0x60
 8008616:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800861a:	2302      	movs	r3, #2
 800861c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8008620:	2304      	movs	r3, #4
 8008622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8008626:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800862a:	4618      	mov	r0, r3
 800862c:	f001 fd30 	bl	800a090 <HAL_RCC_OscConfig>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <SystemClock_Config+0xb2>
		Error_Handler();
 8008636:	f000 f985 	bl	8008944 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800863a:	f001 fcd9 	bl	8009ff0 <HAL_PWREx_EnableOverDrive>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d001      	beq.n	8008648 <SystemClock_Config+0xc0>
		Error_Handler();
 8008644:	f000 f97e 	bl	8008944 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8008648:	230f      	movs	r3, #15
 800864a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800864e:	2302      	movs	r3, #2
 8008650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008654:	2300      	movs	r3, #0
 8008656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800865a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800865e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008662:	2300      	movs	r3, #0
 8008664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8008668:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800866c:	2103      	movs	r1, #3
 800866e:	4618      	mov	r0, r3
 8008670:	f001 ffbc 	bl	800a5ec <HAL_RCC_ClockConfig>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <SystemClock_Config+0xf6>
		Error_Handler();
 800867a:	f000 f963 	bl	8008944 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 800867e:	4b0c      	ldr	r3, [pc, #48]	; (80086b0 <SystemClock_Config+0x128>)
 8008680:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008682:	2300      	movs	r3, #0
 8008684:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8008686:	2300      	movs	r3, #0
 8008688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800868c:	f107 0308 	add.w	r3, r7, #8
 8008690:	4618      	mov	r0, r3
 8008692:	f002 f9a3 	bl	800a9dc <HAL_RCCEx_PeriphCLKConfig>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <SystemClock_Config+0x118>
		Error_Handler();
 800869c:	f000 f952 	bl	8008944 <Error_Handler>
	}
}
 80086a0:	bf00      	nop
 80086a2:	37e0      	adds	r7, #224	; 0xe0
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	40023800 	.word	0x40023800
 80086ac:	40007000 	.word	0x40007000
 80086b0:	00200100 	.word	0x00200100

080086b4 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void){
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
	/* USER CODE END ETH_Init 0 */

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 80086b8:	4b1c      	ldr	r3, [pc, #112]	; (800872c <MX_ETH_Init+0x78>)
 80086ba:	4a1d      	ldr	r2, [pc, #116]	; (8008730 <MX_ETH_Init+0x7c>)
 80086bc:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80086be:	4b1b      	ldr	r3, [pc, #108]	; (800872c <MX_ETH_Init+0x78>)
 80086c0:	2201      	movs	r2, #1
 80086c2:	605a      	str	r2, [r3, #4]
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80086c4:	4b19      	ldr	r3, [pc, #100]	; (800872c <MX_ETH_Init+0x78>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	821a      	strh	r2, [r3, #16]
	heth.Init.MACAddr[0] = 0x00;
 80086ca:	4b18      	ldr	r3, [pc, #96]	; (800872c <MX_ETH_Init+0x78>)
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[1] = 0x80;
 80086d2:	4b16      	ldr	r3, [pc, #88]	; (800872c <MX_ETH_Init+0x78>)
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	3301      	adds	r3, #1
 80086d8:	2280      	movs	r2, #128	; 0x80
 80086da:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[2] = 0xE1;
 80086dc:	4b13      	ldr	r3, [pc, #76]	; (800872c <MX_ETH_Init+0x78>)
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	3302      	adds	r3, #2
 80086e2:	22e1      	movs	r2, #225	; 0xe1
 80086e4:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[3] = 0x00;
 80086e6:	4b11      	ldr	r3, [pc, #68]	; (800872c <MX_ETH_Init+0x78>)
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	3303      	adds	r3, #3
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[4] = 0x00;
 80086f0:	4b0e      	ldr	r3, [pc, #56]	; (800872c <MX_ETH_Init+0x78>)
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	3304      	adds	r3, #4
 80086f6:	2200      	movs	r2, #0
 80086f8:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[5] = 0x00;
 80086fa:	4b0c      	ldr	r3, [pc, #48]	; (800872c <MX_ETH_Init+0x78>)
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	3305      	adds	r3, #5
 8008700:	2200      	movs	r2, #0
 8008702:	701a      	strb	r2, [r3, #0]
	heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8008704:	4b09      	ldr	r3, [pc, #36]	; (800872c <MX_ETH_Init+0x78>)
 8008706:	2200      	movs	r2, #0
 8008708:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800870a:	4b08      	ldr	r3, [pc, #32]	; (800872c <MX_ETH_Init+0x78>)
 800870c:	2200      	movs	r2, #0
 800870e:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008710:	4b06      	ldr	r3, [pc, #24]	; (800872c <MX_ETH_Init+0x78>)
 8008712:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008716:	621a      	str	r2, [r3, #32]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8008718:	4804      	ldr	r0, [pc, #16]	; (800872c <MX_ETH_Init+0x78>)
 800871a:	f000 fca3 	bl	8009064 <HAL_ETH_Init>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <MX_ETH_Init+0x74>
		Error_Handler();
 8008724:	f000 f90e 	bl	8008944 <Error_Handler>
	}
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8008728:	bf00      	nop
 800872a:	bd80      	pop	{r7, pc}
 800872c:	200004cc 	.word	0x200004cc
 8008730:	40028000 	.word	0x40028000

08008734 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void){
 8008734:	b580      	push	{r7, lr}
 8008736:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8008738:	4b14      	ldr	r3, [pc, #80]	; (800878c <MX_USART3_UART_Init+0x58>)
 800873a:	4a15      	ldr	r2, [pc, #84]	; (8008790 <MX_USART3_UART_Init+0x5c>)
 800873c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800873e:	4b13      	ldr	r3, [pc, #76]	; (800878c <MX_USART3_UART_Init+0x58>)
 8008740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008744:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008746:	4b11      	ldr	r3, [pc, #68]	; (800878c <MX_USART3_UART_Init+0x58>)
 8008748:	2200      	movs	r2, #0
 800874a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800874c:	4b0f      	ldr	r3, [pc, #60]	; (800878c <MX_USART3_UART_Init+0x58>)
 800874e:	2200      	movs	r2, #0
 8008750:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8008752:	4b0e      	ldr	r3, [pc, #56]	; (800878c <MX_USART3_UART_Init+0x58>)
 8008754:	2200      	movs	r2, #0
 8008756:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8008758:	4b0c      	ldr	r3, [pc, #48]	; (800878c <MX_USART3_UART_Init+0x58>)
 800875a:	220c      	movs	r2, #12
 800875c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800875e:	4b0b      	ldr	r3, [pc, #44]	; (800878c <MX_USART3_UART_Init+0x58>)
 8008760:	2200      	movs	r2, #0
 8008762:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008764:	4b09      	ldr	r3, [pc, #36]	; (800878c <MX_USART3_UART_Init+0x58>)
 8008766:	2200      	movs	r2, #0
 8008768:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800876a:	4b08      	ldr	r3, [pc, #32]	; (800878c <MX_USART3_UART_Init+0x58>)
 800876c:	2200      	movs	r2, #0
 800876e:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008770:	4b06      	ldr	r3, [pc, #24]	; (800878c <MX_USART3_UART_Init+0x58>)
 8008772:	2200      	movs	r2, #0
 8008774:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8008776:	4805      	ldr	r0, [pc, #20]	; (800878c <MX_USART3_UART_Init+0x58>)
 8008778:	f002 fd56 	bl	800b228 <HAL_UART_Init>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8008782:	f000 f8df 	bl	8008944 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8008786:	bf00      	nop
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20000048 	.word	0x20000048
 8008790:	40004800 	.word	0x40004800

08008794 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void){
 8008794:	b580      	push	{r7, lr}
 8008796:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008798:	4b14      	ldr	r3, [pc, #80]	; (80087ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800879a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800879e:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80087a0:	4b12      	ldr	r3, [pc, #72]	; (80087ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80087a2:	2206      	movs	r2, #6
 80087a4:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80087a6:	4b11      	ldr	r3, [pc, #68]	; (80087ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80087a8:	2202      	movs	r2, #2
 80087aa:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80087ac:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80087b2:	4b0e      	ldr	r3, [pc, #56]	; (80087ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80087b4:	2202      	movs	r2, #2
 80087b6:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80087b8:	4b0c      	ldr	r3, [pc, #48]	; (80087ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80087ba:	2201      	movs	r2, #1
 80087bc:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80087be:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80087c0:	2200      	movs	r2, #0
 80087c2:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80087c4:	4b09      	ldr	r3, [pc, #36]	; (80087ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80087ca:	4b08      	ldr	r3, [pc, #32]	; (80087ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80087cc:	2201      	movs	r2, #1
 80087ce:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087d0:	4b06      	ldr	r3, [pc, #24]	; (80087ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80087d6:	4805      	ldr	r0, [pc, #20]	; (80087ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80087d8:	f001 fab1 	bl	8009d3e <HAL_PCD_Init>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <MX_USB_OTG_FS_PCD_Init+0x52>
		Error_Handler();
 80087e2:	f000 f8af 	bl	8008944 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80087e6:	bf00      	nop
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	200000c8 	.word	0x200000c8

080087f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void){
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08c      	sub	sp, #48	; 0x30
 80087f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f6:	f107 031c 	add.w	r3, r7, #28
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	605a      	str	r2, [r3, #4]
 8008800:	609a      	str	r2, [r3, #8]
 8008802:	60da      	str	r2, [r3, #12]
 8008804:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8008806:	4b4a      	ldr	r3, [pc, #296]	; (8008930 <MX_GPIO_Init+0x140>)
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	4a49      	ldr	r2, [pc, #292]	; (8008930 <MX_GPIO_Init+0x140>)
 800880c:	f043 0304 	orr.w	r3, r3, #4
 8008810:	6313      	str	r3, [r2, #48]	; 0x30
 8008812:	4b47      	ldr	r3, [pc, #284]	; (8008930 <MX_GPIO_Init+0x140>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	61bb      	str	r3, [r7, #24]
 800881c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800881e:	4b44      	ldr	r3, [pc, #272]	; (8008930 <MX_GPIO_Init+0x140>)
 8008820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008822:	4a43      	ldr	r2, [pc, #268]	; (8008930 <MX_GPIO_Init+0x140>)
 8008824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008828:	6313      	str	r3, [r2, #48]	; 0x30
 800882a:	4b41      	ldr	r3, [pc, #260]	; (8008930 <MX_GPIO_Init+0x140>)
 800882c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008832:	617b      	str	r3, [r7, #20]
 8008834:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8008836:	4b3e      	ldr	r3, [pc, #248]	; (8008930 <MX_GPIO_Init+0x140>)
 8008838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883a:	4a3d      	ldr	r2, [pc, #244]	; (8008930 <MX_GPIO_Init+0x140>)
 800883c:	f043 0301 	orr.w	r3, r3, #1
 8008840:	6313      	str	r3, [r2, #48]	; 0x30
 8008842:	4b3b      	ldr	r3, [pc, #236]	; (8008930 <MX_GPIO_Init+0x140>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	613b      	str	r3, [r7, #16]
 800884c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800884e:	4b38      	ldr	r3, [pc, #224]	; (8008930 <MX_GPIO_Init+0x140>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	4a37      	ldr	r2, [pc, #220]	; (8008930 <MX_GPIO_Init+0x140>)
 8008854:	f043 0302 	orr.w	r3, r3, #2
 8008858:	6313      	str	r3, [r2, #48]	; 0x30
 800885a:	4b35      	ldr	r3, [pc, #212]	; (8008930 <MX_GPIO_Init+0x140>)
 800885c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8008866:	4b32      	ldr	r3, [pc, #200]	; (8008930 <MX_GPIO_Init+0x140>)
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	4a31      	ldr	r2, [pc, #196]	; (8008930 <MX_GPIO_Init+0x140>)
 800886c:	f043 0308 	orr.w	r3, r3, #8
 8008870:	6313      	str	r3, [r2, #48]	; 0x30
 8008872:	4b2f      	ldr	r3, [pc, #188]	; (8008930 <MX_GPIO_Init+0x140>)
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	f003 0308 	and.w	r3, r3, #8
 800887a:	60bb      	str	r3, [r7, #8]
 800887c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800887e:	4b2c      	ldr	r3, [pc, #176]	; (8008930 <MX_GPIO_Init+0x140>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	4a2b      	ldr	r2, [pc, #172]	; (8008930 <MX_GPIO_Init+0x140>)
 8008884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008888:	6313      	str	r3, [r2, #48]	; 0x30
 800888a:	4b29      	ldr	r3, [pc, #164]	; (8008930 <MX_GPIO_Init+0x140>)
 800888c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008892:	607b      	str	r3, [r7, #4]
 8008894:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8008896:	2200      	movs	r2, #0
 8008898:	f244 0181 	movw	r1, #16513	; 0x4081
 800889c:	4825      	ldr	r0, [pc, #148]	; (8008934 <MX_GPIO_Init+0x144>)
 800889e:	f001 f9f7 	bl	8009c90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80088a2:	2200      	movs	r2, #0
 80088a4:	2140      	movs	r1, #64	; 0x40
 80088a6:	4824      	ldr	r0, [pc, #144]	; (8008938 <MX_GPIO_Init+0x148>)
 80088a8:	f001 f9f2 	bl	8009c90 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80088ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80088b2:	4b22      	ldr	r3, [pc, #136]	; (800893c <MX_GPIO_Init+0x14c>)
 80088b4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80088ba:	f107 031c 	add.w	r3, r7, #28
 80088be:	4619      	mov	r1, r3
 80088c0:	481f      	ldr	r0, [pc, #124]	; (8008940 <MX_GPIO_Init+0x150>)
 80088c2:	f001 f83b 	bl	800993c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80088c6:	f244 0381 	movw	r3, #16513	; 0x4081
 80088ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088cc:	2301      	movs	r3, #1
 80088ce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088d4:	2300      	movs	r3, #0
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088d8:	f107 031c 	add.w	r3, r7, #28
 80088dc:	4619      	mov	r1, r3
 80088de:	4815      	ldr	r0, [pc, #84]	; (8008934 <MX_GPIO_Init+0x144>)
 80088e0:	f001 f82c 	bl	800993c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80088e4:	2340      	movs	r3, #64	; 0x40
 80088e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088e8:	2301      	movs	r3, #1
 80088ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ec:	2300      	movs	r3, #0
 80088ee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088f0:	2300      	movs	r3, #0
 80088f2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80088f4:	f107 031c 	add.w	r3, r7, #28
 80088f8:	4619      	mov	r1, r3
 80088fa:	480f      	ldr	r0, [pc, #60]	; (8008938 <MX_GPIO_Init+0x148>)
 80088fc:	f001 f81e 	bl	800993c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8008900:	2380      	movs	r3, #128	; 0x80
 8008902:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008904:	2300      	movs	r3, #0
 8008906:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008908:	2300      	movs	r3, #0
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800890c:	f107 031c 	add.w	r3, r7, #28
 8008910:	4619      	mov	r1, r3
 8008912:	4809      	ldr	r0, [pc, #36]	; (8008938 <MX_GPIO_Init+0x148>)
 8008914:	f001 f812 	bl	800993c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008918:	2200      	movs	r2, #0
 800891a:	2100      	movs	r1, #0
 800891c:	2028      	movs	r0, #40	; 0x28
 800891e:	f000 fb6a 	bl	8008ff6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008922:	2028      	movs	r0, #40	; 0x28
 8008924:	f000 fb83 	bl	800902e <HAL_NVIC_EnableIRQ>

}
 8008928:	bf00      	nop
 800892a:	3730      	adds	r7, #48	; 0x30
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	40023800 	.word	0x40023800
 8008934:	40020400 	.word	0x40020400
 8008938:	40021800 	.word	0x40021800
 800893c:	10110000 	.word	0x10110000
 8008940:	40020800 	.word	0x40020800

08008944 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void){
 8008944:	b480      	push	{r7}
 8008946:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8008948:	bf00      	nop
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
	...

08008954 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 800895a:	4b0f      	ldr	r3, [pc, #60]	; (8008998 <HAL_MspInit+0x44>)
 800895c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895e:	4a0e      	ldr	r2, [pc, #56]	; (8008998 <HAL_MspInit+0x44>)
 8008960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008964:	6413      	str	r3, [r2, #64]	; 0x40
 8008966:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <HAL_MspInit+0x44>)
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800896e:	607b      	str	r3, [r7, #4]
 8008970:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8008972:	4b09      	ldr	r3, [pc, #36]	; (8008998 <HAL_MspInit+0x44>)
 8008974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008976:	4a08      	ldr	r2, [pc, #32]	; (8008998 <HAL_MspInit+0x44>)
 8008978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800897c:	6453      	str	r3, [r2, #68]	; 0x44
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <HAL_MspInit+0x44>)
 8008980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008986:	603b      	str	r3, [r7, #0]
 8008988:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800898a:	bf00      	nop
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	40023800 	.word	0x40023800

0800899c <HAL_ETH_MspInit>:
 * @brief ETH MSP Initialization
 * This function configures the hardware resources used in this example
 * @param heth: ETH handle pointer
 * @retval None
 */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth){
 800899c:	b580      	push	{r7, lr}
 800899e:	b08e      	sub	sp, #56	; 0x38
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80089a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	605a      	str	r2, [r3, #4]
 80089ae:	609a      	str	r2, [r3, #8]
 80089b0:	60da      	str	r2, [r3, #12]
 80089b2:	611a      	str	r2, [r3, #16]
	if (heth->Instance == ETH) {
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a4e      	ldr	r2, [pc, #312]	; (8008af4 <HAL_ETH_MspInit+0x158>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	f040 8096 	bne.w	8008aec <HAL_ETH_MspInit+0x150>
		/* USER CODE BEGIN ETH_MspInit 0 */

		/* USER CODE END ETH_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_ETH_CLK_ENABLE();
 80089c0:	4b4d      	ldr	r3, [pc, #308]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	4a4c      	ldr	r2, [pc, #304]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 80089c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80089ca:	6313      	str	r3, [r2, #48]	; 0x30
 80089cc:	4b4a      	ldr	r3, [pc, #296]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 80089ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089d4:	623b      	str	r3, [r7, #32]
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	4b47      	ldr	r3, [pc, #284]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 80089da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089dc:	4a46      	ldr	r2, [pc, #280]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 80089de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089e2:	6313      	str	r3, [r2, #48]	; 0x30
 80089e4:	4b44      	ldr	r3, [pc, #272]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 80089e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089ec:	61fb      	str	r3, [r7, #28]
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	4b41      	ldr	r3, [pc, #260]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 80089f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f4:	4a40      	ldr	r2, [pc, #256]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 80089f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089fa:	6313      	str	r3, [r2, #48]	; 0x30
 80089fc:	4b3e      	ldr	r3, [pc, #248]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 80089fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a04:	61bb      	str	r3, [r7, #24]
 8008a06:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8008a08:	4b3b      	ldr	r3, [pc, #236]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 8008a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0c:	4a3a      	ldr	r2, [pc, #232]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 8008a0e:	f043 0304 	orr.w	r3, r3, #4
 8008a12:	6313      	str	r3, [r2, #48]	; 0x30
 8008a14:	4b38      	ldr	r3, [pc, #224]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 8008a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008a20:	4b35      	ldr	r3, [pc, #212]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 8008a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a24:	4a34      	ldr	r2, [pc, #208]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 8008a26:	f043 0301 	orr.w	r3, r3, #1
 8008a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8008a2c:	4b32      	ldr	r3, [pc, #200]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 8008a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	613b      	str	r3, [r7, #16]
 8008a36:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8008a38:	4b2f      	ldr	r3, [pc, #188]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 8008a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3c:	4a2e      	ldr	r2, [pc, #184]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 8008a3e:	f043 0302 	orr.w	r3, r3, #2
 8008a42:	6313      	str	r3, [r2, #48]	; 0x30
 8008a44:	4b2c      	ldr	r3, [pc, #176]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 8008a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a48:	f003 0302 	and.w	r3, r3, #2
 8008a4c:	60fb      	str	r3, [r7, #12]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8008a50:	4b29      	ldr	r3, [pc, #164]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 8008a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a54:	4a28      	ldr	r2, [pc, #160]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 8008a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8008a5c:	4b26      	ldr	r3, [pc, #152]	; (8008af8 <HAL_ETH_MspInit+0x15c>)
 8008a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	68bb      	ldr	r3, [r7, #8]
		 PC5     ------> ETH_RXD1
		 PB13     ------> ETH_TXD1
		 PG11     ------> ETH_TX_EN
		 PG13     ------> ETH_TXD0
		 */
		GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8008a68:	2332      	movs	r3, #50	; 0x32
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a74:	2303      	movs	r3, #3
 8008a76:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008a78:	230b      	movs	r3, #11
 8008a7a:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a80:	4619      	mov	r1, r3
 8008a82:	481e      	ldr	r0, [pc, #120]	; (8008afc <HAL_ETH_MspInit+0x160>)
 8008a84:	f000 ff5a 	bl	800993c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin =
 8008a88:	2386      	movs	r3, #134	; 0x86
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
				RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a94:	2303      	movs	r3, #3
 8008a96:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008a98:	230b      	movs	r3, #11
 8008a9a:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4817      	ldr	r0, [pc, #92]	; (8008b00 <HAL_ETH_MspInit+0x164>)
 8008aa4:	f000 ff4a 	bl	800993c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008aba:	230b      	movs	r3, #11
 8008abc:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	480f      	ldr	r0, [pc, #60]	; (8008b04 <HAL_ETH_MspInit+0x168>)
 8008ac6:	f000 ff39 	bl	800993c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8008aca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008adc:	230b      	movs	r3, #11
 8008ade:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4808      	ldr	r0, [pc, #32]	; (8008b08 <HAL_ETH_MspInit+0x16c>)
 8008ae8:	f000 ff28 	bl	800993c <HAL_GPIO_Init>
		/* USER CODE BEGIN ETH_MspInit 1 */

		/* USER CODE END ETH_MspInit 1 */
	}

}
 8008aec:	bf00      	nop
 8008aee:	3738      	adds	r7, #56	; 0x38
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	40028000 	.word	0x40028000
 8008af8:	40023800 	.word	0x40023800
 8008afc:	40020800 	.word	0x40020800
 8008b00:	40020000 	.word	0x40020000
 8008b04:	40020400 	.word	0x40020400
 8008b08:	40021800 	.word	0x40021800

08008b0c <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08a      	sub	sp, #40	; 0x28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008b14:	f107 0314 	add.w	r3, r7, #20
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	605a      	str	r2, [r3, #4]
 8008b1e:	609a      	str	r2, [r3, #8]
 8008b20:	60da      	str	r2, [r3, #12]
 8008b22:	611a      	str	r2, [r3, #16]
	if (huart->Instance == USART3) {
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a17      	ldr	r2, [pc, #92]	; (8008b88 <HAL_UART_MspInit+0x7c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d128      	bne.n	8008b80 <HAL_UART_MspInit+0x74>
		/* USER CODE BEGIN USART3_MspInit 0 */

		/* USER CODE END USART3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 8008b2e:	4b17      	ldr	r3, [pc, #92]	; (8008b8c <HAL_UART_MspInit+0x80>)
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	4a16      	ldr	r2, [pc, #88]	; (8008b8c <HAL_UART_MspInit+0x80>)
 8008b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b38:	6413      	str	r3, [r2, #64]	; 0x40
 8008b3a:	4b14      	ldr	r3, [pc, #80]	; (8008b8c <HAL_UART_MspInit+0x80>)
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b42:	613b      	str	r3, [r7, #16]
 8008b44:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8008b46:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <HAL_UART_MspInit+0x80>)
 8008b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4a:	4a10      	ldr	r2, [pc, #64]	; (8008b8c <HAL_UART_MspInit+0x80>)
 8008b4c:	f043 0308 	orr.w	r3, r3, #8
 8008b50:	6313      	str	r3, [r2, #48]	; 0x30
 8008b52:	4b0e      	ldr	r3, [pc, #56]	; (8008b8c <HAL_UART_MspInit+0x80>)
 8008b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8008b5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008b62:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b64:	2302      	movs	r3, #2
 8008b66:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008b70:	2307      	movs	r3, #7
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008b74:	f107 0314 	add.w	r3, r7, #20
 8008b78:	4619      	mov	r1, r3
 8008b7a:	4805      	ldr	r0, [pc, #20]	; (8008b90 <HAL_UART_MspInit+0x84>)
 8008b7c:	f000 fede 	bl	800993c <HAL_GPIO_Init>
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}

}
 8008b80:	bf00      	nop
 8008b82:	3728      	adds	r7, #40	; 0x28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40004800 	.word	0x40004800
 8008b8c:	40023800 	.word	0x40023800
 8008b90:	40020c00 	.word	0x40020c00

08008b94 <HAL_PCD_MspInit>:
 * @brief PCD MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hpcd: PCD handle pointer
 * @retval None
 */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd){
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08a      	sub	sp, #40	; 0x28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008b9c:	f107 0314 	add.w	r3, r7, #20
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	605a      	str	r2, [r3, #4]
 8008ba6:	609a      	str	r2, [r3, #8]
 8008ba8:	60da      	str	r2, [r3, #12]
 8008baa:	611a      	str	r2, [r3, #16]
	if (hpcd->Instance == USB_OTG_FS) {
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bb4:	d141      	bne.n	8008c3a <HAL_PCD_MspInit+0xa6>
		/* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

		/* USER CODE END USB_OTG_FS_MspInit 0 */

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008bb6:	4b23      	ldr	r3, [pc, #140]	; (8008c44 <HAL_PCD_MspInit+0xb0>)
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bba:	4a22      	ldr	r2, [pc, #136]	; (8008c44 <HAL_PCD_MspInit+0xb0>)
 8008bbc:	f043 0301 	orr.w	r3, r3, #1
 8008bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8008bc2:	4b20      	ldr	r3, [pc, #128]	; (8008c44 <HAL_PCD_MspInit+0xb0>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	613b      	str	r3, [r7, #16]
 8008bcc:	693b      	ldr	r3, [r7, #16]
		 PA9     ------> USB_OTG_FS_VBUS
		 PA10     ------> USB_OTG_FS_ID
		 PA11     ------> USB_OTG_FS_DM
		 PA12     ------> USB_OTG_FS_DP
		 */
		GPIO_InitStruct.Pin =
 8008bce:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008bd2:	617b      	str	r3, [r7, #20]
				USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008be0:	230a      	movs	r3, #10
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008be4:	f107 0314 	add.w	r3, r7, #20
 8008be8:	4619      	mov	r1, r3
 8008bea:	4817      	ldr	r0, [pc, #92]	; (8008c48 <HAL_PCD_MspInit+0xb4>)
 8008bec:	f000 fea6 	bl	800993c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8008bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bf4:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8008bfe:	f107 0314 	add.w	r3, r7, #20
 8008c02:	4619      	mov	r1, r3
 8008c04:	4810      	ldr	r0, [pc, #64]	; (8008c48 <HAL_PCD_MspInit+0xb4>)
 8008c06:	f000 fe99 	bl	800993c <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c0a:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <HAL_PCD_MspInit+0xb0>)
 8008c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0e:	4a0d      	ldr	r2, [pc, #52]	; (8008c44 <HAL_PCD_MspInit+0xb0>)
 8008c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c14:	6353      	str	r3, [r2, #52]	; 0x34
 8008c16:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <HAL_PCD_MspInit+0xb0>)
 8008c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4b08      	ldr	r3, [pc, #32]	; (8008c44 <HAL_PCD_MspInit+0xb0>)
 8008c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c26:	4a07      	ldr	r2, [pc, #28]	; (8008c44 <HAL_PCD_MspInit+0xb0>)
 8008c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8008c2e:	4b05      	ldr	r3, [pc, #20]	; (8008c44 <HAL_PCD_MspInit+0xb0>)
 8008c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c36:	60bb      	str	r3, [r7, #8]
 8008c38:	68bb      	ldr	r3, [r7, #8]
		/* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

		/* USER CODE END USB_OTG_FS_MspInit 1 */
	}

}
 8008c3a:	bf00      	nop
 8008c3c:	3728      	adds	r7, #40	; 0x28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	40023800 	.word	0x40023800
 8008c48:	40020000 	.word	0x40020000

08008c4c <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void){
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008c50:	bf00      	nop
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void){
 8008c5a:	b480      	push	{r7}
 8008c5c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8008c5e:	e7fe      	b.n	8008c5e <HardFault_Handler+0x4>

08008c60 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void){
 8008c60:	b480      	push	{r7}
 8008c62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8008c64:	e7fe      	b.n	8008c64 <MemManage_Handler+0x4>

08008c66 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void){
 8008c66:	b480      	push	{r7}
 8008c68:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8008c6a:	e7fe      	b.n	8008c6a <BusFault_Handler+0x4>

08008c6c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void){
 8008c6c:	b480      	push	{r7}
 8008c6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8008c70:	e7fe      	b.n	8008c70 <UsageFault_Handler+0x4>

08008c72 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void){
 8008c72:	b480      	push	{r7}
 8008c74:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8008c76:	bf00      	nop
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void){
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void){
 8008c8e:	b480      	push	{r7}
 8008c90:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8008c92:	bf00      	nop
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void){
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8008ca0:	f000 f88c 	bl	8008dbc <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8008ca4:	bf00      	nop
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <EXTI15_10_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void){
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8008cac:	2101      	movs	r1, #1
 8008cae:	4804      	ldr	r0, [pc, #16]	; (8008cc0 <EXTI15_10_IRQHandler+0x18>)
 8008cb0:	f001 f807 	bl	8009cc2 <HAL_GPIO_TogglePin>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8008cb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008cb8:	f001 f81e 	bl	8009cf8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8008cbc:	bf00      	nop
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	40020400 	.word	0x40020400

08008cc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008cc8:	4b07      	ldr	r3, [pc, #28]	; (8008ce8 <SystemInit+0x24>)
 8008cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cce:	4a06      	ldr	r2, [pc, #24]	; (8008ce8 <SystemInit+0x24>)
 8008cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008cd8:	4b03      	ldr	r3, [pc, #12]	; (8008ce8 <SystemInit+0x24>)
 8008cda:	4a04      	ldr	r2, [pc, #16]	; (8008cec <SystemInit+0x28>)
 8008cdc:	609a      	str	r2, [r3, #8]
#endif
}
 8008cde:	bf00      	nop
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	e000ed00 	.word	0xe000ed00
 8008cec:	08008000 	.word	0x08008000

08008cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008d28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008cf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008cf6:	e003      	b.n	8008d00 <LoopCopyDataInit>

08008cf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008cf8:	4b0c      	ldr	r3, [pc, #48]	; (8008d2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008cfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008cfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008cfe:	3104      	adds	r1, #4

08008d00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008d00:	480b      	ldr	r0, [pc, #44]	; (8008d30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008d02:	4b0c      	ldr	r3, [pc, #48]	; (8008d34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008d04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008d06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008d08:	d3f6      	bcc.n	8008cf8 <CopyDataInit>
  ldr  r2, =_sbss
 8008d0a:	4a0b      	ldr	r2, [pc, #44]	; (8008d38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008d0c:	e002      	b.n	8008d14 <LoopFillZerobss>

08008d0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008d0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008d10:	f842 3b04 	str.w	r3, [r2], #4

08008d14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008d14:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008d16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008d18:	d3f9      	bcc.n	8008d0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008d1a:	f7ff ffd3 	bl	8008cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d1e:	f003 fa1f 	bl	800c160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008d22:	f7ff fc09 	bl	8008538 <main>
  bx  lr    
 8008d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008d28:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8008d2c:	0800c1f8 	.word	0x0800c1f8
  ldr  r0, =_sdata
 8008d30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008d34:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8008d38:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8008d3c:	20000518 	.word	0x20000518

08008d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008d40:	e7fe      	b.n	8008d40 <ADC_IRQHandler>

08008d42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d46:	2003      	movs	r0, #3
 8008d48:	f000 f94a 	bl	8008fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	f000 f805 	bl	8008d5c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008d52:	f7ff fdff 	bl	8008954 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d64:	4b12      	ldr	r3, [pc, #72]	; (8008db0 <HAL_InitTick+0x54>)
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	4b12      	ldr	r3, [pc, #72]	; (8008db4 <HAL_InitTick+0x58>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 f965 	bl	800904a <HAL_SYSTICK_Config>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e00e      	b.n	8008da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b0f      	cmp	r3, #15
 8008d8e:	d80a      	bhi.n	8008da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d90:	2200      	movs	r2, #0
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	f000 f92d 	bl	8008ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d9c:	4a06      	ldr	r2, [pc, #24]	; (8008db8 <HAL_InitTick+0x5c>)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	e000      	b.n	8008da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20000020 	.word	0x20000020
 8008db4:	20000028 	.word	0x20000028
 8008db8:	20000024 	.word	0x20000024

08008dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008dc0:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <HAL_IncTick+0x20>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <HAL_IncTick+0x24>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4413      	add	r3, r2
 8008dcc:	4a04      	ldr	r2, [pc, #16]	; (8008de0 <HAL_IncTick+0x24>)
 8008dce:	6013      	str	r3, [r2, #0]
}
 8008dd0:	bf00      	nop
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	20000028 	.word	0x20000028
 8008de0:	20000514 	.word	0x20000514

08008de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008de4:	b480      	push	{r7}
 8008de6:	af00      	add	r7, sp, #0
  return uwTick;
 8008de8:	4b03      	ldr	r3, [pc, #12]	; (8008df8 <HAL_GetTick+0x14>)
 8008dea:	681b      	ldr	r3, [r3, #0]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	20000514 	.word	0x20000514

08008dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e04:	f7ff ffee 	bl	8008de4 <HAL_GetTick>
 8008e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e14:	d005      	beq.n	8008e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e16:	4b09      	ldr	r3, [pc, #36]	; (8008e3c <HAL_Delay+0x40>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008e22:	bf00      	nop
 8008e24:	f7ff ffde 	bl	8008de4 <HAL_GetTick>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	1ad3      	subs	r3, r2, r3
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d8f7      	bhi.n	8008e24 <HAL_Delay+0x28>
  {
  }
}
 8008e34:	bf00      	nop
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	20000028 	.word	0x20000028

08008e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f003 0307 	and.w	r3, r3, #7
 8008e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e50:	4b0b      	ldr	r3, [pc, #44]	; (8008e80 <__NVIC_SetPriorityGrouping+0x40>)
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008e5c:	4013      	ands	r3, r2
 8008e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008e68:	4b06      	ldr	r3, [pc, #24]	; (8008e84 <__NVIC_SetPriorityGrouping+0x44>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e6e:	4a04      	ldr	r2, [pc, #16]	; (8008e80 <__NVIC_SetPriorityGrouping+0x40>)
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	60d3      	str	r3, [r2, #12]
}
 8008e74:	bf00      	nop
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	e000ed00 	.word	0xe000ed00
 8008e84:	05fa0000 	.word	0x05fa0000

08008e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e8c:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	0a1b      	lsrs	r3, r3, #8
 8008e92:	f003 0307 	and.w	r3, r3, #7
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	e000ed00 	.word	0xe000ed00

08008ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	db0b      	blt.n	8008ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	f003 021f 	and.w	r2, r3, #31
 8008ebc:	4907      	ldr	r1, [pc, #28]	; (8008edc <__NVIC_EnableIRQ+0x38>)
 8008ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ec2:	095b      	lsrs	r3, r3, #5
 8008ec4:	2001      	movs	r0, #1
 8008ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8008eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	e000e100 	.word	0xe000e100

08008ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	6039      	str	r1, [r7, #0]
 8008eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	db0a      	blt.n	8008f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	490c      	ldr	r1, [pc, #48]	; (8008f2c <__NVIC_SetPriority+0x4c>)
 8008efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008efe:	0112      	lsls	r2, r2, #4
 8008f00:	b2d2      	uxtb	r2, r2
 8008f02:	440b      	add	r3, r1
 8008f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008f08:	e00a      	b.n	8008f20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	4908      	ldr	r1, [pc, #32]	; (8008f30 <__NVIC_SetPriority+0x50>)
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	f003 030f 	and.w	r3, r3, #15
 8008f16:	3b04      	subs	r3, #4
 8008f18:	0112      	lsls	r2, r2, #4
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	440b      	add	r3, r1
 8008f1e:	761a      	strb	r2, [r3, #24]
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	e000e100 	.word	0xe000e100
 8008f30:	e000ed00 	.word	0xe000ed00

08008f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b089      	sub	sp, #36	; 0x24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f48:	69fb      	ldr	r3, [r7, #28]
 8008f4a:	f1c3 0307 	rsb	r3, r3, #7
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	bf28      	it	cs
 8008f52:	2304      	movcs	r3, #4
 8008f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	2b06      	cmp	r3, #6
 8008f5c:	d902      	bls.n	8008f64 <NVIC_EncodePriority+0x30>
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	3b03      	subs	r3, #3
 8008f62:	e000      	b.n	8008f66 <NVIC_EncodePriority+0x32>
 8008f64:	2300      	movs	r3, #0
 8008f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f68:	f04f 32ff 	mov.w	r2, #4294967295
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f72:	43da      	mvns	r2, r3
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	401a      	ands	r2, r3
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	fa01 f303 	lsl.w	r3, r1, r3
 8008f86:	43d9      	mvns	r1, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f8c:	4313      	orrs	r3, r2
         );
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3724      	adds	r7, #36	; 0x24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
	...

08008f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fac:	d301      	bcc.n	8008fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e00f      	b.n	8008fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008fb2:	4a0a      	ldr	r2, [pc, #40]	; (8008fdc <SysTick_Config+0x40>)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008fba:	210f      	movs	r1, #15
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	f7ff ff8e 	bl	8008ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008fc4:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <SysTick_Config+0x40>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008fca:	4b04      	ldr	r3, [pc, #16]	; (8008fdc <SysTick_Config+0x40>)
 8008fcc:	2207      	movs	r2, #7
 8008fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	e000e010 	.word	0xe000e010

08008fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff ff29 	bl	8008e40 <__NVIC_SetPriorityGrouping>
}
 8008fee:	bf00      	nop
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b086      	sub	sp, #24
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	60b9      	str	r1, [r7, #8]
 8009000:	607a      	str	r2, [r7, #4]
 8009002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8009004:	2300      	movs	r3, #0
 8009006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009008:	f7ff ff3e 	bl	8008e88 <__NVIC_GetPriorityGrouping>
 800900c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	68b9      	ldr	r1, [r7, #8]
 8009012:	6978      	ldr	r0, [r7, #20]
 8009014:	f7ff ff8e 	bl	8008f34 <NVIC_EncodePriority>
 8009018:	4602      	mov	r2, r0
 800901a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800901e:	4611      	mov	r1, r2
 8009020:	4618      	mov	r0, r3
 8009022:	f7ff ff5d 	bl	8008ee0 <__NVIC_SetPriority>
}
 8009026:	bf00      	nop
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	4603      	mov	r3, r0
 8009036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff ff31 	bl	8008ea4 <__NVIC_EnableIRQ>
}
 8009042:	bf00      	nop
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7ff ffa2 	bl	8008f9c <SysTick_Config>
 8009058:	4603      	mov	r3, r0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	61fb      	str	r3, [r7, #28]
 8009070:	2300      	movs	r3, #0
 8009072:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8009074:	4ba9      	ldr	r3, [pc, #676]	; (800931c <HAL_ETH_Init+0x2b8>)
 8009076:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800907c:	2300      	movs	r3, #0
 800907e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e183      	b.n	8009392 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d106      	bne.n	80090a4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff fc7c 	bl	800899c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090a4:	4b9e      	ldr	r3, [pc, #632]	; (8009320 <HAL_ETH_Init+0x2bc>)
 80090a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a8:	4a9d      	ldr	r2, [pc, #628]	; (8009320 <HAL_ETH_Init+0x2bc>)
 80090aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090ae:	6453      	str	r3, [r2, #68]	; 0x44
 80090b0:	4b9b      	ldr	r3, [pc, #620]	; (8009320 <HAL_ETH_Init+0x2bc>)
 80090b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090b8:	60bb      	str	r3, [r7, #8]
 80090ba:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80090bc:	4b99      	ldr	r3, [pc, #612]	; (8009324 <HAL_ETH_Init+0x2c0>)
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	4a98      	ldr	r2, [pc, #608]	; (8009324 <HAL_ETH_Init+0x2c0>)
 80090c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80090c6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80090c8:	4b96      	ldr	r3, [pc, #600]	; (8009324 <HAL_ETH_Init+0x2c0>)
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	4994      	ldr	r1, [pc, #592]	; (8009324 <HAL_ETH_Init+0x2c0>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f042 0201 	orr.w	r2, r2, #1
 80090e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ec:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80090ee:	f7ff fe79 	bl	8008de4 <HAL_GetTick>
 80090f2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80090f4:	e011      	b.n	800911a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80090f6:	f7ff fe75 	bl	8008de4 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009104:	d909      	bls.n	800911a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2203      	movs	r2, #3
 800910a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e13b      	b.n	8009392 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e4      	bne.n	80090f6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	f023 031c 	bic.w	r3, r3, #28
 800913a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800913c:	f001 fc1a 	bl	800a974 <HAL_RCC_GetHCLKFreq>
 8009140:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	4a78      	ldr	r2, [pc, #480]	; (8009328 <HAL_ETH_Init+0x2c4>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d908      	bls.n	800915c <HAL_ETH_Init+0xf8>
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	4a77      	ldr	r2, [pc, #476]	; (800932c <HAL_ETH_Init+0x2c8>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d804      	bhi.n	800915c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	f043 0308 	orr.w	r3, r3, #8
 8009158:	61fb      	str	r3, [r7, #28]
 800915a:	e027      	b.n	80091ac <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	4a73      	ldr	r2, [pc, #460]	; (800932c <HAL_ETH_Init+0x2c8>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d908      	bls.n	8009176 <HAL_ETH_Init+0x112>
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	4a72      	ldr	r2, [pc, #456]	; (8009330 <HAL_ETH_Init+0x2cc>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d804      	bhi.n	8009176 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	f043 030c 	orr.w	r3, r3, #12
 8009172:	61fb      	str	r3, [r7, #28]
 8009174:	e01a      	b.n	80091ac <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	4a6d      	ldr	r2, [pc, #436]	; (8009330 <HAL_ETH_Init+0x2cc>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d903      	bls.n	8009186 <HAL_ETH_Init+0x122>
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	4a6c      	ldr	r2, [pc, #432]	; (8009334 <HAL_ETH_Init+0x2d0>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d911      	bls.n	80091aa <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	4a6a      	ldr	r2, [pc, #424]	; (8009334 <HAL_ETH_Init+0x2d0>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d908      	bls.n	80091a0 <HAL_ETH_Init+0x13c>
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	4a69      	ldr	r2, [pc, #420]	; (8009338 <HAL_ETH_Init+0x2d4>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d804      	bhi.n	80091a0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	f043 0304 	orr.w	r3, r3, #4
 800919c:	61fb      	str	r3, [r7, #28]
 800919e:	e005      	b.n	80091ac <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	f043 0310 	orr.w	r3, r3, #16
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	e000      	b.n	80091ac <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80091aa:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69fa      	ldr	r2, [r7, #28]
 80091b2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80091b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80091b8:	2100      	movs	r1, #0
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f956 	bl	800946c <HAL_ETH_WritePHYRegister>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00b      	beq.n	80091de <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80091ca:	6939      	ldr	r1, [r7, #16]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f9b3 	bl	8009538 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e0d9      	b.n	8009392 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80091de:	20ff      	movs	r0, #255	; 0xff
 80091e0:	f7ff fe0c 	bl	8008dfc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 80a7 	beq.w	800933c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80091ee:	f7ff fdf9 	bl	8008de4 <HAL_GetTick>
 80091f2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80091f4:	f107 030c 	add.w	r3, r7, #12
 80091f8:	461a      	mov	r2, r3
 80091fa:	2101      	movs	r1, #1
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f8cd 	bl	800939c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8009202:	f7ff fdef 	bl	8008de4 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009210:	4293      	cmp	r3, r2
 8009212:	d90f      	bls.n	8009234 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8009218:	6939      	ldr	r1, [r7, #16]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f98c 	bl	8009538 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e0ae      	b.n	8009392 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f003 0304 	and.w	r3, r3, #4
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0da      	beq.n	80091f4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800923e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009242:	2100      	movs	r1, #0
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f911 	bl	800946c <HAL_ETH_WritePHYRegister>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00b      	beq.n	8009268 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8009254:	6939      	ldr	r1, [r7, #16]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f96e 	bl	8009538 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8009264:	2301      	movs	r3, #1
 8009266:	e094      	b.n	8009392 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8009268:	f7ff fdbc 	bl	8008de4 <HAL_GetTick>
 800926c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800926e:	f107 030c 	add.w	r3, r7, #12
 8009272:	461a      	mov	r2, r3
 8009274:	2101      	movs	r1, #1
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f890 	bl	800939c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800927c:	f7ff fdb2 	bl	8008de4 <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	f241 3288 	movw	r2, #5000	; 0x1388
 800928a:	4293      	cmp	r3, r2
 800928c:	d90f      	bls.n	80092ae <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8009292:	6939      	ldr	r1, [r7, #16]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f94f 	bl	8009538 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e071      	b.n	8009392 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f003 0320 	and.w	r3, r3, #32
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d0da      	beq.n	800926e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80092b8:	f107 030c 	add.w	r3, r7, #12
 80092bc:	461a      	mov	r2, r3
 80092be:	211f      	movs	r1, #31
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f86b 	bl	800939c <HAL_ETH_ReadPHYRegister>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80092d0:	6939      	ldr	r1, [r7, #16]
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f930 	bl	8009538 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80092e0:	2301      	movs	r3, #1
 80092e2:	e056      	b.n	8009392 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f003 0310 	and.w	r3, r3, #16
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d004      	beq.n	80092f8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092f4:	60da      	str	r2, [r3, #12]
 80092f6:	e002      	b.n	80092fe <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d003      	beq.n	8009310 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	609a      	str	r2, [r3, #8]
 800930e:	e037      	b.n	8009380 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009316:	609a      	str	r2, [r3, #8]
 8009318:	e032      	b.n	8009380 <HAL_ETH_Init+0x31c>
 800931a:	bf00      	nop
 800931c:	03938700 	.word	0x03938700
 8009320:	40023800 	.word	0x40023800
 8009324:	40013800 	.word	0x40013800
 8009328:	01312cff 	.word	0x01312cff
 800932c:	02160ebf 	.word	0x02160ebf
 8009330:	039386ff 	.word	0x039386ff
 8009334:	05f5e0ff 	.word	0x05f5e0ff
 8009338:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	08db      	lsrs	r3, r3, #3
 8009342:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	085b      	lsrs	r3, r3, #1
 800934a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800934c:	4313      	orrs	r3, r2
 800934e:	b29b      	uxth	r3, r3
 8009350:	461a      	mov	r2, r3
 8009352:	2100      	movs	r1, #0
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f889 	bl	800946c <HAL_ETH_WritePHYRegister>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00b      	beq.n	8009378 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8009364:	6939      	ldr	r1, [r7, #16]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f8e6 	bl	8009538 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e00c      	b.n	8009392 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8009378:	f640 70ff 	movw	r0, #4095	; 0xfff
 800937c:	f7ff fd3e 	bl	8008dfc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8009380:	6939      	ldr	r1, [r7, #16]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f8d8 	bl	8009538 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3720      	adds	r7, #32
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop

0800939c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	460b      	mov	r3, r1
 80093a6:	607a      	str	r2, [r7, #4]
 80093a8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80093aa:	2300      	movs	r3, #0
 80093ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b82      	cmp	r3, #130	; 0x82
 80093bc:	d101      	bne.n	80093c2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80093be:	2302      	movs	r3, #2
 80093c0:	e050      	b.n	8009464 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2282      	movs	r2, #130	; 0x82
 80093c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f003 031c 	and.w	r3, r3, #28
 80093d8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	8a1b      	ldrh	r3, [r3, #16]
 80093de:	02db      	lsls	r3, r3, #11
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80093e8:	897b      	ldrh	r3, [r7, #10]
 80093ea:	019b      	lsls	r3, r3, #6
 80093ec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f023 0302 	bic.w	r3, r3, #2
 80093fc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f043 0301 	orr.w	r3, r3, #1
 8009404:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800940e:	f7ff fce9 	bl	8008de4 <HAL_GetTick>
 8009412:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009414:	e015      	b.n	8009442 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8009416:	f7ff fce5 	bl	8008de4 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009424:	d309      	bcc.n	800943a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e014      	b.n	8009464 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e4      	bne.n	8009416 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	b29b      	uxth	r3, r3
 8009454:	461a      	mov	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	460b      	mov	r3, r1
 8009476:	607a      	str	r2, [r7, #4]
 8009478:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800947a:	2300      	movs	r3, #0
 800947c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b42      	cmp	r3, #66	; 0x42
 800948c:	d101      	bne.n	8009492 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800948e:	2302      	movs	r3, #2
 8009490:	e04e      	b.n	8009530 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2242      	movs	r2, #66	; 0x42
 8009496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	f003 031c 	and.w	r3, r3, #28
 80094a8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	8a1b      	ldrh	r3, [r3, #16]
 80094ae:	02db      	lsls	r3, r3, #11
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80094b8:	897b      	ldrh	r3, [r7, #10]
 80094ba:	019b      	lsls	r3, r3, #6
 80094bc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f043 0302 	orr.w	r3, r3, #2
 80094cc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f043 0301 	orr.w	r3, r3, #1
 80094d4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	b29a      	uxth	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	697a      	ldr	r2, [r7, #20]
 80094e6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80094e8:	f7ff fc7c 	bl	8008de4 <HAL_GetTick>
 80094ec:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80094ee:	e015      	b.n	800951c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80094f0:	f7ff fc78 	bl	8008de4 <HAL_GetTick>
 80094f4:	4602      	mov	r2, r0
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094fe:	d309      	bcc.n	8009514 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e00d      	b.n	8009530 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1e4      	bne.n	80094f0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3718      	adds	r7, #24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b0b0      	sub	sp, #192	; 0xc0
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009554:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800955c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800955e:	2300      	movs	r3, #0
 8009560:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8009562:	2300      	movs	r3, #0
 8009564:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8009566:	2300      	movs	r3, #0
 8009568:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800956a:	2300      	movs	r3, #0
 800956c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800956e:	2300      	movs	r3, #0
 8009570:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8009572:	2300      	movs	r3, #0
 8009574:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d103      	bne.n	8009586 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800957e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009582:	663b      	str	r3, [r7, #96]	; 0x60
 8009584:	e001      	b.n	800958a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8009586:	2300      	movs	r3, #0
 8009588:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800958a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800958e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8009590:	2300      	movs	r3, #0
 8009592:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009594:	2300      	movs	r3, #0
 8009596:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8009598:	2300      	movs	r3, #0
 800959a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800959c:	2300      	movs	r3, #0
 800959e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80095a0:	2300      	movs	r3, #0
 80095a2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80095a4:	2340      	movs	r3, #64	; 0x40
 80095a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80095a8:	2300      	movs	r3, #0
 80095aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80095b4:	2300      	movs	r3, #0
 80095b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80095ba:	2300      	movs	r3, #0
 80095bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80095c0:	2300      	movs	r3, #0
 80095c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80095c6:	2300      	movs	r3, #0
 80095c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80095cc:	2300      	movs	r3, #0
 80095ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80095d2:	2300      	movs	r3, #0
 80095d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80095d8:	2380      	movs	r3, #128	; 0x80
 80095da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80095de:	2300      	movs	r3, #0
 80095e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80095f0:	2300      	movs	r3, #0
 80095f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80095f6:	2300      	movs	r3, #0
 80095f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80095fc:	2300      	movs	r3, #0
 80095fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800960c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009610:	4bab      	ldr	r3, [pc, #684]	; (80098c0 <ETH_MACDMAConfig+0x388>)
 8009612:	4013      	ands	r3, r2
 8009614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8009618:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800961a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800961c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800961e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8009620:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8009622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8009624:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800962a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800962c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800962e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8009630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8009632:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8009638:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800963a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800963c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800963e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8009640:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8009642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8009644:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8009646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8009648:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800964a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800964c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800964e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009652:	4313      	orrs	r3, r2
 8009654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009660:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800966c:	2001      	movs	r0, #1
 800966e:	f7ff fbc5 	bl	8008dfc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800967a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800967c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800967e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009680:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8009682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8009684:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8009686:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800968a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800968c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8009690:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8009692:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8009696:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8009698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800969c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80096a0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80096a8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80096aa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80096b6:	2001      	movs	r0, #1
 80096b8:	f7ff fba0 	bl	8008dfc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80096c4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096ce:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80096d8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80096e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80096e8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80096ec:	4013      	ands	r3, r2
 80096ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80096f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096f6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80096f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80096fc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80096fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8009702:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8009704:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8009708:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800970a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800970e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8009710:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8009714:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009716:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800971a:	4313      	orrs	r3, r2
 800971c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009728:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009734:	2001      	movs	r0, #1
 8009736:	f7ff fb61 	bl	8008dfc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009742:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009744:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8009748:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800975e:	2001      	movs	r0, #1
 8009760:	f7ff fb4c 	bl	8008dfc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800976c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800976e:	2300      	movs	r3, #0
 8009770:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8009772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009776:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8009778:	2300      	movs	r3, #0
 800977a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800977c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009780:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8009782:	2300      	movs	r3, #0
 8009784:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8009786:	2300      	movs	r3, #0
 8009788:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800978a:	2300      	movs	r3, #0
 800978c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800978e:	2300      	movs	r3, #0
 8009790:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8009792:	2304      	movs	r3, #4
 8009794:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8009796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800979a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800979c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80097a0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80097a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80097a6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80097a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097ac:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80097ae:	2380      	movs	r3, #128	; 0x80
 80097b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80097b6:	2300      	movs	r3, #0
 80097b8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	f241 0318 	movw	r3, #4120	; 0x1018
 80097c2:	4413      	add	r3, r2
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80097ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80097ce:	4b3d      	ldr	r3, [pc, #244]	; (80098c4 <ETH_MACDMAConfig+0x38c>)
 80097d0:	4013      	ands	r3, r2
 80097d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80097d6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80097d8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80097da:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80097dc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80097de:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80097e0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80097e2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80097e4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80097e6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80097e8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80097ea:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80097ec:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80097ee:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80097f2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80097f6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80097f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80097fc:	4313      	orrs	r3, r2
 80097fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	f241 0318 	movw	r3, #4120	; 0x1018
 800980a:	4413      	add	r3, r2
 800980c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009810:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	f241 0318 	movw	r3, #4120	; 0x1018
 800981a:	4413      	add	r3, r2
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009822:	2001      	movs	r0, #1
 8009824:	f7ff faea 	bl	8008dfc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	f241 0318 	movw	r3, #4120	; 0x1018
 8009830:	4413      	add	r3, r2
 8009832:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009836:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800983c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800983e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8009840:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8009842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8009844:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8009846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8009848:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800984a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800984c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800984e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8009850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8009852:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800985c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009860:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009870:	2001      	movs	r0, #1
 8009872:	f7ff fac3 	bl	8008dfc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800987e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009882:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d10d      	bne.n	80098a8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	f241 031c 	movw	r3, #4124	; 0x101c
 8009894:	4413      	add	r3, r2
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	6811      	ldr	r1, [r2, #0]
 800989c:	4a0a      	ldr	r2, [pc, #40]	; (80098c8 <ETH_MACDMAConfig+0x390>)
 800989e:	431a      	orrs	r2, r3
 80098a0:	f241 031c 	movw	r3, #4124	; 0x101c
 80098a4:	440b      	add	r3, r1
 80098a6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	461a      	mov	r2, r3
 80098ae:	2100      	movs	r1, #0
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f80b 	bl	80098cc <ETH_MACAddressConfig>
}
 80098b6:	bf00      	nop
 80098b8:	37c0      	adds	r7, #192	; 0xc0
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	ff20810f 	.word	0xff20810f
 80098c4:	f8de3f23 	.word	0xf8de3f23
 80098c8:	00010040 	.word	0x00010040

080098cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3305      	adds	r3, #5
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	021b      	lsls	r3, r3, #8
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	3204      	adds	r2, #4
 80098e4:	7812      	ldrb	r2, [r2, #0]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	4b11      	ldr	r3, [pc, #68]	; (8009934 <ETH_MACAddressConfig+0x68>)
 80098ee:	4413      	add	r3, r2
 80098f0:	461a      	mov	r2, r3
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	3303      	adds	r3, #3
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	061a      	lsls	r2, r3, #24
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	3302      	adds	r3, #2
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	041b      	lsls	r3, r3, #16
 8009906:	431a      	orrs	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3301      	adds	r3, #1
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	021b      	lsls	r3, r3, #8
 8009910:	4313      	orrs	r3, r2
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	7812      	ldrb	r2, [r2, #0]
 8009916:	4313      	orrs	r3, r2
 8009918:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	4b06      	ldr	r3, [pc, #24]	; (8009938 <ETH_MACAddressConfig+0x6c>)
 800991e:	4413      	add	r3, r2
 8009920:	461a      	mov	r2, r3
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	6013      	str	r3, [r2, #0]
}
 8009926:	bf00      	nop
 8009928:	371c      	adds	r7, #28
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	40028040 	.word	0x40028040
 8009938:	40028044 	.word	0x40028044

0800993c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800993c:	b480      	push	{r7}
 800993e:	b089      	sub	sp, #36	; 0x24
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8009946:	2300      	movs	r3, #0
 8009948:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800994a:	2300      	movs	r3, #0
 800994c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800994e:	2300      	movs	r3, #0
 8009950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8009952:	2300      	movs	r3, #0
 8009954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009956:	2300      	movs	r3, #0
 8009958:	61fb      	str	r3, [r7, #28]
 800995a:	e175      	b.n	8009c48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800995c:	2201      	movs	r2, #1
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	fa02 f303 	lsl.w	r3, r2, r3
 8009964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	4013      	ands	r3, r2
 800996e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	429a      	cmp	r2, r3
 8009976:	f040 8164 	bne.w	8009c42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d00b      	beq.n	800999a <HAL_GPIO_Init+0x5e>
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d007      	beq.n	800999a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800998e:	2b11      	cmp	r3, #17
 8009990:	d003      	beq.n	800999a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	2b12      	cmp	r3, #18
 8009998:	d130      	bne.n	80099fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	005b      	lsls	r3, r3, #1
 80099a4:	2203      	movs	r2, #3
 80099a6:	fa02 f303 	lsl.w	r3, r2, r3
 80099aa:	43db      	mvns	r3, r3
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	4013      	ands	r3, r2
 80099b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	68da      	ldr	r2, [r3, #12]
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	fa02 f303 	lsl.w	r3, r2, r3
 80099be:	69ba      	ldr	r2, [r7, #24]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80099d0:	2201      	movs	r2, #1
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	fa02 f303 	lsl.w	r3, r2, r3
 80099d8:	43db      	mvns	r3, r3
 80099da:	69ba      	ldr	r2, [r7, #24]
 80099dc:	4013      	ands	r3, r2
 80099de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	091b      	lsrs	r3, r3, #4
 80099e6:	f003 0201 	and.w	r2, r3, #1
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	fa02 f303 	lsl.w	r3, r2, r3
 80099f0:	69ba      	ldr	r2, [r7, #24]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	69ba      	ldr	r2, [r7, #24]
 80099fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	005b      	lsls	r3, r3, #1
 8009a06:	2203      	movs	r2, #3
 8009a08:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0c:	43db      	mvns	r3, r3
 8009a0e:	69ba      	ldr	r2, [r7, #24]
 8009a10:	4013      	ands	r3, r2
 8009a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	689a      	ldr	r2, [r3, #8]
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	005b      	lsls	r3, r3, #1
 8009a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a20:	69ba      	ldr	r2, [r7, #24]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d003      	beq.n	8009a3c <HAL_GPIO_Init+0x100>
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	2b12      	cmp	r3, #18
 8009a3a:	d123      	bne.n	8009a84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	08da      	lsrs	r2, r3, #3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	3208      	adds	r2, #8
 8009a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	f003 0307 	and.w	r3, r3, #7
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	220f      	movs	r2, #15
 8009a54:	fa02 f303 	lsl.w	r3, r2, r3
 8009a58:	43db      	mvns	r3, r3
 8009a5a:	69ba      	ldr	r2, [r7, #24]
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	691a      	ldr	r2, [r3, #16]
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	f003 0307 	and.w	r3, r3, #7
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a70:	69ba      	ldr	r2, [r7, #24]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	08da      	lsrs	r2, r3, #3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	3208      	adds	r2, #8
 8009a7e:	69b9      	ldr	r1, [r7, #24]
 8009a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	005b      	lsls	r3, r3, #1
 8009a8e:	2203      	movs	r2, #3
 8009a90:	fa02 f303 	lsl.w	r3, r2, r3
 8009a94:	43db      	mvns	r3, r3
 8009a96:	69ba      	ldr	r2, [r7, #24]
 8009a98:	4013      	ands	r3, r2
 8009a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	f003 0203 	and.w	r2, r3, #3
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	005b      	lsls	r3, r3, #1
 8009aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aac:	69ba      	ldr	r2, [r7, #24]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	69ba      	ldr	r2, [r7, #24]
 8009ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 80be 	beq.w	8009c42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ac6:	4b65      	ldr	r3, [pc, #404]	; (8009c5c <HAL_GPIO_Init+0x320>)
 8009ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aca:	4a64      	ldr	r2, [pc, #400]	; (8009c5c <HAL_GPIO_Init+0x320>)
 8009acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8009ad2:	4b62      	ldr	r3, [pc, #392]	; (8009c5c <HAL_GPIO_Init+0x320>)
 8009ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009ade:	4a60      	ldr	r2, [pc, #384]	; (8009c60 <HAL_GPIO_Init+0x324>)
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	089b      	lsrs	r3, r3, #2
 8009ae4:	3302      	adds	r3, #2
 8009ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	f003 0303 	and.w	r3, r3, #3
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	220f      	movs	r2, #15
 8009af6:	fa02 f303 	lsl.w	r3, r2, r3
 8009afa:	43db      	mvns	r3, r3
 8009afc:	69ba      	ldr	r2, [r7, #24]
 8009afe:	4013      	ands	r3, r2
 8009b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a57      	ldr	r2, [pc, #348]	; (8009c64 <HAL_GPIO_Init+0x328>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d037      	beq.n	8009b7a <HAL_GPIO_Init+0x23e>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a56      	ldr	r2, [pc, #344]	; (8009c68 <HAL_GPIO_Init+0x32c>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d031      	beq.n	8009b76 <HAL_GPIO_Init+0x23a>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a55      	ldr	r2, [pc, #340]	; (8009c6c <HAL_GPIO_Init+0x330>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d02b      	beq.n	8009b72 <HAL_GPIO_Init+0x236>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a54      	ldr	r2, [pc, #336]	; (8009c70 <HAL_GPIO_Init+0x334>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d025      	beq.n	8009b6e <HAL_GPIO_Init+0x232>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a53      	ldr	r2, [pc, #332]	; (8009c74 <HAL_GPIO_Init+0x338>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d01f      	beq.n	8009b6a <HAL_GPIO_Init+0x22e>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a52      	ldr	r2, [pc, #328]	; (8009c78 <HAL_GPIO_Init+0x33c>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d019      	beq.n	8009b66 <HAL_GPIO_Init+0x22a>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	4a51      	ldr	r2, [pc, #324]	; (8009c7c <HAL_GPIO_Init+0x340>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d013      	beq.n	8009b62 <HAL_GPIO_Init+0x226>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a50      	ldr	r2, [pc, #320]	; (8009c80 <HAL_GPIO_Init+0x344>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d00d      	beq.n	8009b5e <HAL_GPIO_Init+0x222>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a4f      	ldr	r2, [pc, #316]	; (8009c84 <HAL_GPIO_Init+0x348>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d007      	beq.n	8009b5a <HAL_GPIO_Init+0x21e>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a4e      	ldr	r2, [pc, #312]	; (8009c88 <HAL_GPIO_Init+0x34c>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d101      	bne.n	8009b56 <HAL_GPIO_Init+0x21a>
 8009b52:	2309      	movs	r3, #9
 8009b54:	e012      	b.n	8009b7c <HAL_GPIO_Init+0x240>
 8009b56:	230a      	movs	r3, #10
 8009b58:	e010      	b.n	8009b7c <HAL_GPIO_Init+0x240>
 8009b5a:	2308      	movs	r3, #8
 8009b5c:	e00e      	b.n	8009b7c <HAL_GPIO_Init+0x240>
 8009b5e:	2307      	movs	r3, #7
 8009b60:	e00c      	b.n	8009b7c <HAL_GPIO_Init+0x240>
 8009b62:	2306      	movs	r3, #6
 8009b64:	e00a      	b.n	8009b7c <HAL_GPIO_Init+0x240>
 8009b66:	2305      	movs	r3, #5
 8009b68:	e008      	b.n	8009b7c <HAL_GPIO_Init+0x240>
 8009b6a:	2304      	movs	r3, #4
 8009b6c:	e006      	b.n	8009b7c <HAL_GPIO_Init+0x240>
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e004      	b.n	8009b7c <HAL_GPIO_Init+0x240>
 8009b72:	2302      	movs	r3, #2
 8009b74:	e002      	b.n	8009b7c <HAL_GPIO_Init+0x240>
 8009b76:	2301      	movs	r3, #1
 8009b78:	e000      	b.n	8009b7c <HAL_GPIO_Init+0x240>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	f002 0203 	and.w	r2, r2, #3
 8009b82:	0092      	lsls	r2, r2, #2
 8009b84:	4093      	lsls	r3, r2
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009b8c:	4934      	ldr	r1, [pc, #208]	; (8009c60 <HAL_GPIO_Init+0x324>)
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	089b      	lsrs	r3, r3, #2
 8009b92:	3302      	adds	r3, #2
 8009b94:	69ba      	ldr	r2, [r7, #24]
 8009b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009b9a:	4b3c      	ldr	r3, [pc, #240]	; (8009c8c <HAL_GPIO_Init+0x350>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	43db      	mvns	r3, r3
 8009ba4:	69ba      	ldr	r2, [r7, #24]
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009bbe:	4a33      	ldr	r2, [pc, #204]	; (8009c8c <HAL_GPIO_Init+0x350>)
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009bc4:	4b31      	ldr	r3, [pc, #196]	; (8009c8c <HAL_GPIO_Init+0x350>)
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	43db      	mvns	r3, r3
 8009bce:	69ba      	ldr	r2, [r7, #24]
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d003      	beq.n	8009be8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009be0:	69ba      	ldr	r2, [r7, #24]
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009be8:	4a28      	ldr	r2, [pc, #160]	; (8009c8c <HAL_GPIO_Init+0x350>)
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009bee:	4b27      	ldr	r3, [pc, #156]	; (8009c8c <HAL_GPIO_Init+0x350>)
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	43db      	mvns	r3, r3
 8009bf8:	69ba      	ldr	r2, [r7, #24]
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009c0a:	69ba      	ldr	r2, [r7, #24]
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009c12:	4a1e      	ldr	r2, [pc, #120]	; (8009c8c <HAL_GPIO_Init+0x350>)
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009c18:	4b1c      	ldr	r3, [pc, #112]	; (8009c8c <HAL_GPIO_Init+0x350>)
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	43db      	mvns	r3, r3
 8009c22:	69ba      	ldr	r2, [r7, #24]
 8009c24:	4013      	ands	r3, r2
 8009c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d003      	beq.n	8009c3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009c34:	69ba      	ldr	r2, [r7, #24]
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009c3c:	4a13      	ldr	r2, [pc, #76]	; (8009c8c <HAL_GPIO_Init+0x350>)
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	3301      	adds	r3, #1
 8009c46:	61fb      	str	r3, [r7, #28]
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	2b0f      	cmp	r3, #15
 8009c4c:	f67f ae86 	bls.w	800995c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009c50:	bf00      	nop
 8009c52:	3724      	adds	r7, #36	; 0x24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	40023800 	.word	0x40023800
 8009c60:	40013800 	.word	0x40013800
 8009c64:	40020000 	.word	0x40020000
 8009c68:	40020400 	.word	0x40020400
 8009c6c:	40020800 	.word	0x40020800
 8009c70:	40020c00 	.word	0x40020c00
 8009c74:	40021000 	.word	0x40021000
 8009c78:	40021400 	.word	0x40021400
 8009c7c:	40021800 	.word	0x40021800
 8009c80:	40021c00 	.word	0x40021c00
 8009c84:	40022000 	.word	0x40022000
 8009c88:	40022400 	.word	0x40022400
 8009c8c:	40013c00 	.word	0x40013c00

08009c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	807b      	strh	r3, [r7, #2]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009ca0:	787b      	ldrb	r3, [r7, #1]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d003      	beq.n	8009cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009ca6:	887a      	ldrh	r2, [r7, #2]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009cac:	e003      	b.n	8009cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009cae:	887b      	ldrh	r3, [r7, #2]
 8009cb0:	041a      	lsls	r2, r3, #16
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	619a      	str	r2, [r3, #24]
}
 8009cb6:	bf00      	nop
 8009cb8:	370c      	adds	r7, #12
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b083      	sub	sp, #12
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	460b      	mov	r3, r1
 8009ccc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	695a      	ldr	r2, [r3, #20]
 8009cd2:	887b      	ldrh	r3, [r7, #2]
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d004      	beq.n	8009ce4 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009cda:	887b      	ldrh	r3, [r7, #2]
 8009cdc:	041a      	lsls	r2, r3, #16
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8009ce2:	e002      	b.n	8009cea <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009ce4:	887a      	ldrh	r2, [r7, #2]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	619a      	str	r2, [r3, #24]
}
 8009cea:	bf00      	nop
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
	...

08009cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	4603      	mov	r3, r0
 8009d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009d02:	4b08      	ldr	r3, [pc, #32]	; (8009d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009d04:	695a      	ldr	r2, [r3, #20]
 8009d06:	88fb      	ldrh	r3, [r7, #6]
 8009d08:	4013      	ands	r3, r2
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d006      	beq.n	8009d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009d0e:	4a05      	ldr	r2, [pc, #20]	; (8009d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009d10:	88fb      	ldrh	r3, [r7, #6]
 8009d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009d14:	88fb      	ldrh	r3, [r7, #6]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 f806 	bl	8009d28 <HAL_GPIO_EXTI_Callback>
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	40013c00 	.word	0x40013c00

08009d28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009d32:	bf00      	nop
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d40:	b08f      	sub	sp, #60	; 0x3c
 8009d42:	af0a      	add	r7, sp, #40	; 0x28
 8009d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d101      	bne.n	8009d50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e116      	b.n	8009f7e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d106      	bne.n	8009d70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7fe ff12 	bl	8008b94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2203      	movs	r2, #3
 8009d74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d102      	bne.n	8009d8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f001 ff8e 	bl	800bcb0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	603b      	str	r3, [r7, #0]
 8009d9a:	687e      	ldr	r6, [r7, #4]
 8009d9c:	466d      	mov	r5, sp
 8009d9e:	f106 0410 	add.w	r4, r6, #16
 8009da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009daa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009dae:	e885 0003 	stmia.w	r5, {r0, r1}
 8009db2:	1d33      	adds	r3, r6, #4
 8009db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009db6:	6838      	ldr	r0, [r7, #0]
 8009db8:	f001 ff22 	bl	800bc00 <USB_CoreInit>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d005      	beq.n	8009dce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2202      	movs	r2, #2
 8009dc6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e0d7      	b.n	8009f7e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 ff7c 	bl	800bcd2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73fb      	strb	r3, [r7, #15]
 8009dde:	e04a      	b.n	8009e76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009de0:	7bfa      	ldrb	r2, [r7, #15]
 8009de2:	6879      	ldr	r1, [r7, #4]
 8009de4:	4613      	mov	r3, r2
 8009de6:	00db      	lsls	r3, r3, #3
 8009de8:	1a9b      	subs	r3, r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	440b      	add	r3, r1
 8009dee:	333d      	adds	r3, #61	; 0x3d
 8009df0:	2201      	movs	r2, #1
 8009df2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009df4:	7bfa      	ldrb	r2, [r7, #15]
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	440b      	add	r3, r1
 8009e02:	333c      	adds	r3, #60	; 0x3c
 8009e04:	7bfa      	ldrb	r2, [r7, #15]
 8009e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009e08:	7bfa      	ldrb	r2, [r7, #15]
 8009e0a:	7bfb      	ldrb	r3, [r7, #15]
 8009e0c:	b298      	uxth	r0, r3
 8009e0e:	6879      	ldr	r1, [r7, #4]
 8009e10:	4613      	mov	r3, r2
 8009e12:	00db      	lsls	r3, r3, #3
 8009e14:	1a9b      	subs	r3, r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	440b      	add	r3, r1
 8009e1a:	3342      	adds	r3, #66	; 0x42
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009e20:	7bfa      	ldrb	r2, [r7, #15]
 8009e22:	6879      	ldr	r1, [r7, #4]
 8009e24:	4613      	mov	r3, r2
 8009e26:	00db      	lsls	r3, r3, #3
 8009e28:	1a9b      	subs	r3, r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	440b      	add	r3, r1
 8009e2e:	333f      	adds	r3, #63	; 0x3f
 8009e30:	2200      	movs	r2, #0
 8009e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009e34:	7bfa      	ldrb	r2, [r7, #15]
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	1a9b      	subs	r3, r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	440b      	add	r3, r1
 8009e42:	3344      	adds	r3, #68	; 0x44
 8009e44:	2200      	movs	r2, #0
 8009e46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009e48:	7bfa      	ldrb	r2, [r7, #15]
 8009e4a:	6879      	ldr	r1, [r7, #4]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	00db      	lsls	r3, r3, #3
 8009e50:	1a9b      	subs	r3, r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	440b      	add	r3, r1
 8009e56:	3348      	adds	r3, #72	; 0x48
 8009e58:	2200      	movs	r2, #0
 8009e5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009e5c:	7bfa      	ldrb	r2, [r7, #15]
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	4613      	mov	r3, r2
 8009e62:	00db      	lsls	r3, r3, #3
 8009e64:	1a9b      	subs	r3, r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	440b      	add	r3, r1
 8009e6a:	3350      	adds	r3, #80	; 0x50
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
 8009e72:	3301      	adds	r3, #1
 8009e74:	73fb      	strb	r3, [r7, #15]
 8009e76:	7bfa      	ldrb	r2, [r7, #15]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d3af      	bcc.n	8009de0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e80:	2300      	movs	r3, #0
 8009e82:	73fb      	strb	r3, [r7, #15]
 8009e84:	e044      	b.n	8009f10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009e86:	7bfa      	ldrb	r2, [r7, #15]
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	00db      	lsls	r3, r3, #3
 8009e8e:	1a9b      	subs	r3, r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	440b      	add	r3, r1
 8009e94:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009e98:	2200      	movs	r2, #0
 8009e9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009e9c:	7bfa      	ldrb	r2, [r7, #15]
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	00db      	lsls	r3, r3, #3
 8009ea4:	1a9b      	subs	r3, r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	440b      	add	r3, r1
 8009eaa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009eae:	7bfa      	ldrb	r2, [r7, #15]
 8009eb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009eb2:	7bfa      	ldrb	r2, [r7, #15]
 8009eb4:	6879      	ldr	r1, [r7, #4]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	00db      	lsls	r3, r3, #3
 8009eba:	1a9b      	subs	r3, r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	440b      	add	r3, r1
 8009ec0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009ec8:	7bfa      	ldrb	r2, [r7, #15]
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009ede:	7bfa      	ldrb	r2, [r7, #15]
 8009ee0:	6879      	ldr	r1, [r7, #4]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	00db      	lsls	r3, r3, #3
 8009ee6:	1a9b      	subs	r3, r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	440b      	add	r3, r1
 8009eec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009ef4:	7bfa      	ldrb	r2, [r7, #15]
 8009ef6:	6879      	ldr	r1, [r7, #4]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	00db      	lsls	r3, r3, #3
 8009efc:	1a9b      	subs	r3, r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	440b      	add	r3, r1
 8009f02:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009f06:	2200      	movs	r2, #0
 8009f08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	73fb      	strb	r3, [r7, #15]
 8009f10:	7bfa      	ldrb	r2, [r7, #15]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d3b5      	bcc.n	8009e86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	603b      	str	r3, [r7, #0]
 8009f20:	687e      	ldr	r6, [r7, #4]
 8009f22:	466d      	mov	r5, sp
 8009f24:	f106 0410 	add.w	r4, r6, #16
 8009f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009f30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009f34:	e885 0003 	stmia.w	r5, {r0, r1}
 8009f38:	1d33      	adds	r3, r6, #4
 8009f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f3c:	6838      	ldr	r0, [r7, #0]
 8009f3e:	f001 fef3 	bl	800bd28 <USB_DevInit>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d005      	beq.n	8009f54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e014      	b.n	8009f7e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d102      	bne.n	8009f72 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f80b 	bl	8009f88 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f002 f8a5 	bl	800c0c6 <USB_DevDisconnect>

  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009f88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fb6:	4b05      	ldr	r3, [pc, #20]	; (8009fcc <HAL_PCDEx_ActivateLPM+0x44>)
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	10000003 	.word	0x10000003

08009fd0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009fd4:	4b05      	ldr	r3, [pc, #20]	; (8009fec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a04      	ldr	r2, [pc, #16]	; (8009fec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fde:	6013      	str	r3, [r2, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	40007000 	.word	0x40007000

08009ff0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009ffa:	4b23      	ldr	r3, [pc, #140]	; (800a088 <HAL_PWREx_EnableOverDrive+0x98>)
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffe:	4a22      	ldr	r2, [pc, #136]	; (800a088 <HAL_PWREx_EnableOverDrive+0x98>)
 800a000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a004:	6413      	str	r3, [r2, #64]	; 0x40
 800a006:	4b20      	ldr	r3, [pc, #128]	; (800a088 <HAL_PWREx_EnableOverDrive+0x98>)
 800a008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a012:	4b1e      	ldr	r3, [pc, #120]	; (800a08c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a1d      	ldr	r2, [pc, #116]	; (800a08c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a01c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a01e:	f7fe fee1 	bl	8008de4 <HAL_GetTick>
 800a022:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a024:	e009      	b.n	800a03a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a026:	f7fe fedd 	bl	8008de4 <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a034:	d901      	bls.n	800a03a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e022      	b.n	800a080 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a03a:	4b14      	ldr	r3, [pc, #80]	; (800a08c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a046:	d1ee      	bne.n	800a026 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a048:	4b10      	ldr	r3, [pc, #64]	; (800a08c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a0f      	ldr	r2, [pc, #60]	; (800a08c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a04e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a052:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a054:	f7fe fec6 	bl	8008de4 <HAL_GetTick>
 800a058:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a05a:	e009      	b.n	800a070 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a05c:	f7fe fec2 	bl	8008de4 <HAL_GetTick>
 800a060:	4602      	mov	r2, r0
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a06a:	d901      	bls.n	800a070 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e007      	b.n	800a080 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a070:	4b06      	ldr	r3, [pc, #24]	; (800a08c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a07c:	d1ee      	bne.n	800a05c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	40023800 	.word	0x40023800
 800a08c:	40007000 	.word	0x40007000

0800a090 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a098:	2300      	movs	r3, #0
 800a09a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e29b      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 8087 	beq.w	800a1c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a0b4:	4b96      	ldr	r3, [pc, #600]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f003 030c 	and.w	r3, r3, #12
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	d00c      	beq.n	800a0da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0c0:	4b93      	ldr	r3, [pc, #588]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f003 030c 	and.w	r3, r3, #12
 800a0c8:	2b08      	cmp	r3, #8
 800a0ca:	d112      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x62>
 800a0cc:	4b90      	ldr	r3, [pc, #576]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0d8:	d10b      	bne.n	800a0f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0da:	4b8d      	ldr	r3, [pc, #564]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d06c      	beq.n	800a1c0 <HAL_RCC_OscConfig+0x130>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d168      	bne.n	800a1c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e275      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0fa:	d106      	bne.n	800a10a <HAL_RCC_OscConfig+0x7a>
 800a0fc:	4b84      	ldr	r3, [pc, #528]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a83      	ldr	r2, [pc, #524]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a106:	6013      	str	r3, [r2, #0]
 800a108:	e02e      	b.n	800a168 <HAL_RCC_OscConfig+0xd8>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d10c      	bne.n	800a12c <HAL_RCC_OscConfig+0x9c>
 800a112:	4b7f      	ldr	r3, [pc, #508]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a7e      	ldr	r2, [pc, #504]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a11c:	6013      	str	r3, [r2, #0]
 800a11e:	4b7c      	ldr	r3, [pc, #496]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a7b      	ldr	r2, [pc, #492]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a128:	6013      	str	r3, [r2, #0]
 800a12a:	e01d      	b.n	800a168 <HAL_RCC_OscConfig+0xd8>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a134:	d10c      	bne.n	800a150 <HAL_RCC_OscConfig+0xc0>
 800a136:	4b76      	ldr	r3, [pc, #472]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a75      	ldr	r2, [pc, #468]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a13c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	4b73      	ldr	r3, [pc, #460]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a72      	ldr	r2, [pc, #456]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a14c:	6013      	str	r3, [r2, #0]
 800a14e:	e00b      	b.n	800a168 <HAL_RCC_OscConfig+0xd8>
 800a150:	4b6f      	ldr	r3, [pc, #444]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a6e      	ldr	r2, [pc, #440]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a15a:	6013      	str	r3, [r2, #0]
 800a15c:	4b6c      	ldr	r3, [pc, #432]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a6b      	ldr	r2, [pc, #428]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d013      	beq.n	800a198 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a170:	f7fe fe38 	bl	8008de4 <HAL_GetTick>
 800a174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a176:	e008      	b.n	800a18a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a178:	f7fe fe34 	bl	8008de4 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b64      	cmp	r3, #100	; 0x64
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e229      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a18a:	4b61      	ldr	r3, [pc, #388]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0f0      	beq.n	800a178 <HAL_RCC_OscConfig+0xe8>
 800a196:	e014      	b.n	800a1c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a198:	f7fe fe24 	bl	8008de4 <HAL_GetTick>
 800a19c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a19e:	e008      	b.n	800a1b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1a0:	f7fe fe20 	bl	8008de4 <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	2b64      	cmp	r3, #100	; 0x64
 800a1ac:	d901      	bls.n	800a1b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e215      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1b2:	4b57      	ldr	r3, [pc, #348]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1f0      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x110>
 800a1be:	e000      	b.n	800a1c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 0302 	and.w	r3, r3, #2
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d069      	beq.n	800a2a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a1ce:	4b50      	ldr	r3, [pc, #320]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f003 030c 	and.w	r3, r3, #12
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d00b      	beq.n	800a1f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1da:	4b4d      	ldr	r3, [pc, #308]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 030c 	and.w	r3, r3, #12
 800a1e2:	2b08      	cmp	r3, #8
 800a1e4:	d11c      	bne.n	800a220 <HAL_RCC_OscConfig+0x190>
 800a1e6:	4b4a      	ldr	r3, [pc, #296]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d116      	bne.n	800a220 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a1f2:	4b47      	ldr	r3, [pc, #284]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d005      	beq.n	800a20a <HAL_RCC_OscConfig+0x17a>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d001      	beq.n	800a20a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e1e9      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a20a:	4b41      	ldr	r3, [pc, #260]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	493d      	ldr	r1, [pc, #244]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a21e:	e040      	b.n	800a2a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d023      	beq.n	800a270 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a228:	4b39      	ldr	r3, [pc, #228]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a38      	ldr	r2, [pc, #224]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a22e:	f043 0301 	orr.w	r3, r3, #1
 800a232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a234:	f7fe fdd6 	bl	8008de4 <HAL_GetTick>
 800a238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a23a:	e008      	b.n	800a24e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a23c:	f7fe fdd2 	bl	8008de4 <HAL_GetTick>
 800a240:	4602      	mov	r2, r0
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	2b02      	cmp	r3, #2
 800a248:	d901      	bls.n	800a24e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e1c7      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a24e:	4b30      	ldr	r3, [pc, #192]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0f0      	beq.n	800a23c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a25a:	4b2d      	ldr	r3, [pc, #180]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	4929      	ldr	r1, [pc, #164]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a26a:	4313      	orrs	r3, r2
 800a26c:	600b      	str	r3, [r1, #0]
 800a26e:	e018      	b.n	800a2a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a270:	4b27      	ldr	r3, [pc, #156]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a26      	ldr	r2, [pc, #152]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a276:	f023 0301 	bic.w	r3, r3, #1
 800a27a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a27c:	f7fe fdb2 	bl	8008de4 <HAL_GetTick>
 800a280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a282:	e008      	b.n	800a296 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a284:	f7fe fdae 	bl	8008de4 <HAL_GetTick>
 800a288:	4602      	mov	r2, r0
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d901      	bls.n	800a296 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e1a3      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a296:	4b1e      	ldr	r3, [pc, #120]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1f0      	bne.n	800a284 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0308 	and.w	r3, r3, #8
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d038      	beq.n	800a320 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d019      	beq.n	800a2ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2b6:	4b16      	ldr	r3, [pc, #88]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ba:	4a15      	ldr	r2, [pc, #84]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2bc:	f043 0301 	orr.w	r3, r3, #1
 800a2c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2c2:	f7fe fd8f 	bl	8008de4 <HAL_GetTick>
 800a2c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2c8:	e008      	b.n	800a2dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2ca:	f7fe fd8b 	bl	8008de4 <HAL_GetTick>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d901      	bls.n	800a2dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e180      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2dc:	4b0c      	ldr	r3, [pc, #48]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0f0      	beq.n	800a2ca <HAL_RCC_OscConfig+0x23a>
 800a2e8:	e01a      	b.n	800a320 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2ea:	4b09      	ldr	r3, [pc, #36]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ee:	4a08      	ldr	r2, [pc, #32]	; (800a310 <HAL_RCC_OscConfig+0x280>)
 800a2f0:	f023 0301 	bic.w	r3, r3, #1
 800a2f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2f6:	f7fe fd75 	bl	8008de4 <HAL_GetTick>
 800a2fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a2fc:	e00a      	b.n	800a314 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2fe:	f7fe fd71 	bl	8008de4 <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d903      	bls.n	800a314 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e166      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
 800a310:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a314:	4b92      	ldr	r3, [pc, #584]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a318:	f003 0302 	and.w	r3, r3, #2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1ee      	bne.n	800a2fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0304 	and.w	r3, r3, #4
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 80a4 	beq.w	800a476 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a32e:	4b8c      	ldr	r3, [pc, #560]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10d      	bne.n	800a356 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a33a:	4b89      	ldr	r3, [pc, #548]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33e:	4a88      	ldr	r2, [pc, #544]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a344:	6413      	str	r3, [r2, #64]	; 0x40
 800a346:	4b86      	ldr	r3, [pc, #536]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a34e:	60bb      	str	r3, [r7, #8]
 800a350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a352:	2301      	movs	r3, #1
 800a354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a356:	4b83      	ldr	r3, [pc, #524]	; (800a564 <HAL_RCC_OscConfig+0x4d4>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d118      	bne.n	800a394 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a362:	4b80      	ldr	r3, [pc, #512]	; (800a564 <HAL_RCC_OscConfig+0x4d4>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a7f      	ldr	r2, [pc, #508]	; (800a564 <HAL_RCC_OscConfig+0x4d4>)
 800a368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a36c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a36e:	f7fe fd39 	bl	8008de4 <HAL_GetTick>
 800a372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a374:	e008      	b.n	800a388 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a376:	f7fe fd35 	bl	8008de4 <HAL_GetTick>
 800a37a:	4602      	mov	r2, r0
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	1ad3      	subs	r3, r2, r3
 800a380:	2b64      	cmp	r3, #100	; 0x64
 800a382:	d901      	bls.n	800a388 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a384:	2303      	movs	r3, #3
 800a386:	e12a      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a388:	4b76      	ldr	r3, [pc, #472]	; (800a564 <HAL_RCC_OscConfig+0x4d4>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0f0      	beq.n	800a376 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d106      	bne.n	800a3aa <HAL_RCC_OscConfig+0x31a>
 800a39c:	4b70      	ldr	r3, [pc, #448]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a0:	4a6f      	ldr	r2, [pc, #444]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a3a2:	f043 0301 	orr.w	r3, r3, #1
 800a3a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a3a8:	e02d      	b.n	800a406 <HAL_RCC_OscConfig+0x376>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10c      	bne.n	800a3cc <HAL_RCC_OscConfig+0x33c>
 800a3b2:	4b6b      	ldr	r3, [pc, #428]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b6:	4a6a      	ldr	r2, [pc, #424]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a3b8:	f023 0301 	bic.w	r3, r3, #1
 800a3bc:	6713      	str	r3, [r2, #112]	; 0x70
 800a3be:	4b68      	ldr	r3, [pc, #416]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c2:	4a67      	ldr	r2, [pc, #412]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a3c4:	f023 0304 	bic.w	r3, r3, #4
 800a3c8:	6713      	str	r3, [r2, #112]	; 0x70
 800a3ca:	e01c      	b.n	800a406 <HAL_RCC_OscConfig+0x376>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	2b05      	cmp	r3, #5
 800a3d2:	d10c      	bne.n	800a3ee <HAL_RCC_OscConfig+0x35e>
 800a3d4:	4b62      	ldr	r3, [pc, #392]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a3d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d8:	4a61      	ldr	r2, [pc, #388]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a3da:	f043 0304 	orr.w	r3, r3, #4
 800a3de:	6713      	str	r3, [r2, #112]	; 0x70
 800a3e0:	4b5f      	ldr	r3, [pc, #380]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e4:	4a5e      	ldr	r2, [pc, #376]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a3e6:	f043 0301 	orr.w	r3, r3, #1
 800a3ea:	6713      	str	r3, [r2, #112]	; 0x70
 800a3ec:	e00b      	b.n	800a406 <HAL_RCC_OscConfig+0x376>
 800a3ee:	4b5c      	ldr	r3, [pc, #368]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f2:	4a5b      	ldr	r2, [pc, #364]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a3f4:	f023 0301 	bic.w	r3, r3, #1
 800a3f8:	6713      	str	r3, [r2, #112]	; 0x70
 800a3fa:	4b59      	ldr	r3, [pc, #356]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fe:	4a58      	ldr	r2, [pc, #352]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a400:	f023 0304 	bic.w	r3, r3, #4
 800a404:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d015      	beq.n	800a43a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a40e:	f7fe fce9 	bl	8008de4 <HAL_GetTick>
 800a412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a414:	e00a      	b.n	800a42c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a416:	f7fe fce5 	bl	8008de4 <HAL_GetTick>
 800a41a:	4602      	mov	r2, r0
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	1ad3      	subs	r3, r2, r3
 800a420:	f241 3288 	movw	r2, #5000	; 0x1388
 800a424:	4293      	cmp	r3, r2
 800a426:	d901      	bls.n	800a42c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a428:	2303      	movs	r3, #3
 800a42a:	e0d8      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a42c:	4b4c      	ldr	r3, [pc, #304]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a430:	f003 0302 	and.w	r3, r3, #2
 800a434:	2b00      	cmp	r3, #0
 800a436:	d0ee      	beq.n	800a416 <HAL_RCC_OscConfig+0x386>
 800a438:	e014      	b.n	800a464 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a43a:	f7fe fcd3 	bl	8008de4 <HAL_GetTick>
 800a43e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a440:	e00a      	b.n	800a458 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a442:	f7fe fccf 	bl	8008de4 <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a450:	4293      	cmp	r3, r2
 800a452:	d901      	bls.n	800a458 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e0c2      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a458:	4b41      	ldr	r3, [pc, #260]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45c:	f003 0302 	and.w	r3, r3, #2
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1ee      	bne.n	800a442 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d105      	bne.n	800a476 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a46a:	4b3d      	ldr	r3, [pc, #244]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a46e:	4a3c      	ldr	r2, [pc, #240]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a474:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f000 80ae 	beq.w	800a5dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a480:	4b37      	ldr	r3, [pc, #220]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	f003 030c 	and.w	r3, r3, #12
 800a488:	2b08      	cmp	r3, #8
 800a48a:	d06d      	beq.n	800a568 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	699b      	ldr	r3, [r3, #24]
 800a490:	2b02      	cmp	r3, #2
 800a492:	d14b      	bne.n	800a52c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a494:	4b32      	ldr	r3, [pc, #200]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a31      	ldr	r2, [pc, #196]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a49a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a49e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a0:	f7fe fca0 	bl	8008de4 <HAL_GetTick>
 800a4a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4a6:	e008      	b.n	800a4ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4a8:	f7fe fc9c 	bl	8008de4 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d901      	bls.n	800a4ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e091      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4ba:	4b29      	ldr	r3, [pc, #164]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1f0      	bne.n	800a4a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	69da      	ldr	r2, [r3, #28]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d4:	019b      	lsls	r3, r3, #6
 800a4d6:	431a      	orrs	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4dc:	085b      	lsrs	r3, r3, #1
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	041b      	lsls	r3, r3, #16
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e8:	061b      	lsls	r3, r3, #24
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f0:	071b      	lsls	r3, r3, #28
 800a4f2:	491b      	ldr	r1, [pc, #108]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4f8:	4b19      	ldr	r3, [pc, #100]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a18      	ldr	r2, [pc, #96]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a4fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a504:	f7fe fc6e 	bl	8008de4 <HAL_GetTick>
 800a508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a50a:	e008      	b.n	800a51e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a50c:	f7fe fc6a 	bl	8008de4 <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	2b02      	cmp	r3, #2
 800a518:	d901      	bls.n	800a51e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800a51a:	2303      	movs	r3, #3
 800a51c:	e05f      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a51e:	4b10      	ldr	r3, [pc, #64]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0f0      	beq.n	800a50c <HAL_RCC_OscConfig+0x47c>
 800a52a:	e057      	b.n	800a5dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a52c:	4b0c      	ldr	r3, [pc, #48]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a0b      	ldr	r2, [pc, #44]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a538:	f7fe fc54 	bl	8008de4 <HAL_GetTick>
 800a53c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a53e:	e008      	b.n	800a552 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a540:	f7fe fc50 	bl	8008de4 <HAL_GetTick>
 800a544:	4602      	mov	r2, r0
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	1ad3      	subs	r3, r2, r3
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d901      	bls.n	800a552 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e045      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a552:	4b03      	ldr	r3, [pc, #12]	; (800a560 <HAL_RCC_OscConfig+0x4d0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1f0      	bne.n	800a540 <HAL_RCC_OscConfig+0x4b0>
 800a55e:	e03d      	b.n	800a5dc <HAL_RCC_OscConfig+0x54c>
 800a560:	40023800 	.word	0x40023800
 800a564:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a568:	4b1f      	ldr	r3, [pc, #124]	; (800a5e8 <HAL_RCC_OscConfig+0x558>)
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	699b      	ldr	r3, [r3, #24]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d030      	beq.n	800a5d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a580:	429a      	cmp	r2, r3
 800a582:	d129      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a58e:	429a      	cmp	r2, r3
 800a590:	d122      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a598:	4013      	ands	r3, r2
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a59e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d119      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ae:	085b      	lsrs	r3, r3, #1
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d10f      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d107      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d001      	beq.n	800a5dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e000      	b.n	800a5de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	40023800 	.word	0x40023800

0800a5ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d101      	bne.n	800a604 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e0d0      	b.n	800a7a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a604:	4b6a      	ldr	r3, [pc, #424]	; (800a7b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 030f 	and.w	r3, r3, #15
 800a60c:	683a      	ldr	r2, [r7, #0]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d910      	bls.n	800a634 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a612:	4b67      	ldr	r3, [pc, #412]	; (800a7b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f023 020f 	bic.w	r2, r3, #15
 800a61a:	4965      	ldr	r1, [pc, #404]	; (800a7b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	4313      	orrs	r3, r2
 800a620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a622:	4b63      	ldr	r3, [pc, #396]	; (800a7b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 030f 	and.w	r3, r3, #15
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d001      	beq.n	800a634 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e0b8      	b.n	800a7a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0302 	and.w	r3, r3, #2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d020      	beq.n	800a682 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 0304 	and.w	r3, r3, #4
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d005      	beq.n	800a658 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a64c:	4b59      	ldr	r3, [pc, #356]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	4a58      	ldr	r2, [pc, #352]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a656:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 0308 	and.w	r3, r3, #8
 800a660:	2b00      	cmp	r3, #0
 800a662:	d005      	beq.n	800a670 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a664:	4b53      	ldr	r3, [pc, #332]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	4a52      	ldr	r2, [pc, #328]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a66a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a66e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a670:	4b50      	ldr	r3, [pc, #320]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	494d      	ldr	r1, [pc, #308]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d040      	beq.n	800a710 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d107      	bne.n	800a6a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a696:	4b47      	ldr	r3, [pc, #284]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d115      	bne.n	800a6ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e07f      	b.n	800a7a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d107      	bne.n	800a6be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6ae:	4b41      	ldr	r3, [pc, #260]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d109      	bne.n	800a6ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e073      	b.n	800a7a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6be:	4b3d      	ldr	r3, [pc, #244]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 0302 	and.w	r3, r3, #2
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e06b      	b.n	800a7a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6ce:	4b39      	ldr	r3, [pc, #228]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	f023 0203 	bic.w	r2, r3, #3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	4936      	ldr	r1, [pc, #216]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6e0:	f7fe fb80 	bl	8008de4 <HAL_GetTick>
 800a6e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6e6:	e00a      	b.n	800a6fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6e8:	f7fe fb7c 	bl	8008de4 <HAL_GetTick>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d901      	bls.n	800a6fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e053      	b.n	800a7a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6fe:	4b2d      	ldr	r3, [pc, #180]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f003 020c 	and.w	r2, r3, #12
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d1eb      	bne.n	800a6e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a710:	4b27      	ldr	r3, [pc, #156]	; (800a7b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 030f 	and.w	r3, r3, #15
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d210      	bcs.n	800a740 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a71e:	4b24      	ldr	r3, [pc, #144]	; (800a7b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f023 020f 	bic.w	r2, r3, #15
 800a726:	4922      	ldr	r1, [pc, #136]	; (800a7b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a72e:	4b20      	ldr	r3, [pc, #128]	; (800a7b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 030f 	and.w	r3, r3, #15
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d001      	beq.n	800a740 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	e032      	b.n	800a7a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f003 0304 	and.w	r3, r3, #4
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d008      	beq.n	800a75e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a74c:	4b19      	ldr	r3, [pc, #100]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	4916      	ldr	r1, [pc, #88]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a75a:	4313      	orrs	r3, r2
 800a75c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0308 	and.w	r3, r3, #8
 800a766:	2b00      	cmp	r3, #0
 800a768:	d009      	beq.n	800a77e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a76a:	4b12      	ldr	r3, [pc, #72]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	00db      	lsls	r3, r3, #3
 800a778:	490e      	ldr	r1, [pc, #56]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a77e:	f000 f821 	bl	800a7c4 <HAL_RCC_GetSysClockFreq>
 800a782:	4601      	mov	r1, r0
 800a784:	4b0b      	ldr	r3, [pc, #44]	; (800a7b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	091b      	lsrs	r3, r3, #4
 800a78a:	f003 030f 	and.w	r3, r3, #15
 800a78e:	4a0a      	ldr	r2, [pc, #40]	; (800a7b8 <HAL_RCC_ClockConfig+0x1cc>)
 800a790:	5cd3      	ldrb	r3, [r2, r3]
 800a792:	fa21 f303 	lsr.w	r3, r1, r3
 800a796:	4a09      	ldr	r2, [pc, #36]	; (800a7bc <HAL_RCC_ClockConfig+0x1d0>)
 800a798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a79a:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <HAL_RCC_ClockConfig+0x1d4>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fadc 	bl	8008d5c <HAL_InitTick>

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	40023c00 	.word	0x40023c00
 800a7b4:	40023800 	.word	0x40023800
 800a7b8:	0800c1d0 	.word	0x0800c1d0
 800a7bc:	20000020 	.word	0x20000020
 800a7c0:	20000024 	.word	0x20000024

0800a7c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	607b      	str	r3, [r7, #4]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	60fb      	str	r3, [r7, #12]
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7da:	4b63      	ldr	r3, [pc, #396]	; (800a968 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f003 030c 	and.w	r3, r3, #12
 800a7e2:	2b04      	cmp	r3, #4
 800a7e4:	d007      	beq.n	800a7f6 <HAL_RCC_GetSysClockFreq+0x32>
 800a7e6:	2b08      	cmp	r3, #8
 800a7e8:	d008      	beq.n	800a7fc <HAL_RCC_GetSysClockFreq+0x38>
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f040 80b4 	bne.w	800a958 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a7f0:	4b5e      	ldr	r3, [pc, #376]	; (800a96c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a7f2:	60bb      	str	r3, [r7, #8]
      break;
 800a7f4:	e0b3      	b.n	800a95e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a7f6:	4b5e      	ldr	r3, [pc, #376]	; (800a970 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800a7f8:	60bb      	str	r3, [r7, #8]
      break;
 800a7fa:	e0b0      	b.n	800a95e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a7fc:	4b5a      	ldr	r3, [pc, #360]	; (800a968 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a804:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a806:	4b58      	ldr	r3, [pc, #352]	; (800a968 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d04a      	beq.n	800a8a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a812:	4b55      	ldr	r3, [pc, #340]	; (800a968 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	099b      	lsrs	r3, r3, #6
 800a818:	f04f 0400 	mov.w	r4, #0
 800a81c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a820:	f04f 0200 	mov.w	r2, #0
 800a824:	ea03 0501 	and.w	r5, r3, r1
 800a828:	ea04 0602 	and.w	r6, r4, r2
 800a82c:	4629      	mov	r1, r5
 800a82e:	4632      	mov	r2, r6
 800a830:	f04f 0300 	mov.w	r3, #0
 800a834:	f04f 0400 	mov.w	r4, #0
 800a838:	0154      	lsls	r4, r2, #5
 800a83a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a83e:	014b      	lsls	r3, r1, #5
 800a840:	4619      	mov	r1, r3
 800a842:	4622      	mov	r2, r4
 800a844:	1b49      	subs	r1, r1, r5
 800a846:	eb62 0206 	sbc.w	r2, r2, r6
 800a84a:	f04f 0300 	mov.w	r3, #0
 800a84e:	f04f 0400 	mov.w	r4, #0
 800a852:	0194      	lsls	r4, r2, #6
 800a854:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a858:	018b      	lsls	r3, r1, #6
 800a85a:	1a5b      	subs	r3, r3, r1
 800a85c:	eb64 0402 	sbc.w	r4, r4, r2
 800a860:	f04f 0100 	mov.w	r1, #0
 800a864:	f04f 0200 	mov.w	r2, #0
 800a868:	00e2      	lsls	r2, r4, #3
 800a86a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a86e:	00d9      	lsls	r1, r3, #3
 800a870:	460b      	mov	r3, r1
 800a872:	4614      	mov	r4, r2
 800a874:	195b      	adds	r3, r3, r5
 800a876:	eb44 0406 	adc.w	r4, r4, r6
 800a87a:	f04f 0100 	mov.w	r1, #0
 800a87e:	f04f 0200 	mov.w	r2, #0
 800a882:	0262      	lsls	r2, r4, #9
 800a884:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a888:	0259      	lsls	r1, r3, #9
 800a88a:	460b      	mov	r3, r1
 800a88c:	4614      	mov	r4, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	4621      	mov	r1, r4
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f04f 0400 	mov.w	r4, #0
 800a898:	461a      	mov	r2, r3
 800a89a:	4623      	mov	r3, r4
 800a89c:	f7fd fccc 	bl	8008238 <__aeabi_uldivmod>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	60fb      	str	r3, [r7, #12]
 800a8a6:	e049      	b.n	800a93c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8a8:	4b2f      	ldr	r3, [pc, #188]	; (800a968 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	099b      	lsrs	r3, r3, #6
 800a8ae:	f04f 0400 	mov.w	r4, #0
 800a8b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a8b6:	f04f 0200 	mov.w	r2, #0
 800a8ba:	ea03 0501 	and.w	r5, r3, r1
 800a8be:	ea04 0602 	and.w	r6, r4, r2
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	4632      	mov	r2, r6
 800a8c6:	f04f 0300 	mov.w	r3, #0
 800a8ca:	f04f 0400 	mov.w	r4, #0
 800a8ce:	0154      	lsls	r4, r2, #5
 800a8d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a8d4:	014b      	lsls	r3, r1, #5
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4622      	mov	r2, r4
 800a8da:	1b49      	subs	r1, r1, r5
 800a8dc:	eb62 0206 	sbc.w	r2, r2, r6
 800a8e0:	f04f 0300 	mov.w	r3, #0
 800a8e4:	f04f 0400 	mov.w	r4, #0
 800a8e8:	0194      	lsls	r4, r2, #6
 800a8ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a8ee:	018b      	lsls	r3, r1, #6
 800a8f0:	1a5b      	subs	r3, r3, r1
 800a8f2:	eb64 0402 	sbc.w	r4, r4, r2
 800a8f6:	f04f 0100 	mov.w	r1, #0
 800a8fa:	f04f 0200 	mov.w	r2, #0
 800a8fe:	00e2      	lsls	r2, r4, #3
 800a900:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a904:	00d9      	lsls	r1, r3, #3
 800a906:	460b      	mov	r3, r1
 800a908:	4614      	mov	r4, r2
 800a90a:	195b      	adds	r3, r3, r5
 800a90c:	eb44 0406 	adc.w	r4, r4, r6
 800a910:	f04f 0100 	mov.w	r1, #0
 800a914:	f04f 0200 	mov.w	r2, #0
 800a918:	02a2      	lsls	r2, r4, #10
 800a91a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a91e:	0299      	lsls	r1, r3, #10
 800a920:	460b      	mov	r3, r1
 800a922:	4614      	mov	r4, r2
 800a924:	4618      	mov	r0, r3
 800a926:	4621      	mov	r1, r4
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f04f 0400 	mov.w	r4, #0
 800a92e:	461a      	mov	r2, r3
 800a930:	4623      	mov	r3, r4
 800a932:	f7fd fc81 	bl	8008238 <__aeabi_uldivmod>
 800a936:	4603      	mov	r3, r0
 800a938:	460c      	mov	r4, r1
 800a93a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a93c:	4b0a      	ldr	r3, [pc, #40]	; (800a968 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	0c1b      	lsrs	r3, r3, #16
 800a942:	f003 0303 	and.w	r3, r3, #3
 800a946:	3301      	adds	r3, #1
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	fbb2 f3f3 	udiv	r3, r2, r3
 800a954:	60bb      	str	r3, [r7, #8]
      break;
 800a956:	e002      	b.n	800a95e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a958:	4b04      	ldr	r3, [pc, #16]	; (800a96c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a95a:	60bb      	str	r3, [r7, #8]
      break;
 800a95c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a95e:	68bb      	ldr	r3, [r7, #8]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a968:	40023800 	.word	0x40023800
 800a96c:	00f42400 	.word	0x00f42400
 800a970:	007a1200 	.word	0x007a1200

0800a974 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a974:	b480      	push	{r7}
 800a976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a978:	4b03      	ldr	r3, [pc, #12]	; (800a988 <HAL_RCC_GetHCLKFreq+0x14>)
 800a97a:	681b      	ldr	r3, [r3, #0]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	20000020 	.word	0x20000020

0800a98c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a990:	f7ff fff0 	bl	800a974 <HAL_RCC_GetHCLKFreq>
 800a994:	4601      	mov	r1, r0
 800a996:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <HAL_RCC_GetPCLK1Freq+0x20>)
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	0a9b      	lsrs	r3, r3, #10
 800a99c:	f003 0307 	and.w	r3, r3, #7
 800a9a0:	4a03      	ldr	r2, [pc, #12]	; (800a9b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9a2:	5cd3      	ldrb	r3, [r2, r3]
 800a9a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	40023800 	.word	0x40023800
 800a9b0:	0800c1e0 	.word	0x0800c1e0

0800a9b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a9b8:	f7ff ffdc 	bl	800a974 <HAL_RCC_GetHCLKFreq>
 800a9bc:	4601      	mov	r1, r0
 800a9be:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	0b5b      	lsrs	r3, r3, #13
 800a9c4:	f003 0307 	and.w	r3, r3, #7
 800a9c8:	4a03      	ldr	r2, [pc, #12]	; (800a9d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a9ca:	5cd3      	ldrb	r3, [r2, r3]
 800a9cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	40023800 	.word	0x40023800
 800a9d8:	0800c1e0 	.word	0x0800c1e0

0800a9dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b088      	sub	sp, #32
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d012      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aa04:	4b69      	ldr	r3, [pc, #420]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	4a68      	ldr	r2, [pc, #416]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aa0e:	6093      	str	r3, [r2, #8]
 800aa10:	4b66      	ldr	r3, [pc, #408]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa18:	4964      	ldr	r1, [pc, #400]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800aa26:	2301      	movs	r3, #1
 800aa28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d017      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa36:	4b5d      	ldr	r3, [pc, #372]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa44:	4959      	ldr	r1, [pc, #356]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa46:	4313      	orrs	r3, r2
 800aa48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa54:	d101      	bne.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800aa56:	2301      	movs	r3, #1
 800aa58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800aa62:	2301      	movs	r3, #1
 800aa64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d017      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aa72:	4b4e      	ldr	r3, [pc, #312]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa80:	494a      	ldr	r1, [pc, #296]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa82:	4313      	orrs	r3, r2
 800aa84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa90:	d101      	bne.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800aa92:	2301      	movs	r3, #1
 800aa94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d101      	bne.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800aaae:	2301      	movs	r3, #1
 800aab0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 0320 	and.w	r3, r3, #32
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f000 808b 	beq.w	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800aac0:	4b3a      	ldr	r3, [pc, #232]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac4:	4a39      	ldr	r2, [pc, #228]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaca:	6413      	str	r3, [r2, #64]	; 0x40
 800aacc:	4b37      	ldr	r3, [pc, #220]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aad4:	60bb      	str	r3, [r7, #8]
 800aad6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aad8:	4b35      	ldr	r3, [pc, #212]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a34      	ldr	r2, [pc, #208]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800aade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aae4:	f7fe f97e 	bl	8008de4 <HAL_GetTick>
 800aae8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800aaea:	e008      	b.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aaec:	f7fe f97a 	bl	8008de4 <HAL_GetTick>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	1ad3      	subs	r3, r2, r3
 800aaf6:	2b64      	cmp	r3, #100	; 0x64
 800aaf8:	d901      	bls.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e38d      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800aafe:	4b2c      	ldr	r3, [pc, #176]	; (800abb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d0f0      	beq.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ab0a:	4b28      	ldr	r3, [pc, #160]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d035      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d02e      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab28:	4b20      	ldr	r3, [pc, #128]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab32:	4b1e      	ldr	r3, [pc, #120]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab36:	4a1d      	ldr	r2, [pc, #116]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab3c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ab3e:	4b1b      	ldr	r3, [pc, #108]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab42:	4a1a      	ldr	r2, [pc, #104]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab48:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ab4a:	4a18      	ldr	r2, [pc, #96]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ab50:	4b16      	ldr	r3, [pc, #88]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d114      	bne.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab5c:	f7fe f942 	bl	8008de4 <HAL_GetTick>
 800ab60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab62:	e00a      	b.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab64:	f7fe f93e 	bl	8008de4 <HAL_GetTick>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d901      	bls.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ab76:	2303      	movs	r3, #3
 800ab78:	e34f      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab7a:	4b0c      	ldr	r3, [pc, #48]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab7e:	f003 0302 	and.w	r3, r3, #2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d0ee      	beq.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab92:	d111      	bne.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800aba0:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800aba2:	400b      	ands	r3, r1
 800aba4:	4901      	ldr	r1, [pc, #4]	; (800abac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aba6:	4313      	orrs	r3, r2
 800aba8:	608b      	str	r3, [r1, #8]
 800abaa:	e00b      	b.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800abac:	40023800 	.word	0x40023800
 800abb0:	40007000 	.word	0x40007000
 800abb4:	0ffffcff 	.word	0x0ffffcff
 800abb8:	4bb3      	ldr	r3, [pc, #716]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	4ab2      	ldr	r2, [pc, #712]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800abbe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800abc2:	6093      	str	r3, [r2, #8]
 800abc4:	4bb0      	ldr	r3, [pc, #704]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800abc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abd0:	49ad      	ldr	r1, [pc, #692]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800abd2:	4313      	orrs	r3, r2
 800abd4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 0310 	and.w	r3, r3, #16
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d010      	beq.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800abe2:	4ba9      	ldr	r3, [pc, #676]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800abe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abe8:	4aa7      	ldr	r2, [pc, #668]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800abea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800abf2:	4ba5      	ldr	r3, [pc, #660]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800abf4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfc:	49a2      	ldr	r1, [pc, #648]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800abfe:	4313      	orrs	r3, r2
 800ac00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00a      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac10:	4b9d      	ldr	r3, [pc, #628]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ac12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac1e:	499a      	ldr	r1, [pc, #616]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ac20:	4313      	orrs	r3, r2
 800ac22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00a      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac32:	4b95      	ldr	r3, [pc, #596]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ac34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac40:	4991      	ldr	r1, [pc, #580]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ac42:	4313      	orrs	r3, r2
 800ac44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00a      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ac54:	4b8c      	ldr	r3, [pc, #560]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ac56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac62:	4989      	ldr	r1, [pc, #548]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ac64:	4313      	orrs	r3, r2
 800ac66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00a      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac76:	4b84      	ldr	r3, [pc, #528]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ac78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac84:	4980      	ldr	r1, [pc, #512]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00a      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ac98:	4b7b      	ldr	r3, [pc, #492]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ac9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac9e:	f023 0203 	bic.w	r2, r3, #3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca6:	4978      	ldr	r1, [pc, #480]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800aca8:	4313      	orrs	r3, r2
 800acaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800acba:	4b73      	ldr	r3, [pc, #460]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acc0:	f023 020c 	bic.w	r2, r3, #12
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acc8:	496f      	ldr	r1, [pc, #444]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acca:	4313      	orrs	r3, r2
 800accc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00a      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800acdc:	4b6a      	ldr	r3, [pc, #424]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ace2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acea:	4967      	ldr	r1, [pc, #412]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800acec:	4313      	orrs	r3, r2
 800acee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00a      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800acfe:	4b62      	ldr	r3, [pc, #392]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad04:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad0c:	495e      	ldr	r1, [pc, #376]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00a      	beq.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ad20:	4b59      	ldr	r3, [pc, #356]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad2e:	4956      	ldr	r1, [pc, #344]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad30:	4313      	orrs	r3, r2
 800ad32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00a      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ad42:	4b51      	ldr	r3, [pc, #324]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad50:	494d      	ldr	r1, [pc, #308]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00a      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ad64:	4b48      	ldr	r3, [pc, #288]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad72:	4945      	ldr	r1, [pc, #276]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad74:	4313      	orrs	r3, r2
 800ad76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00a      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ad86:	4b40      	ldr	r3, [pc, #256]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad94:	493c      	ldr	r1, [pc, #240]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ad96:	4313      	orrs	r3, r2
 800ad98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00a      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ada8:	4b37      	ldr	r3, [pc, #220]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800adaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adb6:	4934      	ldr	r1, [pc, #208]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800adb8:	4313      	orrs	r3, r2
 800adba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d011      	beq.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800adca:	4b2f      	ldr	r3, [pc, #188]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800adcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800add0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800add8:	492b      	ldr	r1, [pc, #172]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800adda:	4313      	orrs	r3, r2
 800addc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ade4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ade8:	d101      	bne.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800adea:	2301      	movs	r3, #1
 800adec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0308 	and.w	r3, r3, #8
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800adfa:	2301      	movs	r3, #1
 800adfc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00a      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae0a:	4b1f      	ldr	r3, [pc, #124]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae10:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae18:	491b      	ldr	r1, [pc, #108]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00b      	beq.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ae2c:	4b16      	ldr	r3, [pc, #88]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae3c:	4912      	ldr	r1, [pc, #72]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00b      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800ae50:	4b0d      	ldr	r3, [pc, #52]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae56:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae60:	4909      	ldr	r1, [pc, #36]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae62:	4313      	orrs	r3, r2
 800ae64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00f      	beq.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae74:	4b04      	ldr	r3, [pc, #16]	; (800ae88 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800ae76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae84:	e002      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800ae86:	bf00      	nop
 800ae88:	40023800 	.word	0x40023800
 800ae8c:	4985      	ldr	r1, [pc, #532]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00b      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800aea0:	4b80      	ldr	r3, [pc, #512]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aea6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeb0:	497c      	ldr	r1, [pc, #496]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d005      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aec6:	f040 80d6 	bne.w	800b076 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aeca:	4b76      	ldr	r3, [pc, #472]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a75      	ldr	r2, [pc, #468]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aed0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aed6:	f7fd ff85 	bl	8008de4 <HAL_GetTick>
 800aeda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aedc:	e008      	b.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800aede:	f7fd ff81 	bl	8008de4 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	2b64      	cmp	r3, #100	; 0x64
 800aeea:	d901      	bls.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aeec:	2303      	movs	r3, #3
 800aeee:	e194      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aef0:	4b6c      	ldr	r3, [pc, #432]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1f0      	bne.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0301 	and.w	r3, r3, #1
 800af04:	2b00      	cmp	r3, #0
 800af06:	d021      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x570>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d11d      	bne.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800af10:	4b64      	ldr	r3, [pc, #400]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800af12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af16:	0c1b      	lsrs	r3, r3, #16
 800af18:	f003 0303 	and.w	r3, r3, #3
 800af1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800af1e:	4b61      	ldr	r3, [pc, #388]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800af20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af24:	0e1b      	lsrs	r3, r3, #24
 800af26:	f003 030f 	and.w	r3, r3, #15
 800af2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	019a      	lsls	r2, r3, #6
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	041b      	lsls	r3, r3, #16
 800af36:	431a      	orrs	r2, r3
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	061b      	lsls	r3, r3, #24
 800af3c:	431a      	orrs	r2, r3
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	071b      	lsls	r3, r3, #28
 800af44:	4957      	ldr	r1, [pc, #348]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800af46:	4313      	orrs	r3, r2
 800af48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d004      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af60:	d00a      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d02e      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af76:	d129      	bne.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800af78:	4b4a      	ldr	r3, [pc, #296]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800af7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af7e:	0c1b      	lsrs	r3, r3, #16
 800af80:	f003 0303 	and.w	r3, r3, #3
 800af84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800af86:	4b47      	ldr	r3, [pc, #284]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800af88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af8c:	0f1b      	lsrs	r3, r3, #28
 800af8e:	f003 0307 	and.w	r3, r3, #7
 800af92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	019a      	lsls	r2, r3, #6
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	041b      	lsls	r3, r3, #16
 800af9e:	431a      	orrs	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	061b      	lsls	r3, r3, #24
 800afa6:	431a      	orrs	r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	071b      	lsls	r3, r3, #28
 800afac:	493d      	ldr	r1, [pc, #244]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afae:	4313      	orrs	r3, r2
 800afb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800afb4:	4b3b      	ldr	r3, [pc, #236]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afba:	f023 021f 	bic.w	r2, r3, #31
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc2:	3b01      	subs	r3, #1
 800afc4:	4937      	ldr	r1, [pc, #220]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afc6:	4313      	orrs	r3, r2
 800afc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d01d      	beq.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800afd8:	4b32      	ldr	r3, [pc, #200]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afde:	0e1b      	lsrs	r3, r3, #24
 800afe0:	f003 030f 	and.w	r3, r3, #15
 800afe4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800afe6:	4b2f      	ldr	r3, [pc, #188]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800afe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afec:	0f1b      	lsrs	r3, r3, #28
 800afee:	f003 0307 	and.w	r3, r3, #7
 800aff2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	019a      	lsls	r2, r3, #6
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	041b      	lsls	r3, r3, #16
 800b000:	431a      	orrs	r2, r3
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	061b      	lsls	r3, r3, #24
 800b006:	431a      	orrs	r2, r3
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	071b      	lsls	r3, r3, #28
 800b00c:	4925      	ldr	r1, [pc, #148]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b00e:	4313      	orrs	r3, r2
 800b010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d011      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	019a      	lsls	r2, r3, #6
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	041b      	lsls	r3, r3, #16
 800b02c:	431a      	orrs	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	68db      	ldr	r3, [r3, #12]
 800b032:	061b      	lsls	r3, r3, #24
 800b034:	431a      	orrs	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	071b      	lsls	r3, r3, #28
 800b03c:	4919      	ldr	r1, [pc, #100]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b03e:	4313      	orrs	r3, r2
 800b040:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b044:	4b17      	ldr	r3, [pc, #92]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a16      	ldr	r2, [pc, #88]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b04a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b04e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b050:	f7fd fec8 	bl	8008de4 <HAL_GetTick>
 800b054:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b056:	e008      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b058:	f7fd fec4 	bl	8008de4 <HAL_GetTick>
 800b05c:	4602      	mov	r2, r0
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	2b64      	cmp	r3, #100	; 0x64
 800b064:	d901      	bls.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b066:	2303      	movs	r3, #3
 800b068:	e0d7      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b06a:	4b0e      	ldr	r3, [pc, #56]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b072:	2b00      	cmp	r3, #0
 800b074:	d0f0      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	f040 80cd 	bne.w	800b218 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b07e:	4b09      	ldr	r3, [pc, #36]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a08      	ldr	r2, [pc, #32]	; (800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800b084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b08a:	f7fd feab 	bl	8008de4 <HAL_GetTick>
 800b08e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b090:	e00a      	b.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b092:	f7fd fea7 	bl	8008de4 <HAL_GetTick>
 800b096:	4602      	mov	r2, r0
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	2b64      	cmp	r3, #100	; 0x64
 800b09e:	d903      	bls.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	e0ba      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800b0a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b0a8:	4b5e      	ldr	r3, [pc, #376]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0b4:	d0ed      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d009      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d02e      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d12a      	bne.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b0de:	4b51      	ldr	r3, [pc, #324]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0e4:	0c1b      	lsrs	r3, r3, #16
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b0ec:	4b4d      	ldr	r3, [pc, #308]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0f2:	0f1b      	lsrs	r3, r3, #28
 800b0f4:	f003 0307 	and.w	r3, r3, #7
 800b0f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	695b      	ldr	r3, [r3, #20]
 800b0fe:	019a      	lsls	r2, r3, #6
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	041b      	lsls	r3, r3, #16
 800b104:	431a      	orrs	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	061b      	lsls	r3, r3, #24
 800b10c:	431a      	orrs	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	071b      	lsls	r3, r3, #28
 800b112:	4944      	ldr	r1, [pc, #272]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b114:	4313      	orrs	r3, r2
 800b116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b11a:	4b42      	ldr	r3, [pc, #264]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b11c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b120:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b128:	3b01      	subs	r3, #1
 800b12a:	021b      	lsls	r3, r3, #8
 800b12c:	493d      	ldr	r1, [pc, #244]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b12e:	4313      	orrs	r3, r2
 800b130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d022      	beq.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b144:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b148:	d11d      	bne.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b14a:	4b36      	ldr	r3, [pc, #216]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b150:	0e1b      	lsrs	r3, r3, #24
 800b152:	f003 030f 	and.w	r3, r3, #15
 800b156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b158:	4b32      	ldr	r3, [pc, #200]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b15e:	0f1b      	lsrs	r3, r3, #28
 800b160:	f003 0307 	and.w	r3, r3, #7
 800b164:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	019a      	lsls	r2, r3, #6
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6a1b      	ldr	r3, [r3, #32]
 800b170:	041b      	lsls	r3, r3, #16
 800b172:	431a      	orrs	r2, r3
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	061b      	lsls	r3, r3, #24
 800b178:	431a      	orrs	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	071b      	lsls	r3, r3, #28
 800b17e:	4929      	ldr	r1, [pc, #164]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b180:	4313      	orrs	r3, r2
 800b182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 0308 	and.w	r3, r3, #8
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d028      	beq.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b192:	4b24      	ldr	r3, [pc, #144]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b198:	0e1b      	lsrs	r3, r3, #24
 800b19a:	f003 030f 	and.w	r3, r3, #15
 800b19e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b1a0:	4b20      	ldr	r3, [pc, #128]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a6:	0c1b      	lsrs	r3, r3, #16
 800b1a8:	f003 0303 	and.w	r3, r3, #3
 800b1ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	695b      	ldr	r3, [r3, #20]
 800b1b2:	019a      	lsls	r2, r3, #6
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	041b      	lsls	r3, r3, #16
 800b1b8:	431a      	orrs	r2, r3
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	061b      	lsls	r3, r3, #24
 800b1be:	431a      	orrs	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	69db      	ldr	r3, [r3, #28]
 800b1c4:	071b      	lsls	r3, r3, #28
 800b1c6:	4917      	ldr	r1, [pc, #92]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b1ce:	4b15      	ldr	r3, [pc, #84]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1dc:	4911      	ldr	r1, [pc, #68]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b1e4:	4b0f      	ldr	r3, [pc, #60]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a0e      	ldr	r2, [pc, #56]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b1ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1f0:	f7fd fdf8 	bl	8008de4 <HAL_GetTick>
 800b1f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b1f6:	e008      	b.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b1f8:	f7fd fdf4 	bl	8008de4 <HAL_GetTick>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	2b64      	cmp	r3, #100	; 0x64
 800b204:	d901      	bls.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b206:	2303      	movs	r3, #3
 800b208:	e007      	b.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b20a:	4b06      	ldr	r3, [pc, #24]	; (800b224 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b216:	d1ef      	bne.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3720      	adds	r7, #32
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	40023800 	.word	0x40023800

0800b228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	e040      	b.n	800b2bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d106      	bne.n	800b250 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f7fd fc5e 	bl	8008b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2224      	movs	r2, #36	; 0x24
 800b254:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f022 0201 	bic.w	r2, r2, #1
 800b264:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f8be 	bl	800b3e8 <UART_SetConfig>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d101      	bne.n	800b276 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	e022      	b.n	800b2bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d002      	beq.n	800b284 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fb5c 	bl	800b93c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	685a      	ldr	r2, [r3, #4]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b292:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	689a      	ldr	r2, [r3, #8]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f042 0201 	orr.w	r2, r2, #1
 800b2b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fbe3 	bl	800ba80 <UART_CheckIdleState>
 800b2ba:	4603      	mov	r3, r0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b08a      	sub	sp, #40	; 0x28
 800b2c8:	af02      	add	r7, sp, #8
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	603b      	str	r3, [r7, #0]
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2d8:	2b20      	cmp	r3, #32
 800b2da:	d17f      	bne.n	800b3dc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d002      	beq.n	800b2e8 <HAL_UART_Transmit+0x24>
 800b2e2:	88fb      	ldrh	r3, [r7, #6]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d101      	bne.n	800b2ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e078      	b.n	800b3de <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d101      	bne.n	800b2fa <HAL_UART_Transmit+0x36>
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	e071      	b.n	800b3de <HAL_UART_Transmit+0x11a>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2221      	movs	r2, #33	; 0x21
 800b30c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b30e:	f7fd fd69 	bl	8008de4 <HAL_GetTick>
 800b312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	88fa      	ldrh	r2, [r7, #6]
 800b318:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	88fa      	ldrh	r2, [r7, #6]
 800b320:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b32c:	d108      	bne.n	800b340 <HAL_UART_Transmit+0x7c>
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d104      	bne.n	800b340 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800b336:	2300      	movs	r3, #0
 800b338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	61bb      	str	r3, [r7, #24]
 800b33e:	e003      	b.n	800b348 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b344:	2300      	movs	r3, #0
 800b346:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800b350:	e02c      	b.n	800b3ac <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2200      	movs	r2, #0
 800b35a:	2180      	movs	r1, #128	; 0x80
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f000 fbd4 	bl	800bb0a <UART_WaitOnFlagUntilTimeout>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800b368:	2303      	movs	r3, #3
 800b36a:	e038      	b.n	800b3de <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d10b      	bne.n	800b38a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	881b      	ldrh	r3, [r3, #0]
 800b376:	461a      	mov	r2, r3
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b380:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	3302      	adds	r3, #2
 800b386:	61bb      	str	r3, [r7, #24]
 800b388:	e007      	b.n	800b39a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	781a      	ldrb	r2, [r3, #0]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	3301      	adds	r3, #1
 800b398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1cc      	bne.n	800b352 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	9300      	str	r3, [sp, #0]
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	2140      	movs	r1, #64	; 0x40
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f000 fba1 	bl	800bb0a <UART_WaitOnFlagUntilTimeout>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	e005      	b.n	800b3de <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2220      	movs	r2, #32
 800b3d6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	e000      	b.n	800b3de <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800b3dc:	2302      	movs	r3, #2
  }
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3720      	adds	r7, #32
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
	...

0800b3e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b088      	sub	sp, #32
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	689a      	ldr	r2, [r3, #8]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	431a      	orrs	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	695b      	ldr	r3, [r3, #20]
 800b406:	431a      	orrs	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	69db      	ldr	r3, [r3, #28]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	4bb1      	ldr	r3, [pc, #708]	; (800b6dc <UART_SetConfig+0x2f4>)
 800b418:	4013      	ands	r3, r2
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	6812      	ldr	r2, [r2, #0]
 800b41e:	6939      	ldr	r1, [r7, #16]
 800b420:	430b      	orrs	r3, r1
 800b422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68da      	ldr	r2, [r3, #12]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	430a      	orrs	r2, r1
 800b438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	699b      	ldr	r3, [r3, #24]
 800b43e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6a1b      	ldr	r3, [r3, #32]
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	4313      	orrs	r3, r2
 800b448:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	689b      	ldr	r3, [r3, #8]
 800b450:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	430a      	orrs	r2, r1
 800b45c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a9f      	ldr	r2, [pc, #636]	; (800b6e0 <UART_SetConfig+0x2f8>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d121      	bne.n	800b4ac <UART_SetConfig+0xc4>
 800b468:	4b9e      	ldr	r3, [pc, #632]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b46e:	f003 0303 	and.w	r3, r3, #3
 800b472:	2b03      	cmp	r3, #3
 800b474:	d816      	bhi.n	800b4a4 <UART_SetConfig+0xbc>
 800b476:	a201      	add	r2, pc, #4	; (adr r2, 800b47c <UART_SetConfig+0x94>)
 800b478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47c:	0800b48d 	.word	0x0800b48d
 800b480:	0800b499 	.word	0x0800b499
 800b484:	0800b493 	.word	0x0800b493
 800b488:	0800b49f 	.word	0x0800b49f
 800b48c:	2301      	movs	r3, #1
 800b48e:	77fb      	strb	r3, [r7, #31]
 800b490:	e151      	b.n	800b736 <UART_SetConfig+0x34e>
 800b492:	2302      	movs	r3, #2
 800b494:	77fb      	strb	r3, [r7, #31]
 800b496:	e14e      	b.n	800b736 <UART_SetConfig+0x34e>
 800b498:	2304      	movs	r3, #4
 800b49a:	77fb      	strb	r3, [r7, #31]
 800b49c:	e14b      	b.n	800b736 <UART_SetConfig+0x34e>
 800b49e:	2308      	movs	r3, #8
 800b4a0:	77fb      	strb	r3, [r7, #31]
 800b4a2:	e148      	b.n	800b736 <UART_SetConfig+0x34e>
 800b4a4:	2310      	movs	r3, #16
 800b4a6:	77fb      	strb	r3, [r7, #31]
 800b4a8:	bf00      	nop
 800b4aa:	e144      	b.n	800b736 <UART_SetConfig+0x34e>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a8d      	ldr	r2, [pc, #564]	; (800b6e8 <UART_SetConfig+0x300>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d134      	bne.n	800b520 <UART_SetConfig+0x138>
 800b4b6:	4b8b      	ldr	r3, [pc, #556]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b4b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4bc:	f003 030c 	and.w	r3, r3, #12
 800b4c0:	2b0c      	cmp	r3, #12
 800b4c2:	d829      	bhi.n	800b518 <UART_SetConfig+0x130>
 800b4c4:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <UART_SetConfig+0xe4>)
 800b4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ca:	bf00      	nop
 800b4cc:	0800b501 	.word	0x0800b501
 800b4d0:	0800b519 	.word	0x0800b519
 800b4d4:	0800b519 	.word	0x0800b519
 800b4d8:	0800b519 	.word	0x0800b519
 800b4dc:	0800b50d 	.word	0x0800b50d
 800b4e0:	0800b519 	.word	0x0800b519
 800b4e4:	0800b519 	.word	0x0800b519
 800b4e8:	0800b519 	.word	0x0800b519
 800b4ec:	0800b507 	.word	0x0800b507
 800b4f0:	0800b519 	.word	0x0800b519
 800b4f4:	0800b519 	.word	0x0800b519
 800b4f8:	0800b519 	.word	0x0800b519
 800b4fc:	0800b513 	.word	0x0800b513
 800b500:	2300      	movs	r3, #0
 800b502:	77fb      	strb	r3, [r7, #31]
 800b504:	e117      	b.n	800b736 <UART_SetConfig+0x34e>
 800b506:	2302      	movs	r3, #2
 800b508:	77fb      	strb	r3, [r7, #31]
 800b50a:	e114      	b.n	800b736 <UART_SetConfig+0x34e>
 800b50c:	2304      	movs	r3, #4
 800b50e:	77fb      	strb	r3, [r7, #31]
 800b510:	e111      	b.n	800b736 <UART_SetConfig+0x34e>
 800b512:	2308      	movs	r3, #8
 800b514:	77fb      	strb	r3, [r7, #31]
 800b516:	e10e      	b.n	800b736 <UART_SetConfig+0x34e>
 800b518:	2310      	movs	r3, #16
 800b51a:	77fb      	strb	r3, [r7, #31]
 800b51c:	bf00      	nop
 800b51e:	e10a      	b.n	800b736 <UART_SetConfig+0x34e>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a71      	ldr	r2, [pc, #452]	; (800b6ec <UART_SetConfig+0x304>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d120      	bne.n	800b56c <UART_SetConfig+0x184>
 800b52a:	4b6e      	ldr	r3, [pc, #440]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b530:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b534:	2b10      	cmp	r3, #16
 800b536:	d00f      	beq.n	800b558 <UART_SetConfig+0x170>
 800b538:	2b10      	cmp	r3, #16
 800b53a:	d802      	bhi.n	800b542 <UART_SetConfig+0x15a>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d005      	beq.n	800b54c <UART_SetConfig+0x164>
 800b540:	e010      	b.n	800b564 <UART_SetConfig+0x17c>
 800b542:	2b20      	cmp	r3, #32
 800b544:	d005      	beq.n	800b552 <UART_SetConfig+0x16a>
 800b546:	2b30      	cmp	r3, #48	; 0x30
 800b548:	d009      	beq.n	800b55e <UART_SetConfig+0x176>
 800b54a:	e00b      	b.n	800b564 <UART_SetConfig+0x17c>
 800b54c:	2300      	movs	r3, #0
 800b54e:	77fb      	strb	r3, [r7, #31]
 800b550:	e0f1      	b.n	800b736 <UART_SetConfig+0x34e>
 800b552:	2302      	movs	r3, #2
 800b554:	77fb      	strb	r3, [r7, #31]
 800b556:	e0ee      	b.n	800b736 <UART_SetConfig+0x34e>
 800b558:	2304      	movs	r3, #4
 800b55a:	77fb      	strb	r3, [r7, #31]
 800b55c:	e0eb      	b.n	800b736 <UART_SetConfig+0x34e>
 800b55e:	2308      	movs	r3, #8
 800b560:	77fb      	strb	r3, [r7, #31]
 800b562:	e0e8      	b.n	800b736 <UART_SetConfig+0x34e>
 800b564:	2310      	movs	r3, #16
 800b566:	77fb      	strb	r3, [r7, #31]
 800b568:	bf00      	nop
 800b56a:	e0e4      	b.n	800b736 <UART_SetConfig+0x34e>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a5f      	ldr	r2, [pc, #380]	; (800b6f0 <UART_SetConfig+0x308>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d120      	bne.n	800b5b8 <UART_SetConfig+0x1d0>
 800b576:	4b5b      	ldr	r3, [pc, #364]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b57c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b580:	2b40      	cmp	r3, #64	; 0x40
 800b582:	d00f      	beq.n	800b5a4 <UART_SetConfig+0x1bc>
 800b584:	2b40      	cmp	r3, #64	; 0x40
 800b586:	d802      	bhi.n	800b58e <UART_SetConfig+0x1a6>
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d005      	beq.n	800b598 <UART_SetConfig+0x1b0>
 800b58c:	e010      	b.n	800b5b0 <UART_SetConfig+0x1c8>
 800b58e:	2b80      	cmp	r3, #128	; 0x80
 800b590:	d005      	beq.n	800b59e <UART_SetConfig+0x1b6>
 800b592:	2bc0      	cmp	r3, #192	; 0xc0
 800b594:	d009      	beq.n	800b5aa <UART_SetConfig+0x1c2>
 800b596:	e00b      	b.n	800b5b0 <UART_SetConfig+0x1c8>
 800b598:	2300      	movs	r3, #0
 800b59a:	77fb      	strb	r3, [r7, #31]
 800b59c:	e0cb      	b.n	800b736 <UART_SetConfig+0x34e>
 800b59e:	2302      	movs	r3, #2
 800b5a0:	77fb      	strb	r3, [r7, #31]
 800b5a2:	e0c8      	b.n	800b736 <UART_SetConfig+0x34e>
 800b5a4:	2304      	movs	r3, #4
 800b5a6:	77fb      	strb	r3, [r7, #31]
 800b5a8:	e0c5      	b.n	800b736 <UART_SetConfig+0x34e>
 800b5aa:	2308      	movs	r3, #8
 800b5ac:	77fb      	strb	r3, [r7, #31]
 800b5ae:	e0c2      	b.n	800b736 <UART_SetConfig+0x34e>
 800b5b0:	2310      	movs	r3, #16
 800b5b2:	77fb      	strb	r3, [r7, #31]
 800b5b4:	bf00      	nop
 800b5b6:	e0be      	b.n	800b736 <UART_SetConfig+0x34e>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a4d      	ldr	r2, [pc, #308]	; (800b6f4 <UART_SetConfig+0x30c>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d124      	bne.n	800b60c <UART_SetConfig+0x224>
 800b5c2:	4b48      	ldr	r3, [pc, #288]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5d0:	d012      	beq.n	800b5f8 <UART_SetConfig+0x210>
 800b5d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5d6:	d802      	bhi.n	800b5de <UART_SetConfig+0x1f6>
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d007      	beq.n	800b5ec <UART_SetConfig+0x204>
 800b5dc:	e012      	b.n	800b604 <UART_SetConfig+0x21c>
 800b5de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e2:	d006      	beq.n	800b5f2 <UART_SetConfig+0x20a>
 800b5e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5e8:	d009      	beq.n	800b5fe <UART_SetConfig+0x216>
 800b5ea:	e00b      	b.n	800b604 <UART_SetConfig+0x21c>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	77fb      	strb	r3, [r7, #31]
 800b5f0:	e0a1      	b.n	800b736 <UART_SetConfig+0x34e>
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	77fb      	strb	r3, [r7, #31]
 800b5f6:	e09e      	b.n	800b736 <UART_SetConfig+0x34e>
 800b5f8:	2304      	movs	r3, #4
 800b5fa:	77fb      	strb	r3, [r7, #31]
 800b5fc:	e09b      	b.n	800b736 <UART_SetConfig+0x34e>
 800b5fe:	2308      	movs	r3, #8
 800b600:	77fb      	strb	r3, [r7, #31]
 800b602:	e098      	b.n	800b736 <UART_SetConfig+0x34e>
 800b604:	2310      	movs	r3, #16
 800b606:	77fb      	strb	r3, [r7, #31]
 800b608:	bf00      	nop
 800b60a:	e094      	b.n	800b736 <UART_SetConfig+0x34e>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a39      	ldr	r2, [pc, #228]	; (800b6f8 <UART_SetConfig+0x310>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d124      	bne.n	800b660 <UART_SetConfig+0x278>
 800b616:	4b33      	ldr	r3, [pc, #204]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b61c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b624:	d012      	beq.n	800b64c <UART_SetConfig+0x264>
 800b626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b62a:	d802      	bhi.n	800b632 <UART_SetConfig+0x24a>
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d007      	beq.n	800b640 <UART_SetConfig+0x258>
 800b630:	e012      	b.n	800b658 <UART_SetConfig+0x270>
 800b632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b636:	d006      	beq.n	800b646 <UART_SetConfig+0x25e>
 800b638:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b63c:	d009      	beq.n	800b652 <UART_SetConfig+0x26a>
 800b63e:	e00b      	b.n	800b658 <UART_SetConfig+0x270>
 800b640:	2301      	movs	r3, #1
 800b642:	77fb      	strb	r3, [r7, #31]
 800b644:	e077      	b.n	800b736 <UART_SetConfig+0x34e>
 800b646:	2302      	movs	r3, #2
 800b648:	77fb      	strb	r3, [r7, #31]
 800b64a:	e074      	b.n	800b736 <UART_SetConfig+0x34e>
 800b64c:	2304      	movs	r3, #4
 800b64e:	77fb      	strb	r3, [r7, #31]
 800b650:	e071      	b.n	800b736 <UART_SetConfig+0x34e>
 800b652:	2308      	movs	r3, #8
 800b654:	77fb      	strb	r3, [r7, #31]
 800b656:	e06e      	b.n	800b736 <UART_SetConfig+0x34e>
 800b658:	2310      	movs	r3, #16
 800b65a:	77fb      	strb	r3, [r7, #31]
 800b65c:	bf00      	nop
 800b65e:	e06a      	b.n	800b736 <UART_SetConfig+0x34e>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a25      	ldr	r2, [pc, #148]	; (800b6fc <UART_SetConfig+0x314>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d124      	bne.n	800b6b4 <UART_SetConfig+0x2cc>
 800b66a:	4b1e      	ldr	r3, [pc, #120]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b670:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b678:	d012      	beq.n	800b6a0 <UART_SetConfig+0x2b8>
 800b67a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b67e:	d802      	bhi.n	800b686 <UART_SetConfig+0x29e>
 800b680:	2b00      	cmp	r3, #0
 800b682:	d007      	beq.n	800b694 <UART_SetConfig+0x2ac>
 800b684:	e012      	b.n	800b6ac <UART_SetConfig+0x2c4>
 800b686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b68a:	d006      	beq.n	800b69a <UART_SetConfig+0x2b2>
 800b68c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b690:	d009      	beq.n	800b6a6 <UART_SetConfig+0x2be>
 800b692:	e00b      	b.n	800b6ac <UART_SetConfig+0x2c4>
 800b694:	2300      	movs	r3, #0
 800b696:	77fb      	strb	r3, [r7, #31]
 800b698:	e04d      	b.n	800b736 <UART_SetConfig+0x34e>
 800b69a:	2302      	movs	r3, #2
 800b69c:	77fb      	strb	r3, [r7, #31]
 800b69e:	e04a      	b.n	800b736 <UART_SetConfig+0x34e>
 800b6a0:	2304      	movs	r3, #4
 800b6a2:	77fb      	strb	r3, [r7, #31]
 800b6a4:	e047      	b.n	800b736 <UART_SetConfig+0x34e>
 800b6a6:	2308      	movs	r3, #8
 800b6a8:	77fb      	strb	r3, [r7, #31]
 800b6aa:	e044      	b.n	800b736 <UART_SetConfig+0x34e>
 800b6ac:	2310      	movs	r3, #16
 800b6ae:	77fb      	strb	r3, [r7, #31]
 800b6b0:	bf00      	nop
 800b6b2:	e040      	b.n	800b736 <UART_SetConfig+0x34e>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a11      	ldr	r2, [pc, #68]	; (800b700 <UART_SetConfig+0x318>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d139      	bne.n	800b732 <UART_SetConfig+0x34a>
 800b6be:	4b09      	ldr	r3, [pc, #36]	; (800b6e4 <UART_SetConfig+0x2fc>)
 800b6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b6c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6cc:	d027      	beq.n	800b71e <UART_SetConfig+0x336>
 800b6ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6d2:	d817      	bhi.n	800b704 <UART_SetConfig+0x31c>
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01c      	beq.n	800b712 <UART_SetConfig+0x32a>
 800b6d8:	e027      	b.n	800b72a <UART_SetConfig+0x342>
 800b6da:	bf00      	nop
 800b6dc:	efff69f3 	.word	0xefff69f3
 800b6e0:	40011000 	.word	0x40011000
 800b6e4:	40023800 	.word	0x40023800
 800b6e8:	40004400 	.word	0x40004400
 800b6ec:	40004800 	.word	0x40004800
 800b6f0:	40004c00 	.word	0x40004c00
 800b6f4:	40005000 	.word	0x40005000
 800b6f8:	40011400 	.word	0x40011400
 800b6fc:	40007800 	.word	0x40007800
 800b700:	40007c00 	.word	0x40007c00
 800b704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b708:	d006      	beq.n	800b718 <UART_SetConfig+0x330>
 800b70a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b70e:	d009      	beq.n	800b724 <UART_SetConfig+0x33c>
 800b710:	e00b      	b.n	800b72a <UART_SetConfig+0x342>
 800b712:	2300      	movs	r3, #0
 800b714:	77fb      	strb	r3, [r7, #31]
 800b716:	e00e      	b.n	800b736 <UART_SetConfig+0x34e>
 800b718:	2302      	movs	r3, #2
 800b71a:	77fb      	strb	r3, [r7, #31]
 800b71c:	e00b      	b.n	800b736 <UART_SetConfig+0x34e>
 800b71e:	2304      	movs	r3, #4
 800b720:	77fb      	strb	r3, [r7, #31]
 800b722:	e008      	b.n	800b736 <UART_SetConfig+0x34e>
 800b724:	2308      	movs	r3, #8
 800b726:	77fb      	strb	r3, [r7, #31]
 800b728:	e005      	b.n	800b736 <UART_SetConfig+0x34e>
 800b72a:	2310      	movs	r3, #16
 800b72c:	77fb      	strb	r3, [r7, #31]
 800b72e:	bf00      	nop
 800b730:	e001      	b.n	800b736 <UART_SetConfig+0x34e>
 800b732:	2310      	movs	r3, #16
 800b734:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	69db      	ldr	r3, [r3, #28]
 800b73a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b73e:	d17f      	bne.n	800b840 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b740:	7ffb      	ldrb	r3, [r7, #31]
 800b742:	2b08      	cmp	r3, #8
 800b744:	d85c      	bhi.n	800b800 <UART_SetConfig+0x418>
 800b746:	a201      	add	r2, pc, #4	; (adr r2, 800b74c <UART_SetConfig+0x364>)
 800b748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74c:	0800b771 	.word	0x0800b771
 800b750:	0800b791 	.word	0x0800b791
 800b754:	0800b7b1 	.word	0x0800b7b1
 800b758:	0800b801 	.word	0x0800b801
 800b75c:	0800b7c9 	.word	0x0800b7c9
 800b760:	0800b801 	.word	0x0800b801
 800b764:	0800b801 	.word	0x0800b801
 800b768:	0800b801 	.word	0x0800b801
 800b76c:	0800b7e9 	.word	0x0800b7e9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b770:	f7ff f90c 	bl	800a98c <HAL_RCC_GetPCLK1Freq>
 800b774:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	005a      	lsls	r2, r3, #1
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	085b      	lsrs	r3, r3, #1
 800b780:	441a      	add	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	fbb2 f3f3 	udiv	r3, r2, r3
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	61bb      	str	r3, [r7, #24]
        break;
 800b78e:	e03a      	b.n	800b806 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b790:	f7ff f910 	bl	800a9b4 <HAL_RCC_GetPCLK2Freq>
 800b794:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	005a      	lsls	r2, r3, #1
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	085b      	lsrs	r3, r3, #1
 800b7a0:	441a      	add	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	61bb      	str	r3, [r7, #24]
        break;
 800b7ae:	e02a      	b.n	800b806 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	085a      	lsrs	r2, r3, #1
 800b7b6:	4b5f      	ldr	r3, [pc, #380]	; (800b934 <UART_SetConfig+0x54c>)
 800b7b8:	4413      	add	r3, r2
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	6852      	ldr	r2, [r2, #4]
 800b7be:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	61bb      	str	r3, [r7, #24]
        break;
 800b7c6:	e01e      	b.n	800b806 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7c8:	f7fe fffc 	bl	800a7c4 <HAL_RCC_GetSysClockFreq>
 800b7cc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	005a      	lsls	r2, r3, #1
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	085b      	lsrs	r3, r3, #1
 800b7d8:	441a      	add	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	61bb      	str	r3, [r7, #24]
        break;
 800b7e6:	e00e      	b.n	800b806 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	085b      	lsrs	r3, r3, #1
 800b7ee:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	61bb      	str	r3, [r7, #24]
        break;
 800b7fe:	e002      	b.n	800b806 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	75fb      	strb	r3, [r7, #23]
        break;
 800b804:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	2b0f      	cmp	r3, #15
 800b80a:	d916      	bls.n	800b83a <UART_SetConfig+0x452>
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b812:	d212      	bcs.n	800b83a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	b29b      	uxth	r3, r3
 800b818:	f023 030f 	bic.w	r3, r3, #15
 800b81c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	085b      	lsrs	r3, r3, #1
 800b822:	b29b      	uxth	r3, r3
 800b824:	f003 0307 	and.w	r3, r3, #7
 800b828:	b29a      	uxth	r2, r3
 800b82a:	897b      	ldrh	r3, [r7, #10]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	897a      	ldrh	r2, [r7, #10]
 800b836:	60da      	str	r2, [r3, #12]
 800b838:	e070      	b.n	800b91c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	75fb      	strb	r3, [r7, #23]
 800b83e:	e06d      	b.n	800b91c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b840:	7ffb      	ldrb	r3, [r7, #31]
 800b842:	2b08      	cmp	r3, #8
 800b844:	d859      	bhi.n	800b8fa <UART_SetConfig+0x512>
 800b846:	a201      	add	r2, pc, #4	; (adr r2, 800b84c <UART_SetConfig+0x464>)
 800b848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84c:	0800b871 	.word	0x0800b871
 800b850:	0800b88f 	.word	0x0800b88f
 800b854:	0800b8ad 	.word	0x0800b8ad
 800b858:	0800b8fb 	.word	0x0800b8fb
 800b85c:	0800b8c5 	.word	0x0800b8c5
 800b860:	0800b8fb 	.word	0x0800b8fb
 800b864:	0800b8fb 	.word	0x0800b8fb
 800b868:	0800b8fb 	.word	0x0800b8fb
 800b86c:	0800b8e3 	.word	0x0800b8e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b870:	f7ff f88c 	bl	800a98c <HAL_RCC_GetPCLK1Freq>
 800b874:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	085a      	lsrs	r2, r3, #1
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	441a      	add	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	fbb2 f3f3 	udiv	r3, r2, r3
 800b888:	b29b      	uxth	r3, r3
 800b88a:	61bb      	str	r3, [r7, #24]
        break;
 800b88c:	e038      	b.n	800b900 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b88e:	f7ff f891 	bl	800a9b4 <HAL_RCC_GetPCLK2Freq>
 800b892:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	085a      	lsrs	r2, r3, #1
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	441a      	add	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	61bb      	str	r3, [r7, #24]
        break;
 800b8aa:	e029      	b.n	800b900 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	085a      	lsrs	r2, r3, #1
 800b8b2:	4b21      	ldr	r3, [pc, #132]	; (800b938 <UART_SetConfig+0x550>)
 800b8b4:	4413      	add	r3, r2
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	6852      	ldr	r2, [r2, #4]
 800b8ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	61bb      	str	r3, [r7, #24]
        break;
 800b8c2:	e01d      	b.n	800b900 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8c4:	f7fe ff7e 	bl	800a7c4 <HAL_RCC_GetSysClockFreq>
 800b8c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	085a      	lsrs	r2, r3, #1
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	441a      	add	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	61bb      	str	r3, [r7, #24]
        break;
 800b8e0:	e00e      	b.n	800b900 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	085b      	lsrs	r3, r3, #1
 800b8e8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	61bb      	str	r3, [r7, #24]
        break;
 800b8f8:	e002      	b.n	800b900 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	75fb      	strb	r3, [r7, #23]
        break;
 800b8fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	2b0f      	cmp	r3, #15
 800b904:	d908      	bls.n	800b918 <UART_SetConfig+0x530>
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b90c:	d204      	bcs.n	800b918 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	69ba      	ldr	r2, [r7, #24]
 800b914:	60da      	str	r2, [r3, #12]
 800b916:	e001      	b.n	800b91c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2200      	movs	r2, #0
 800b920:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b928:	7dfb      	ldrb	r3, [r7, #23]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3720      	adds	r7, #32
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	01e84800 	.word	0x01e84800
 800b938:	00f42400 	.word	0x00f42400

0800b93c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00a      	beq.n	800b966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	430a      	orrs	r2, r1
 800b964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96a:	f003 0302 	and.w	r3, r3, #2
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00a      	beq.n	800b988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	430a      	orrs	r2, r1
 800b986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98c:	f003 0304 	and.w	r3, r3, #4
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00a      	beq.n	800b9aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	430a      	orrs	r2, r1
 800b9a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ae:	f003 0308 	and.w	r3, r3, #8
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00a      	beq.n	800b9cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	430a      	orrs	r2, r1
 800b9ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	f003 0310 	and.w	r3, r3, #16
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00a      	beq.n	800b9ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	430a      	orrs	r2, r1
 800b9ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f2:	f003 0320 	and.w	r3, r3, #32
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00a      	beq.n	800ba10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d01a      	beq.n	800ba52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	430a      	orrs	r2, r1
 800ba30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba3a:	d10a      	bne.n	800ba52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00a      	beq.n	800ba74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	430a      	orrs	r2, r1
 800ba72:	605a      	str	r2, [r3, #4]
  }
}
 800ba74:	bf00      	nop
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af02      	add	r7, sp, #8
 800ba86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ba8e:	f7fd f9a9 	bl	8008de4 <HAL_GetTick>
 800ba92:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f003 0308 	and.w	r3, r3, #8
 800ba9e:	2b08      	cmp	r3, #8
 800baa0:	d10e      	bne.n	800bac0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baa2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f82a 	bl	800bb0a <UART_WaitOnFlagUntilTimeout>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800babc:	2303      	movs	r3, #3
 800babe:	e020      	b.n	800bb02 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 0304 	and.w	r3, r3, #4
 800baca:	2b04      	cmp	r3, #4
 800bacc:	d10e      	bne.n	800baec <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bace:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 f814 	bl	800bb0a <UART_WaitOnFlagUntilTimeout>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d001      	beq.n	800baec <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bae8:	2303      	movs	r3, #3
 800baea:	e00a      	b.n	800bb02 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2220      	movs	r2, #32
 800baf0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2220      	movs	r2, #32
 800baf6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b084      	sub	sp, #16
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	60f8      	str	r0, [r7, #12]
 800bb12:	60b9      	str	r1, [r7, #8]
 800bb14:	603b      	str	r3, [r7, #0]
 800bb16:	4613      	mov	r3, r2
 800bb18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb1a:	e05d      	b.n	800bbd8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb22:	d059      	beq.n	800bbd8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb24:	f7fd f95e 	bl	8008de4 <HAL_GetTick>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d302      	bcc.n	800bb3a <UART_WaitOnFlagUntilTimeout+0x30>
 800bb34:	69bb      	ldr	r3, [r7, #24]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d11b      	bne.n	800bb72 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bb48:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	689a      	ldr	r2, [r3, #8]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f022 0201 	bic.w	r2, r2, #1
 800bb58:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2220      	movs	r2, #32
 800bb5e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2220      	movs	r2, #32
 800bb64:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e042      	b.n	800bbf8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 0304 	and.w	r3, r3, #4
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d02b      	beq.n	800bbd8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	69db      	ldr	r3, [r3, #28]
 800bb86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb8e:	d123      	bne.n	800bbd8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb98:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bba8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	689a      	ldr	r2, [r3, #8]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f022 0201 	bic.w	r2, r2, #1
 800bbb8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2220      	movs	r2, #32
 800bbbe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2220      	movs	r2, #32
 800bbca:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	e00f      	b.n	800bbf8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	69da      	ldr	r2, [r3, #28]
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	bf0c      	ite	eq
 800bbe8:	2301      	moveq	r3, #1
 800bbea:	2300      	movne	r3, #0
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	461a      	mov	r2, r3
 800bbf0:	79fb      	ldrb	r3, [r7, #7]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d092      	beq.n	800bb1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc00:	b084      	sub	sp, #16
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
 800bc0a:	f107 001c 	add.w	r0, r7, #28
 800bc0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d120      	bne.n	800bc5a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	68da      	ldr	r2, [r3, #12]
 800bc28:	4b20      	ldr	r3, [pc, #128]	; (800bcac <USB_CoreInit+0xac>)
 800bc2a:	4013      	ands	r3, r2
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bc3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d105      	bne.n	800bc4e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 fa52 	bl	800c0f8 <USB_CoreReset>
 800bc54:	4603      	mov	r3, r0
 800bc56:	73fb      	strb	r3, [r7, #15]
 800bc58:	e010      	b.n	800bc7c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 fa46 	bl	800c0f8 <USB_CoreReset>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d10b      	bne.n	800bc9a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	f043 0206 	orr.w	r2, r3, #6
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	f043 0220 	orr.w	r2, r3, #32
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bca6:	b004      	add	sp, #16
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	ffbdffbf 	.word	0xffbdffbf

0800bcb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	689b      	ldr	r3, [r3, #8]
 800bcbc:	f023 0201 	bic.w	r2, r3, #1
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b082      	sub	sp, #8
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bcea:	78fb      	ldrb	r3, [r7, #3]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d106      	bne.n	800bcfe <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	60da      	str	r2, [r3, #12]
 800bcfc:	e00b      	b.n	800bd16 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bcfe:	78fb      	ldrb	r3, [r7, #3]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d106      	bne.n	800bd12 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	60da      	str	r2, [r3, #12]
 800bd10:	e001      	b.n	800bd16 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e003      	b.n	800bd1e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bd16:	2032      	movs	r0, #50	; 0x32
 800bd18:	f7fd f870 	bl	8008dfc <HAL_Delay>

  return HAL_OK;
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
	...

0800bd28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd28:	b084      	sub	sp, #16
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b086      	sub	sp, #24
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bd36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bd42:	2300      	movs	r3, #0
 800bd44:	613b      	str	r3, [r7, #16]
 800bd46:	e009      	b.n	800bd5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	3340      	adds	r3, #64	; 0x40
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	2200      	movs	r2, #0
 800bd54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	613b      	str	r3, [r7, #16]
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	2b0e      	cmp	r3, #14
 800bd60:	d9f2      	bls.n	800bd48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bd62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d11c      	bne.n	800bda2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd76:	f043 0302 	orr.w	r3, r3, #2
 800bd7a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd80:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	601a      	str	r2, [r3, #0]
 800bda0:	e005      	b.n	800bdae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc8:	461a      	mov	r2, r3
 800bdca:	680b      	ldr	r3, [r1, #0]
 800bdcc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d10c      	bne.n	800bdee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d104      	bne.n	800bde4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bdda:	2100      	movs	r1, #0
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f959 	bl	800c094 <USB_SetDevSpeed>
 800bde2:	e018      	b.n	800be16 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bde4:	2101      	movs	r1, #1
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 f954 	bl	800c094 <USB_SetDevSpeed>
 800bdec:	e013      	b.n	800be16 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800bdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf0:	2b03      	cmp	r3, #3
 800bdf2:	d10c      	bne.n	800be0e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d104      	bne.n	800be04 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bdfa:	2100      	movs	r1, #0
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 f949 	bl	800c094 <USB_SetDevSpeed>
 800be02:	e008      	b.n	800be16 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800be04:	2101      	movs	r1, #1
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 f944 	bl	800c094 <USB_SetDevSpeed>
 800be0c:	e003      	b.n	800be16 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800be0e:	2103      	movs	r1, #3
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f93f 	bl	800c094 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800be16:	2110      	movs	r1, #16
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 f8f3 	bl	800c004 <USB_FlushTxFifo>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d001      	beq.n	800be28 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800be24:	2301      	movs	r3, #1
 800be26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 f911 	bl	800c050 <USB_FlushRxFifo>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d001      	beq.n	800be38 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800be34:	2301      	movs	r3, #1
 800be36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be3e:	461a      	mov	r2, r3
 800be40:	2300      	movs	r3, #0
 800be42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be4a:	461a      	mov	r2, r3
 800be4c:	2300      	movs	r3, #0
 800be4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be56:	461a      	mov	r2, r3
 800be58:	2300      	movs	r3, #0
 800be5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be5c:	2300      	movs	r3, #0
 800be5e:	613b      	str	r3, [r7, #16]
 800be60:	e043      	b.n	800beea <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	015a      	lsls	r2, r3, #5
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	4413      	add	r3, r2
 800be6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be78:	d118      	bne.n	800beac <USB_DevInit+0x184>
    {
      if (i == 0U)
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10a      	bne.n	800be96 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	015a      	lsls	r2, r3, #5
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	4413      	add	r3, r2
 800be88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be8c:	461a      	mov	r2, r3
 800be8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be92:	6013      	str	r3, [r2, #0]
 800be94:	e013      	b.n	800bebe <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	015a      	lsls	r2, r3, #5
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	4413      	add	r3, r2
 800be9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea2:	461a      	mov	r2, r3
 800bea4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bea8:	6013      	str	r3, [r2, #0]
 800beaa:	e008      	b.n	800bebe <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	015a      	lsls	r2, r3, #5
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	4413      	add	r3, r2
 800beb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb8:	461a      	mov	r2, r3
 800beba:	2300      	movs	r3, #0
 800bebc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	015a      	lsls	r2, r3, #5
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	4413      	add	r3, r2
 800bec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beca:	461a      	mov	r2, r3
 800becc:	2300      	movs	r3, #0
 800bece:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	015a      	lsls	r2, r3, #5
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4413      	add	r3, r2
 800bed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bedc:	461a      	mov	r2, r3
 800bede:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bee2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	3301      	adds	r3, #1
 800bee8:	613b      	str	r3, [r7, #16]
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	693a      	ldr	r2, [r7, #16]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d3b7      	bcc.n	800be62 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bef2:	2300      	movs	r3, #0
 800bef4:	613b      	str	r3, [r7, #16]
 800bef6:	e043      	b.n	800bf80 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	015a      	lsls	r2, r3, #5
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	4413      	add	r3, r2
 800bf00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf0e:	d118      	bne.n	800bf42 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10a      	bne.n	800bf2c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	015a      	lsls	r2, r3, #5
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf22:	461a      	mov	r2, r3
 800bf24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bf28:	6013      	str	r3, [r2, #0]
 800bf2a:	e013      	b.n	800bf54 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	015a      	lsls	r2, r3, #5
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	4413      	add	r3, r2
 800bf34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf38:	461a      	mov	r2, r3
 800bf3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	e008      	b.n	800bf54 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	015a      	lsls	r2, r3, #5
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	4413      	add	r3, r2
 800bf4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf4e:	461a      	mov	r2, r3
 800bf50:	2300      	movs	r3, #0
 800bf52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	015a      	lsls	r2, r3, #5
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf60:	461a      	mov	r2, r3
 800bf62:	2300      	movs	r3, #0
 800bf64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	015a      	lsls	r2, r3, #5
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf72:	461a      	mov	r2, r3
 800bf74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	613b      	str	r3, [r7, #16]
 800bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf82:	693a      	ldr	r2, [r7, #16]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d3b7      	bcc.n	800bef8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf8e:	691b      	ldr	r3, [r3, #16]
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bfa8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d105      	bne.n	800bfbc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	699b      	ldr	r3, [r3, #24]
 800bfb4:	f043 0210 	orr.w	r2, r3, #16
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	699a      	ldr	r2, [r3, #24]
 800bfc0:	4b0e      	ldr	r3, [pc, #56]	; (800bffc <USB_DevInit+0x2d4>)
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bfc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d005      	beq.n	800bfda <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	699b      	ldr	r3, [r3, #24]
 800bfd2:	f043 0208 	orr.w	r2, r3, #8
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bfda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d105      	bne.n	800bfec <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	699a      	ldr	r2, [r3, #24]
 800bfe4:	4b06      	ldr	r3, [pc, #24]	; (800c000 <USB_DevInit+0x2d8>)
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bfec:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3718      	adds	r7, #24
 800bff2:	46bd      	mov	sp, r7
 800bff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bff8:	b004      	add	sp, #16
 800bffa:	4770      	bx	lr
 800bffc:	803c3800 	.word	0x803c3800
 800c000:	40000004 	.word	0x40000004

0800c004 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c00e:	2300      	movs	r3, #0
 800c010:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	019b      	lsls	r3, r3, #6
 800c016:	f043 0220 	orr.w	r2, r3, #32
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3301      	adds	r3, #1
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	4a09      	ldr	r2, [pc, #36]	; (800c04c <USB_FlushTxFifo+0x48>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d901      	bls.n	800c030 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c02c:	2303      	movs	r3, #3
 800c02e:	e006      	b.n	800c03e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	f003 0320 	and.w	r3, r3, #32
 800c038:	2b20      	cmp	r3, #32
 800c03a:	d0f0      	beq.n	800c01e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3714      	adds	r7, #20
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr
 800c04a:	bf00      	nop
 800c04c:	00030d40 	.word	0x00030d40

0800c050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2210      	movs	r2, #16
 800c060:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	3301      	adds	r3, #1
 800c066:	60fb      	str	r3, [r7, #12]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	4a09      	ldr	r2, [pc, #36]	; (800c090 <USB_FlushRxFifo+0x40>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d901      	bls.n	800c074 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c070:	2303      	movs	r3, #3
 800c072:	e006      	b.n	800c082 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	f003 0310 	and.w	r3, r3, #16
 800c07c:	2b10      	cmp	r3, #16
 800c07e:	d0f0      	beq.n	800c062 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c080:	2300      	movs	r3, #0
}
 800c082:	4618      	mov	r0, r3
 800c084:	3714      	adds	r7, #20
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	00030d40 	.word	0x00030d40

0800c094 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	460b      	mov	r3, r1
 800c09e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	78fb      	ldrb	r3, [r7, #3]
 800c0ae:	68f9      	ldr	r1, [r7, #12]
 800c0b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3714      	adds	r7, #20
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b084      	sub	sp, #16
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	68fa      	ldr	r2, [r7, #12]
 800c0dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0e0:	f043 0302 	orr.w	r3, r3, #2
 800c0e4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c0e6:	2003      	movs	r0, #3
 800c0e8:	f7fc fe88 	bl	8008dfc <HAL_Delay>

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
	...

0800c0f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c100:	2300      	movs	r3, #0
 800c102:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	3301      	adds	r3, #1
 800c108:	60fb      	str	r3, [r7, #12]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	4a13      	ldr	r2, [pc, #76]	; (800c15c <USB_CoreReset+0x64>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d901      	bls.n	800c116 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c112:	2303      	movs	r3, #3
 800c114:	e01b      	b.n	800c14e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	daf2      	bge.n	800c104 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c11e:	2300      	movs	r3, #0
 800c120:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	f043 0201 	orr.w	r2, r3, #1
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3301      	adds	r3, #1
 800c132:	60fb      	str	r3, [r7, #12]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	4a09      	ldr	r2, [pc, #36]	; (800c15c <USB_CoreReset+0x64>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d901      	bls.n	800c140 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c13c:	2303      	movs	r3, #3
 800c13e:	e006      	b.n	800c14e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	691b      	ldr	r3, [r3, #16]
 800c144:	f003 0301 	and.w	r3, r3, #1
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d0f0      	beq.n	800c12e <USB_CoreReset+0x36>

  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	00030d40 	.word	0x00030d40

0800c160 <__libc_init_array>:
 800c160:	b570      	push	{r4, r5, r6, lr}
 800c162:	4e0d      	ldr	r6, [pc, #52]	; (800c198 <__libc_init_array+0x38>)
 800c164:	4c0d      	ldr	r4, [pc, #52]	; (800c19c <__libc_init_array+0x3c>)
 800c166:	1ba4      	subs	r4, r4, r6
 800c168:	10a4      	asrs	r4, r4, #2
 800c16a:	2500      	movs	r5, #0
 800c16c:	42a5      	cmp	r5, r4
 800c16e:	d109      	bne.n	800c184 <__libc_init_array+0x24>
 800c170:	4e0b      	ldr	r6, [pc, #44]	; (800c1a0 <__libc_init_array+0x40>)
 800c172:	4c0c      	ldr	r4, [pc, #48]	; (800c1a4 <__libc_init_array+0x44>)
 800c174:	f000 f820 	bl	800c1b8 <_init>
 800c178:	1ba4      	subs	r4, r4, r6
 800c17a:	10a4      	asrs	r4, r4, #2
 800c17c:	2500      	movs	r5, #0
 800c17e:	42a5      	cmp	r5, r4
 800c180:	d105      	bne.n	800c18e <__libc_init_array+0x2e>
 800c182:	bd70      	pop	{r4, r5, r6, pc}
 800c184:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c188:	4798      	blx	r3
 800c18a:	3501      	adds	r5, #1
 800c18c:	e7ee      	b.n	800c16c <__libc_init_array+0xc>
 800c18e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c192:	4798      	blx	r3
 800c194:	3501      	adds	r5, #1
 800c196:	e7f2      	b.n	800c17e <__libc_init_array+0x1e>
 800c198:	0800c1f0 	.word	0x0800c1f0
 800c19c:	0800c1f0 	.word	0x0800c1f0
 800c1a0:	0800c1f0 	.word	0x0800c1f0
 800c1a4:	0800c1f4 	.word	0x0800c1f4

0800c1a8 <memset>:
 800c1a8:	4402      	add	r2, r0
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d100      	bne.n	800c1b2 <memset+0xa>
 800c1b0:	4770      	bx	lr
 800c1b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c1b6:	e7f9      	b.n	800c1ac <memset+0x4>

0800c1b8 <_init>:
 800c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ba:	bf00      	nop
 800c1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1be:	bc08      	pop	{r3}
 800c1c0:	469e      	mov	lr, r3
 800c1c2:	4770      	bx	lr

0800c1c4 <_fini>:
 800c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1c6:	bf00      	nop
 800c1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ca:	bc08      	pop	{r3}
 800c1cc:	469e      	mov	lr, r3
 800c1ce:	4770      	bx	lr
