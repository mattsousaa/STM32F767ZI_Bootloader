
01_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e4c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800504c  0800504c  0001504c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051bc  080051bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051c4  080051c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c8  080051c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000668  20000070  0800523c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d8  0800523c  000206d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010078  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000251f  00000000  00000000  00030116  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d00  00000000  00000000  00032638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  00033338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000293c7  00000000  00000000  00033f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be74  00000000  00000000  0005d2c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdccc  00000000  00000000  0006913b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00166e07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e4  00000000  00000000  00166e84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005034 	.word	0x08005034

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005034 	.word	0x08005034

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
char somedata[] = "Hello from Bootloader\r\n";

#define BL_RX_LEN  200
uint8_t bl_rx_buffer[BL_RX_LEN];

int main(void){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f4:	f000 fd73 	bl	80010de <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80005f8:	f000 f8a2 	bl	8000740 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005fc:	f000 fa24 	bl	8000a48 <MX_GPIO_Init>
	MX_ETH_Init();
 8000600:	f000 f958 	bl	80008b4 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000604:	f000 f996 	bl	8000934 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000608:	f000 f9f4 	bl	80009f4 <MX_USB_OTG_FS_PCD_Init>
	MX_CRC_Init();
 800060c:	f000 f930 	bl	8000870 <MX_CRC_Init>
	MX_USART6_UART_Init();
 8000610:	f000 f9c0 	bl	8000994 <MX_USART6_UART_Init>
//		uint32_t current_tick = HAL_GetTick();
//		printmsg("current_tick = %d\r\n", current_tick);
//		while (HAL_GetTick() <= (current_tick + 500));
//
//	}
	if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <main+0x50>)
 800061a:	f001 fdc5 	bl	80021a8 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d105      	bne.n	8000630 <main+0x40>
		printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r");
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <main+0x54>)
 8000626:	f000 fab9 	bl	8000b9c <printmsg>

		//we should continue in bootloader mode
		bootloader_uart_read_data();
 800062a:	f000 f80f 	bl	800064c <bootloader_uart_read_data>
 800062e:	e004      	b.n	800063a <main+0x4a>
	} else{
		printmsg("BL_DEBUG_MSG:Button is not pressed .. executing user app\n");
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <main+0x58>)
 8000632:	f000 fab3 	bl	8000b9c <printmsg>

		//jump to user application
		bootloader_jump_to_user_app();
 8000636:	f000 f857 	bl	80006e8 <bootloader_jump_to_user_app>
 800063a:	2300      	movs	r3, #0
	}
}
 800063c:	4618      	mov	r0, r3
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020800 	.word	0x40020800
 8000644:	0800504c 	.word	0x0800504c
 8000648:	08005084 	.word	0x08005084

0800064c <bootloader_uart_read_data>:

void bootloader_uart_read_data(void){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0

	uint8_t rcv_len = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	71fb      	strb	r3, [r7, #7]

	while(1){
		memset(bl_rx_buffer, 0, 200);
 8000656:	22c8      	movs	r2, #200	; 0xc8
 8000658:	2100      	movs	r1, #0
 800065a:	481f      	ldr	r0, [pc, #124]	; (80006d8 <bootloader_uart_read_data+0x8c>)
 800065c:	f004 f8dc 	bl	8004818 <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host, which is the "length" field of the command packet
		HAL_UART_Receive(C_UART, bl_rx_buffer, 1, HAL_MAX_DELAY);
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	2201      	movs	r2, #1
 8000666:	491c      	ldr	r1, [pc, #112]	; (80006d8 <bootloader_uart_read_data+0x8c>)
 8000668:	481c      	ldr	r0, [pc, #112]	; (80006dc <bootloader_uart_read_data+0x90>)
 800066a:	f003 f922 	bl	80038b2 <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <bootloader_uart_read_data+0x8c>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART, &bl_rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	b29a      	uxth	r2, r3
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	4918      	ldr	r1, [pc, #96]	; (80006e0 <bootloader_uart_read_data+0x94>)
 800067e:	4817      	ldr	r0, [pc, #92]	; (80006dc <bootloader_uart_read_data+0x90>)
 8000680:	f003 f917 	bl	80038b2 <HAL_UART_Receive>

		switch(bl_rx_buffer[1]){
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <bootloader_uart_read_data+0x8c>)
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	3b51      	subs	r3, #81	; 0x51
 800068a:	2b0b      	cmp	r3, #11
 800068c:	d81e      	bhi.n	80006cc <bootloader_uart_read_data+0x80>
 800068e:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <bootloader_uart_read_data+0x48>)
 8000690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000694:	080006c5 	.word	0x080006c5
 8000698:	080006d5 	.word	0x080006d5
 800069c:	080006d5 	.word	0x080006d5
 80006a0:	080006d5 	.word	0x080006d5
 80006a4:	080006d5 	.word	0x080006d5
 80006a8:	080006d5 	.word	0x080006d5
 80006ac:	080006d5 	.word	0x080006d5
 80006b0:	080006d5 	.word	0x080006d5
 80006b4:	080006d5 	.word	0x080006d5
 80006b8:	080006d5 	.word	0x080006d5
 80006bc:	080006d5 	.word	0x080006d5
 80006c0:	080006d5 	.word	0x080006d5
			case BL_GET_VER:
				bootloader_handle_getver_cmd(bl_rx_buffer);
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <bootloader_uart_read_data+0x8c>)
 80006c6:	f000 fa8f 	bl	8000be8 <bootloader_handle_getver_cmd>
				break;
 80006ca:	e004      	b.n	80006d6 <bootloader_uart_read_data+0x8a>
				break;
			case BL_DIS_R_W_PROTECT:
				//bootloader_handle_dis_rw_protect(bl_rx_buffer);
				break;
			default:
				printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <bootloader_uart_read_data+0x98>)
 80006ce:	f000 fa65 	bl	8000b9c <printmsg>
				break;
 80006d2:	e000      	b.n	80006d6 <bootloader_uart_read_data+0x8a>
				break;
 80006d4:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 80006d6:	e7be      	b.n	8000656 <bootloader_uart_read_data+0xa>
 80006d8:	20000608 	.word	0x20000608
 80006dc:	20000098 	.word	0x20000098
 80006e0:	20000609 	.word	0x20000609
 80006e4:	080050c0 	.word	0x080050c0

080006e8 <bootloader_jump_to_user_app>:

/* Code to jump to user application
 * Here we are assuming FLASH_SECTOR2_BASE_ADDRESS
 * is where the user application is stored
 */
void bootloader_jump_to_user_app(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

	//just a function pointer to hold the address of the reset handler of the user app.
	void (*app_reset_handler)(void);

	printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 80006ee:	480f      	ldr	r0, [pc, #60]	; (800072c <bootloader_jump_to_user_app+0x44>)
 80006f0:	f000 fa54 	bl	8000b9c <printmsg>

	// 1. configure the MSP by reading the value from the base address of the sector 1
	uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR1_BASE_ADDRESS;
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <bootloader_jump_to_user_app+0x48>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	60fb      	str	r3, [r7, #12]
	printmsg("BL_DEBUG_MSG:MSP value : %#x\n", msp_value);
 80006fa:	68f9      	ldr	r1, [r7, #12]
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <bootloader_jump_to_user_app+0x4c>)
 80006fe:	f000 fa4d 	bl	8000b9c <printmsg>
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	f383 8808 	msr	MSP, r3
	//SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address = *(volatile uint32_t*)(FLASH_SECTOR1_BASE_ADDRESS + 4);
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <bootloader_jump_to_user_app+0x50>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void*) resethandler_address;
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	607b      	str	r3, [r7, #4]

	printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n", app_reset_handler);
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <bootloader_jump_to_user_app+0x54>)
 800071a:	f000 fa3f 	bl	8000b9c <printmsg>

	//3. jump to reset handler of the user application
	app_reset_handler();
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4798      	blx	r3
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	080050f8 	.word	0x080050f8
 8000730:	08008000 	.word	0x08008000
 8000734:	08005124 	.word	0x08005124
 8000738:	08008004 	.word	0x08008004
 800073c:	08005144 	.word	0x08005144

08000740 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void){
 8000740:	b580      	push	{r7, lr}
 8000742:	b0b8      	sub	sp, #224	; 0xe0
 8000744:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800074a:	2234      	movs	r2, #52	; 0x34
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f004 f862 	bl	8004818 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	2290      	movs	r2, #144	; 0x90
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f004 f853 	bl	8004818 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000772:	f001 fe93 	bl	800249c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000776:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <SystemClock_Config+0x124>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a3a      	ldr	r2, [pc, #232]	; (8000864 <SystemClock_Config+0x124>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b38      	ldr	r3, [pc, #224]	; (8000864 <SystemClock_Config+0x124>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800078e:	4b36      	ldr	r3, [pc, #216]	; (8000868 <SystemClock_Config+0x128>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000796:	4a34      	ldr	r2, [pc, #208]	; (8000868 <SystemClock_Config+0x128>)
 8000798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	4b32      	ldr	r3, [pc, #200]	; (8000868 <SystemClock_Config+0x128>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007aa:	2301      	movs	r3, #1
 80007ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007c6:	2304      	movs	r3, #4
 80007c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 80007cc:	2360      	movs	r3, #96	; 0x60
 80007ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d8:	2304      	movs	r3, #4
 80007da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 80007de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 feba 	bl	800255c <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xb2>
		Error_Handler();
 80007ee:	f000 f9cd 	bl	8000b8c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if(HAL_PWREx_EnableOverDrive() != HAL_OK){
 80007f2:	f001 fe63 	bl	80024bc <HAL_PWREx_EnableOverDrive>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xc0>
		Error_Handler();
 80007fc:	f000 f9c6 	bl	8000b8c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
								| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK){
 8000820:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000824:	2103      	movs	r1, #3
 8000826:	4618      	mov	r0, r3
 8000828:	f002 f946 	bl	8002ab8 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xf6>
		Error_Handler();
 8000832:	f000 f9ab 	bl	8000b8c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <SystemClock_Config+0x12c>)
 8000838:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART6 | RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800083a:	2300      	movs	r3, #0
 800083c:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800083e:	2300      	movs	r3, #0
 8000840:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000842:	2300      	movs	r3, #0
 8000844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	4618      	mov	r0, r3
 800084e:	f002 fb2b 	bl	8002ea8 <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x11c>
		Error_Handler();
 8000858:	f000 f998 	bl	8000b8c <Error_Handler>
	}
}
 800085c:	bf00      	nop
 800085e:	37e0      	adds	r7, #224	; 0xe0
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000
 800086c:	00200900 	.word	0x00200900

08000870 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

	hcrc.Instance = CRC;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_CRC_Init+0x3c>)
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <MX_CRC_Init+0x40>)
 8000878:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_CRC_Init+0x3c>)
 800087c:	2200      	movs	r2, #0
 800087e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_CRC_Init+0x3c>)
 8000882:	2200      	movs	r2, #0
 8000884:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_CRC_Init+0x3c>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_CRC_Init+0x3c>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_CRC_Init+0x3c>)
 8000894:	2201      	movs	r2, #1
 8000896:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK){
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_CRC_Init+0x3c>)
 800089a:	f000 fd85 	bl	80013a8 <HAL_CRC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_CRC_Init+0x38>
		Error_Handler();
 80008a4:	f000 f972 	bl	8000b8c <Error_Handler>
	}
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000051c 	.word	0x2000051c
 80008b0:	40023000 	.word	0x40023000

080008b4 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

	heth.Instance = ETH;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_ETH_Init+0x78>)
 80008ba:	4a1d      	ldr	r2, [pc, #116]	; (8000930 <MX_ETH_Init+0x7c>)
 80008bc:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_ETH_Init+0x78>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	605a      	str	r2, [r3, #4]
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80008c4:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_ETH_Init+0x78>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	821a      	strh	r2, [r3, #16]
	heth.Init.MACAddr[0] = 0x00;
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_ETH_Init+0x78>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[1] = 0x80;
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_ETH_Init+0x78>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	3301      	adds	r3, #1
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[2] = 0xE1;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_ETH_Init+0x78>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	3302      	adds	r3, #2
 80008e2:	22e1      	movs	r2, #225	; 0xe1
 80008e4:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[3] = 0x00;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_ETH_Init+0x78>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	3303      	adds	r3, #3
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[4] = 0x00;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_ETH_Init+0x78>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	3304      	adds	r3, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
	heth.Init.MACAddr[5] = 0x00;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_ETH_Init+0x78>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	3305      	adds	r3, #5
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
	heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_ETH_Init+0x78>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_ETH_Init+0x78>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_ETH_Init+0x78>)
 8000912:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000916:	621a      	str	r2, [r3, #32]

	if(HAL_ETH_Init(&heth) != HAL_OK){
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_ETH_Init+0x78>)
 800091a:	f000 fe2f 	bl	800157c <HAL_ETH_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ETH_Init+0x74>
		Error_Handler();
 8000924:	f000 f932 	bl	8000b8c <Error_Handler>
	}
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200005c0 	.word	0x200005c0
 8000930:	40028000 	.word	0x40028000

08000934 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

	huart3.Instance = USART3;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART3_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART3_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART3_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART3_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
	if(HAL_UART_Init(&huart3) != HAL_OK){
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000978:	f002 febc 	bl	80036f4 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000982:	f000 f903 	bl	8000b8c <Error_Handler>
	}
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000098 	.word	0x20000098
 8000990:	40004800 	.word	0x40004800

08000994 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void){
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

	huart6.Instance = USART6;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_USART6_UART_Init+0x58>)
 800099a:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <MX_USART6_UART_Init+0x5c>)
 800099c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_USART6_UART_Init+0x58>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART6_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_USART6_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART6_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART6_UART_Init+0x58>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART6_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART6_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART6_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART6_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK){
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART6_UART_Init+0x58>)
 80009d8:	f002 fe8c 	bl	80036f4 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART6_UART_Init+0x52>
		Error_Handler();
 80009e2:	f000 f8d3 	bl	8000b8c <Error_Handler>
	}
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000540 	.word	0x20000540
 80009f0:	40011400 	.word	0x40011400

080009f4 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

	hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80009fa:	2206      	movs	r2, #6
 80009fc:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000a30:	f001 fbeb 	bl	800220a <HAL_PCD_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USB_OTG_FS_PCD_Init+0x4a>
		Error_Handler();
 8000a3a:	f000 f8a7 	bl	8000b8c <Error_Handler>
	}
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000118 	.word	0x20000118

08000a48 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b46      	ldr	r3, [pc, #280]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a45      	ldr	r2, [pc, #276]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b43      	ldr	r3, [pc, #268]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a76:	4b40      	ldr	r3, [pc, #256]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a3f      	ldr	r2, [pc, #252]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b3a      	ldr	r3, [pc, #232]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a39      	ldr	r2, [pc, #228]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b37      	ldr	r3, [pc, #220]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a33      	ldr	r2, [pc, #204]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000aac:	f043 0302 	orr.w	r3, r3, #2
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000abe:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a2d      	ldr	r2, [pc, #180]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a27      	ldr	r2, [pc, #156]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <MX_GPIO_Init+0x130>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000af4:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_GPIO_Init+0x134>)
 8000af6:	f001 fb6f 	bl	80021d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2140      	movs	r1, #64	; 0x40
 8000afe:	4820      	ldr	r0, [pc, #128]	; (8000b80 <MX_GPIO_Init+0x138>)
 8000b00:	f001 fb6a 	bl	80021d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b08:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_GPIO_Init+0x13c>)
 8000b0c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	481b      	ldr	r0, [pc, #108]	; (8000b88 <MX_GPIO_Init+0x140>)
 8000b1a:	f001 f99b 	bl	8001e54 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000b1e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4811      	ldr	r0, [pc, #68]	; (8000b7c <MX_GPIO_Init+0x134>)
 8000b38:	f001 f98c 	bl	8001e54 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b3c:	2340      	movs	r3, #64	; 0x40
 8000b3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <MX_GPIO_Init+0x138>)
 8000b54:	f001 f97e 	bl	8001e54 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_GPIO_Init+0x138>)
 8000b6c:	f001 f972 	bl	8001e54 <HAL_GPIO_Init>

}
 8000b70:	bf00      	nop
 8000b72:	3730      	adds	r7, #48	; 0x30
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40021800 	.word	0x40021800
 8000b84:	10110000 	.word	0x10110000
 8000b88:	40020800 	.word	0x40020800

08000b8c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void){
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <printmsg>:

/*Prints formatted string to console over UART */
void printmsg(char *format, ...){
 8000b9c:	b40f      	push	{r0, r1, r2, r3}
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b096      	sub	sp, #88	; 0x58
 8000ba2:	af00      	add	r7, sp, #0

#ifdef BL_DEBUG_MSG_EN
	char str[80];
	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000ba4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba8:	607b      	str	r3, [r7, #4]
	vsprintf(str, format, args);
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f003 fe4e 	bl	8004854 <vsiprintf>
	HAL_UART_Transmit(D_UART, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fb3f 	bl	8000240 <strlen>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	f107 0108 	add.w	r1, r7, #8
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <printmsg+0x48>)
 8000bd0:	f002 fdde 	bl	8003790 <HAL_UART_Transmit>
	va_end(args);
#endif

}
 8000bd4:	bf00      	nop
 8000bd6:	3758      	adds	r7, #88	; 0x58
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bde:	b004      	add	sp, #16
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000540 	.word	0x20000540

08000be8 <bootloader_handle_getver_cmd>:

/**************Implementation of Boot-loader Command Handle functions *********/

/*Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer){
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_CRC_MspInit+0x38>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d10b      	bne.n	8000c6e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_CRC_MspInit+0x3c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <HAL_CRC_MspInit+0x3c>)
 8000c5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <HAL_CRC_MspInit+0x3c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023000 	.word	0x40023000
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08e      	sub	sp, #56	; 0x38
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a4e      	ldr	r2, [pc, #312]	; (8000ddc <HAL_ETH_MspInit+0x158>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	f040 8096 	bne.w	8000dd4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ca8:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	4a4c      	ldr	r2, [pc, #304]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000cae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb4:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cbc:	623b      	str	r3, [r7, #32]
 8000cbe:	6a3b      	ldr	r3, [r7, #32]
 8000cc0:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a46      	ldr	r2, [pc, #280]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000cc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ccc:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cd4:	61fb      	str	r3, [r7, #28]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	4a40      	ldr	r2, [pc, #256]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000cde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce4:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf0:	4b3b      	ldr	r3, [pc, #236]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	4a3a      	ldr	r2, [pc, #232]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfc:	4b38      	ldr	r3, [pc, #224]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	4a34      	ldr	r2, [pc, #208]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6313      	str	r3, [r2, #48]	; 0x30
 8000d14:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	4a2e      	ldr	r2, [pc, #184]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000d26:	f043 0302 	orr.w	r3, r3, #2
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a28      	ldr	r2, [pc, #160]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
 8000d44:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <HAL_ETH_MspInit+0x15c>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d50:	2332      	movs	r3, #50	; 0x32
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d60:	230b      	movs	r3, #11
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d68:	4619      	mov	r1, r3
 8000d6a:	481e      	ldr	r0, [pc, #120]	; (8000de4 <HAL_ETH_MspInit+0x160>)
 8000d6c:	f001 f872 	bl	8001e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d70:	2386      	movs	r3, #134	; 0x86
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d80:	230b      	movs	r3, #11
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4817      	ldr	r0, [pc, #92]	; (8000de8 <HAL_ETH_MspInit+0x164>)
 8000d8c:	f001 f862 	bl	8001e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da2:	230b      	movs	r3, #11
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	480f      	ldr	r0, [pc, #60]	; (8000dec <HAL_ETH_MspInit+0x168>)
 8000dae:	f001 f851 	bl	8001e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000db2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4808      	ldr	r0, [pc, #32]	; (8000df0 <HAL_ETH_MspInit+0x16c>)
 8000dd0:	f001 f840 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3738      	adds	r7, #56	; 0x38
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40028000 	.word	0x40028000
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020400 	.word	0x40020400
 8000df0:	40021800 	.word	0x40021800

08000df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a2e      	ldr	r2, [pc, #184]	; (8000ecc <HAL_UART_MspInit+0xd8>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d129      	bne.n	8000e6a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <HAL_UART_MspInit+0xdc>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a2d      	ldr	r2, [pc, #180]	; (8000ed0 <HAL_UART_MspInit+0xdc>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b2b      	ldr	r3, [pc, #172]	; (8000ed0 <HAL_UART_MspInit+0xdc>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2a:	61bb      	str	r3, [r7, #24]
 8000e2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <HAL_UART_MspInit+0xdc>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <HAL_UART_MspInit+0xdc>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <HAL_UART_MspInit+0xdc>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	481c      	ldr	r0, [pc, #112]	; (8000ed4 <HAL_UART_MspInit+0xe0>)
 8000e64:	f000 fff6 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000e68:	e02c      	b.n	8000ec4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART6)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <HAL_UART_MspInit+0xe4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d127      	bne.n	8000ec4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <HAL_UART_MspInit+0xdc>)
 8000e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e78:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <HAL_UART_MspInit+0xdc>)
 8000e7a:	f043 0320 	orr.w	r3, r3, #32
 8000e7e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <HAL_UART_MspInit+0xdc>)
 8000e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e84:	f003 0320 	and.w	r3, r3, #32
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <HAL_UART_MspInit+0xdc>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <HAL_UART_MspInit+0xdc>)
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	6313      	str	r3, [r2, #48]	; 0x30
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <HAL_UART_MspInit+0xdc>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea4:	23c0      	movs	r3, #192	; 0xc0
 8000ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4807      	ldr	r0, [pc, #28]	; (8000edc <HAL_UART_MspInit+0xe8>)
 8000ec0:	f000 ffc8 	bl	8001e54 <HAL_GPIO_Init>
}
 8000ec4:	bf00      	nop
 8000ec6:	3730      	adds	r7, #48	; 0x30
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40004800 	.word	0x40004800
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	40011400 	.word	0x40011400
 8000edc:	40020800 	.word	0x40020800

08000ee0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f00:	d141      	bne.n	8000f86 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <HAL_PCD_MspInit+0xb0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <HAL_PCD_MspInit+0xb0>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_PCD_MspInit+0xb0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f1a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4817      	ldr	r0, [pc, #92]	; (8000f94 <HAL_PCD_MspInit+0xb4>)
 8000f38:	f000 ff8c 	bl	8001e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4810      	ldr	r0, [pc, #64]	; (8000f94 <HAL_PCD_MspInit+0xb4>)
 8000f52:	f000 ff7f 	bl	8001e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_PCD_MspInit+0xb0>)
 8000f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_PCD_MspInit+0xb0>)
 8000f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f60:	6353      	str	r3, [r2, #52]	; 0x34
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_PCD_MspInit+0xb0>)
 8000f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_PCD_MspInit+0xb0>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_PCD_MspInit+0xb0>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_PCD_MspInit+0xb0>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 f8b4 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f003 fbce 	bl	80047c4 <__errno>
 8001028:	4602      	mov	r2, r0
 800102a:	230c      	movs	r3, #12
 800102c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <_sbrk+0x64>)
 8001044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20080000 	.word	0x20080000
 8001054:	00000400 	.word	0x00000400
 8001058:	2000008c 	.word	0x2000008c
 800105c:	200006d8 	.word	0x200006d8

08001060 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <SystemInit+0x28>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <SystemInit+0x28>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <SystemInit+0x28>)
 8001076:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800107a:	609a      	str	r2, [r3, #8]
#endif
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001090:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001092:	e003      	b.n	800109c <LoopCopyDataInit>

08001094 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001096:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001098:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800109a:	3104      	adds	r1, #4

0800109c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010a4:	d3f6      	bcc.n	8001094 <CopyDataInit>
  ldr  r2, =_sbss
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010a8:	e002      	b.n	80010b0 <LoopFillZerobss>

080010aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010ac:	f842 3b04 	str.w	r3, [r2], #4

080010b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010b4:	d3f9      	bcc.n	80010aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010b6:	f7ff ffd3 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ba:	f003 fb89 	bl	80047d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff fa97 	bl	80005f0 <main>
  bx  lr    
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80010c8:	080051cc 	.word	0x080051cc
  ldr  r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010d0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80010d4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80010d8:	200006d8 	.word	0x200006d8

080010dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC_IRQHandler>

080010de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e2:	2003      	movs	r0, #3
 80010e4:	f000 f92c 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f000 f805 	bl	80010f8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80010ee:	f7ff fd85 	bl	8000bfc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x54>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x58>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f939 	bl	800138e <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00e      	b.n	8001144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80a      	bhi.n	8001142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f000 f90f 	bl	8001356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <HAL_InitTick+0x5c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000000 	.word	0x20000000
 8001150:	20000008 	.word	0x20000008
 8001154:	20000004 	.word	0x20000004

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008
 800117c:	200006d0 	.word	0x200006d0

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200006d0 	.word	0x200006d0

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_Delay+0x40>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000008 	.word	0x20000008

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <__NVIC_SetPriorityGrouping+0x40>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	4313      	orrs	r3, r2
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	; (800121c <__NVIC_SetPriorityGrouping+0x40>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00
 8001220:	05fa0000 	.word	0x05fa0000

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	; (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	; (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff8e 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	; (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff47 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff5c 	bl	8001224 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff8e 	bl	8001294 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffb0 	bl	80012fc <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e054      	b.n	8001464 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7f5b      	ldrb	r3, [r3, #29]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d105      	bne.n	80013d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fc3a 	bl	8000c44 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	791b      	ldrb	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10c      	bne.n	80013f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a22      	ldr	r2, [pc, #136]	; (800146c <HAL_CRC_Init+0xc4>)
 80013e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0218 	bic.w	r2, r2, #24
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	e00c      	b.n	8001412 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6899      	ldr	r1, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	461a      	mov	r2, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f834 	bl	8001470 <HAL_CRCEx_Polynomial_Set>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e028      	b.n	8001464 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	795b      	ldrb	r3, [r3, #5]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d105      	bne.n	8001426 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f04f 32ff 	mov.w	r2, #4294967295
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	e004      	b.n	8001430 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6912      	ldr	r2, [r2, #16]
 800142e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699a      	ldr	r2, [r3, #24]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	04c11db7 	.word	0x04c11db7

08001470 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800147c:	2300      	movs	r3, #0
 800147e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001480:	231f      	movs	r3, #31
 8001482:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001484:	bf00      	nop
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	613a      	str	r2, [r7, #16]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d009      	beq.n	80014a4 <HAL_CRCEx_Polynomial_Set+0x34>
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	f003 031f 	and.w	r3, r3, #31
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b18      	cmp	r3, #24
 80014a8:	d846      	bhi.n	8001538 <HAL_CRCEx_Polynomial_Set+0xc8>
 80014aa:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	0800153f 	.word	0x0800153f
 80014b4:	08001539 	.word	0x08001539
 80014b8:	08001539 	.word	0x08001539
 80014bc:	08001539 	.word	0x08001539
 80014c0:	08001539 	.word	0x08001539
 80014c4:	08001539 	.word	0x08001539
 80014c8:	08001539 	.word	0x08001539
 80014cc:	08001539 	.word	0x08001539
 80014d0:	0800152d 	.word	0x0800152d
 80014d4:	08001539 	.word	0x08001539
 80014d8:	08001539 	.word	0x08001539
 80014dc:	08001539 	.word	0x08001539
 80014e0:	08001539 	.word	0x08001539
 80014e4:	08001539 	.word	0x08001539
 80014e8:	08001539 	.word	0x08001539
 80014ec:	08001539 	.word	0x08001539
 80014f0:	08001521 	.word	0x08001521
 80014f4:	08001539 	.word	0x08001539
 80014f8:	08001539 	.word	0x08001539
 80014fc:	08001539 	.word	0x08001539
 8001500:	08001539 	.word	0x08001539
 8001504:	08001539 	.word	0x08001539
 8001508:	08001539 	.word	0x08001539
 800150c:	08001539 	.word	0x08001539
 8001510:	08001515 	.word	0x08001515
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	2b06      	cmp	r3, #6
 8001518:	d913      	bls.n	8001542 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800151e:	e010      	b.n	8001542 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	2b07      	cmp	r3, #7
 8001524:	d90f      	bls.n	8001546 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800152a:	e00c      	b.n	8001546 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b0f      	cmp	r3, #15
 8001530:	d90b      	bls.n	800154a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001536:	e008      	b.n	800154a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	75fb      	strb	r3, [r7, #23]
      break;
 800153c:	e006      	b.n	800154c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800153e:	bf00      	nop
 8001540:	e004      	b.n	800154c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001542:	bf00      	nop
 8001544:	e002      	b.n	800154c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001546:	bf00      	nop
 8001548:	e000      	b.n	800154c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800154a:	bf00      	nop
  }
  if (status == HAL_OK)
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10d      	bne.n	800156e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f023 0118 	bic.w	r1, r3, #24
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	430a      	orrs	r2, r1
 800156c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800156e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001570:	4618      	mov	r0, r3
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800158c:	4ba9      	ldr	r3, [pc, #676]	; (8001834 <HAL_ETH_Init+0x2b8>)
 800158e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e183      	b.n	80018aa <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fb64 	bl	8000c84 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015bc:	4b9e      	ldr	r3, [pc, #632]	; (8001838 <HAL_ETH_Init+0x2bc>)
 80015be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c0:	4a9d      	ldr	r2, [pc, #628]	; (8001838 <HAL_ETH_Init+0x2bc>)
 80015c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c6:	6453      	str	r3, [r2, #68]	; 0x44
 80015c8:	4b9b      	ldr	r3, [pc, #620]	; (8001838 <HAL_ETH_Init+0x2bc>)
 80015ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015d4:	4b99      	ldr	r3, [pc, #612]	; (800183c <HAL_ETH_Init+0x2c0>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	4a98      	ldr	r2, [pc, #608]	; (800183c <HAL_ETH_Init+0x2c0>)
 80015da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015de:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015e0:	4b96      	ldr	r3, [pc, #600]	; (800183c <HAL_ETH_Init+0x2c0>)
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4994      	ldr	r1, [pc, #592]	; (800183c <HAL_ETH_Init+0x2c0>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0201 	orr.w	r2, r2, #1
 8001600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001604:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001606:	f7ff fdbb 	bl	8001180 <HAL_GetTick>
 800160a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800160c:	e011      	b.n	8001632 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800160e:	f7ff fdb7 	bl	8001180 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800161c:	d909      	bls.n	8001632 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2203      	movs	r2, #3
 8001622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e13b      	b.n	80018aa <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e4      	bne.n	800160e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f023 031c 	bic.w	r3, r3, #28
 8001652:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001654:	f001 fbf4 	bl	8002e40 <HAL_RCC_GetHCLKFreq>
 8001658:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4a78      	ldr	r2, [pc, #480]	; (8001840 <HAL_ETH_Init+0x2c4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d908      	bls.n	8001674 <HAL_ETH_Init+0xf8>
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	4a77      	ldr	r2, [pc, #476]	; (8001844 <HAL_ETH_Init+0x2c8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d804      	bhi.n	8001674 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	e027      	b.n	80016c4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	4a73      	ldr	r2, [pc, #460]	; (8001844 <HAL_ETH_Init+0x2c8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d908      	bls.n	800168e <HAL_ETH_Init+0x112>
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	4a72      	ldr	r2, [pc, #456]	; (8001848 <HAL_ETH_Init+0x2cc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d804      	bhi.n	800168e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f043 030c 	orr.w	r3, r3, #12
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	e01a      	b.n	80016c4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	4a6d      	ldr	r2, [pc, #436]	; (8001848 <HAL_ETH_Init+0x2cc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d903      	bls.n	800169e <HAL_ETH_Init+0x122>
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4a6c      	ldr	r2, [pc, #432]	; (800184c <HAL_ETH_Init+0x2d0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d911      	bls.n	80016c2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4a6a      	ldr	r2, [pc, #424]	; (800184c <HAL_ETH_Init+0x2d0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d908      	bls.n	80016b8 <HAL_ETH_Init+0x13c>
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4a69      	ldr	r2, [pc, #420]	; (8001850 <HAL_ETH_Init+0x2d4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d804      	bhi.n	80016b8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	61fb      	str	r3, [r7, #28]
 80016b6:	e005      	b.n	80016c4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	61fb      	str	r3, [r7, #28]
 80016c0:	e000      	b.n	80016c4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80016c2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80016cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016d0:	2100      	movs	r1, #0
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f956 	bl	8001984 <HAL_ETH_WritePHYRegister>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80016e2:	6939      	ldr	r1, [r7, #16]
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f9b3 	bl	8001a50 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0d9      	b.n	80018aa <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80016f6:	20ff      	movs	r0, #255	; 0xff
 80016f8:	f7ff fd4e 	bl	8001198 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80a7 	beq.w	8001854 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001706:	f7ff fd3b 	bl	8001180 <HAL_GetTick>
 800170a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	461a      	mov	r2, r3
 8001712:	2101      	movs	r1, #1
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f8cd 	bl	80018b4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800171a:	f7ff fd31 	bl	8001180 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	; 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d90f      	bls.n	800174c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001730:	6939      	ldr	r1, [r7, #16]
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f98c 	bl	8001a50 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e0ae      	b.n	80018aa <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0da      	beq.n	800170c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001756:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800175a:	2100      	movs	r1, #0
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f911 	bl	8001984 <HAL_ETH_WritePHYRegister>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00b      	beq.n	8001780 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800176c:	6939      	ldr	r1, [r7, #16]
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f96e 	bl	8001a50 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800177c:	2301      	movs	r3, #1
 800177e:	e094      	b.n	80018aa <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001780:	f7ff fcfe 	bl	8001180 <HAL_GetTick>
 8001784:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	461a      	mov	r2, r3
 800178c:	2101      	movs	r1, #1
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f890 	bl	80018b4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001794:	f7ff fcf4 	bl	8001180 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d90f      	bls.n	80017c6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80017aa:	6939      	ldr	r1, [r7, #16]
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f94f 	bl	8001a50 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e071      	b.n	80018aa <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0da      	beq.n	8001786 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	461a      	mov	r2, r3
 80017d6:	211f      	movs	r1, #31
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f86b 	bl	80018b4 <HAL_ETH_ReadPHYRegister>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00b      	beq.n	80017fc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017e8:	6939      	ldr	r1, [r7, #16]
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f930 	bl	8001a50 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80017f8:	2301      	movs	r3, #1
 80017fa:	e056      	b.n	80018aa <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b00      	cmp	r3, #0
 8001804:	d004      	beq.n	8001810 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	e002      	b.n	8001816 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	e037      	b.n	8001898 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	e032      	b.n	8001898 <HAL_ETH_Init+0x31c>
 8001832:	bf00      	nop
 8001834:	03938700 	.word	0x03938700
 8001838:	40023800 	.word	0x40023800
 800183c:	40013800 	.word	0x40013800
 8001840:	01312cff 	.word	0x01312cff
 8001844:	02160ebf 	.word	0x02160ebf
 8001848:	039386ff 	.word	0x039386ff
 800184c:	05f5e0ff 	.word	0x05f5e0ff
 8001850:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001864:	4313      	orrs	r3, r2
 8001866:	b29b      	uxth	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	2100      	movs	r1, #0
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f889 	bl	8001984 <HAL_ETH_WritePHYRegister>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00b      	beq.n	8001890 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800187c:	6939      	ldr	r1, [r7, #16]
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f8e6 	bl	8001a50 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e00c      	b.n	80018aa <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001890:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001894:	f7ff fc80 	bl	8001198 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001898:	6939      	ldr	r1, [r7, #16]
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f8d8 	bl	8001a50 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop

080018b4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	460b      	mov	r3, r1
 80018be:	607a      	str	r2, [r7, #4]
 80018c0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b82      	cmp	r3, #130	; 0x82
 80018d4:	d101      	bne.n	80018da <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80018d6:	2302      	movs	r3, #2
 80018d8:	e050      	b.n	800197c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2282      	movs	r2, #130	; 0x82
 80018de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 031c 	and.w	r3, r3, #28
 80018f0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8a1b      	ldrh	r3, [r3, #16]
 80018f6:	02db      	lsls	r3, r3, #11
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001900:	897b      	ldrh	r3, [r7, #10]
 8001902:	019b      	lsls	r3, r3, #6
 8001904:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	4313      	orrs	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f023 0302 	bic.w	r3, r3, #2
 8001914:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001926:	f7ff fc2b 	bl	8001180 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800192c:	e015      	b.n	800195a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800192e:	f7ff fc27 	bl	8001180 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193c:	d309      	bcc.n	8001952 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e014      	b.n	800197c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e4      	bne.n	800192e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	b29b      	uxth	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	460b      	mov	r3, r1
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b42      	cmp	r3, #66	; 0x42
 80019a4:	d101      	bne.n	80019aa <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
 80019a8:	e04e      	b.n	8001a48 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2242      	movs	r2, #66	; 0x42
 80019ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 031c 	and.w	r3, r3, #28
 80019c0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8a1b      	ldrh	r3, [r3, #16]
 80019c6:	02db      	lsls	r3, r3, #11
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80019d0:	897b      	ldrh	r3, [r7, #10]
 80019d2:	019b      	lsls	r3, r3, #6
 80019d4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	4313      	orrs	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a00:	f7ff fbbe 	bl	8001180 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a06:	e015      	b.n	8001a34 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a08:	f7ff fbba 	bl	8001180 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a16:	d309      	bcc.n	8001a2c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e00d      	b.n	8001a48 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1e4      	bne.n	8001a08 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b0b0      	sub	sp, #192	; 0xc0
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a6c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a74:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d103      	bne.n	8001a9e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9a:	663b      	str	r3, [r7, #96]	; 0x60
 8001a9c:	e001      	b.n	8001aa2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001aac:	2300      	movs	r3, #0
 8001aae:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001abc:	2340      	movs	r3, #64	; 0x40
 8001abe:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001b24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b28:	4bab      	ldr	r3, [pc, #684]	; (8001dd8 <ETH_MACDMAConfig+0x388>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001b34:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001b38:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001b3c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001b42:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001b46:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001b4a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001b50:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001b54:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001b58:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001b5c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001b60:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001b64:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001b66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b78:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff fb07 	bl	8001198 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b92:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b98:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001b9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001b9c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001b9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001ba2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001ba8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001baa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001bae:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001bb4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001bb8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001bc0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bc2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff fae2 	bl	8001198 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bdc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001be6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001bf0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001bfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c00:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c04:	4013      	ands	r3, r2
 8001c06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c0e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001c10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c14:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001c16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001c1a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001c20:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001c26:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001c28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001c2c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c32:	4313      	orrs	r3, r2
 8001c34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c40:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f7ff faa3 	bl	8001198 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c5a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001c5c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001c60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7ff fa8e 	bl	8001198 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c84:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001c8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c8e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001c94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c98:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001caa:	2304      	movs	r3, #4
 8001cac:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f241 0318 	movw	r3, #4120	; 0x1018
 8001cda:	4413      	add	r3, r2
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001ce2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <ETH_MACDMAConfig+0x38c>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001cee:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001cf0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001cf2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001cf4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001cf6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001cf8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001cfa:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001cfc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001cfe:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001d00:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001d02:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001d04:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001d06:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001d0a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001d0e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d22:	4413      	add	r3, r2
 8001d24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d28:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d32:	4413      	add	r3, r2
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7ff fa2c 	bl	8001198 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d48:	4413      	add	r3, r2
 8001d4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d4e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d54:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001d58:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001d5c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001d60:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d64:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001d66:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001d6a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d78:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7ff fa05 	bl	8001198 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d9a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d10d      	bne.n	8001dc0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	f241 031c 	movw	r3, #4124	; 0x101c
 8001dac:	4413      	add	r3, r2
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6811      	ldr	r1, [r2, #0]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <ETH_MACDMAConfig+0x390>)
 8001db6:	431a      	orrs	r2, r3
 8001db8:	f241 031c 	movw	r3, #4124	; 0x101c
 8001dbc:	440b      	add	r3, r1
 8001dbe:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f80b 	bl	8001de4 <ETH_MACAddressConfig>
}
 8001dce:	bf00      	nop
 8001dd0:	37c0      	adds	r7, #192	; 0xc0
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	ff20810f 	.word	0xff20810f
 8001ddc:	f8de3f23 	.word	0xf8de3f23
 8001de0:	00010040 	.word	0x00010040

08001de4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3305      	adds	r3, #5
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	3204      	adds	r2, #4
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <ETH_MACAddressConfig+0x68>)
 8001e06:	4413      	add	r3, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3303      	adds	r3, #3
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	061a      	lsls	r2, r3, #24
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3302      	adds	r3, #2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	041b      	lsls	r3, r3, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3301      	adds	r3, #1
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	7812      	ldrb	r2, [r2, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <ETH_MACAddressConfig+0x6c>)
 8001e36:	4413      	add	r3, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	6013      	str	r3, [r2, #0]
}
 8001e3e:	bf00      	nop
 8001e40:	371c      	adds	r7, #28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40028040 	.word	0x40028040
 8001e50:	40028044 	.word	0x40028044

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	e175      	b.n	8002160 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8164 	bne.w	800215a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d00b      	beq.n	8001eb2 <HAL_GPIO_Init+0x5e>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea6:	2b11      	cmp	r3, #17
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b12      	cmp	r3, #18
 8001eb0:	d130      	bne.n	8001f14 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0201 	and.w	r2, r3, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x100>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b12      	cmp	r3, #18
 8001f52:	d123      	bne.n	8001f9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	69b9      	ldr	r1, [r7, #24]
 8001f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0203 	and.w	r2, r3, #3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80be 	beq.w	800215a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	4b65      	ldr	r3, [pc, #404]	; (8002174 <HAL_GPIO_Init+0x320>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a64      	ldr	r2, [pc, #400]	; (8002174 <HAL_GPIO_Init+0x320>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b62      	ldr	r3, [pc, #392]	; (8002174 <HAL_GPIO_Init+0x320>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ff6:	4a60      	ldr	r2, [pc, #384]	; (8002178 <HAL_GPIO_Init+0x324>)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a57      	ldr	r2, [pc, #348]	; (800217c <HAL_GPIO_Init+0x328>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d037      	beq.n	8002092 <HAL_GPIO_Init+0x23e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a56      	ldr	r2, [pc, #344]	; (8002180 <HAL_GPIO_Init+0x32c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d031      	beq.n	800208e <HAL_GPIO_Init+0x23a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a55      	ldr	r2, [pc, #340]	; (8002184 <HAL_GPIO_Init+0x330>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d02b      	beq.n	800208a <HAL_GPIO_Init+0x236>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a54      	ldr	r2, [pc, #336]	; (8002188 <HAL_GPIO_Init+0x334>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d025      	beq.n	8002086 <HAL_GPIO_Init+0x232>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a53      	ldr	r2, [pc, #332]	; (800218c <HAL_GPIO_Init+0x338>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01f      	beq.n	8002082 <HAL_GPIO_Init+0x22e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_GPIO_Init+0x33c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0x22a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a51      	ldr	r2, [pc, #324]	; (8002194 <HAL_GPIO_Init+0x340>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x226>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a50      	ldr	r2, [pc, #320]	; (8002198 <HAL_GPIO_Init+0x344>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x222>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4f      	ldr	r2, [pc, #316]	; (800219c <HAL_GPIO_Init+0x348>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x21e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4e      	ldr	r2, [pc, #312]	; (80021a0 <HAL_GPIO_Init+0x34c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x21a>
 800206a:	2309      	movs	r3, #9
 800206c:	e012      	b.n	8002094 <HAL_GPIO_Init+0x240>
 800206e:	230a      	movs	r3, #10
 8002070:	e010      	b.n	8002094 <HAL_GPIO_Init+0x240>
 8002072:	2308      	movs	r3, #8
 8002074:	e00e      	b.n	8002094 <HAL_GPIO_Init+0x240>
 8002076:	2307      	movs	r3, #7
 8002078:	e00c      	b.n	8002094 <HAL_GPIO_Init+0x240>
 800207a:	2306      	movs	r3, #6
 800207c:	e00a      	b.n	8002094 <HAL_GPIO_Init+0x240>
 800207e:	2305      	movs	r3, #5
 8002080:	e008      	b.n	8002094 <HAL_GPIO_Init+0x240>
 8002082:	2304      	movs	r3, #4
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x240>
 8002086:	2303      	movs	r3, #3
 8002088:	e004      	b.n	8002094 <HAL_GPIO_Init+0x240>
 800208a:	2302      	movs	r3, #2
 800208c:	e002      	b.n	8002094 <HAL_GPIO_Init+0x240>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x240>
 8002092:	2300      	movs	r3, #0
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	f002 0203 	and.w	r2, r2, #3
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	4093      	lsls	r3, r2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020a4:	4934      	ldr	r1, [pc, #208]	; (8002178 <HAL_GPIO_Init+0x324>)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b2:	4b3c      	ldr	r3, [pc, #240]	; (80021a4 <HAL_GPIO_Init+0x350>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d6:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <HAL_GPIO_Init+0x350>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020dc:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_GPIO_Init+0x350>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002100:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <HAL_GPIO_Init+0x350>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002106:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_GPIO_Init+0x350>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800212a:	4a1e      	ldr	r2, [pc, #120]	; (80021a4 <HAL_GPIO_Init+0x350>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <HAL_GPIO_Init+0x350>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002154:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <HAL_GPIO_Init+0x350>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b0f      	cmp	r3, #15
 8002164:	f67f ae86 	bls.w	8001e74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002168:	bf00      	nop
 800216a:	3724      	adds	r7, #36	; 0x24
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40023800 	.word	0x40023800
 8002178:	40013800 	.word	0x40013800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020400 	.word	0x40020400
 8002184:	40020800 	.word	0x40020800
 8002188:	40020c00 	.word	0x40020c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40021400 	.word	0x40021400
 8002194:	40021800 	.word	0x40021800
 8002198:	40021c00 	.word	0x40021c00
 800219c:	40022000 	.word	0x40022000
 80021a0:	40022400 	.word	0x40022400
 80021a4:	40013c00 	.word	0x40013c00

080021a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e001      	b.n	80021ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
 80021e4:	4613      	mov	r3, r2
 80021e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e8:	787b      	ldrb	r3, [r7, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021f4:	e003      	b.n	80021fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	041a      	lsls	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800220a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220c:	b08f      	sub	sp, #60	; 0x3c
 800220e:	af0a      	add	r7, sp, #40	; 0x28
 8002210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e116      	b.n	800244a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fe52 	bl	8000ee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2203      	movs	r2, #3
 8002240:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f002 f85a 	bl	8004314 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	687e      	ldr	r6, [r7, #4]
 8002268:	466d      	mov	r5, sp
 800226a:	f106 0410 	add.w	r4, r6, #16
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800227a:	e885 0003 	stmia.w	r5, {r0, r1}
 800227e:	1d33      	adds	r3, r6, #4
 8002280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002282:	6838      	ldr	r0, [r7, #0]
 8002284:	f001 ffee 	bl	8004264 <USB_CoreInit>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0d7      	b.n	800244a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 f848 	bl	8004336 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e04a      	b.n	8002342 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	333d      	adds	r3, #61	; 0x3d
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	333c      	adds	r3, #60	; 0x3c
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	b298      	uxth	r0, r3
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3342      	adds	r3, #66	; 0x42
 80022e8:	4602      	mov	r2, r0
 80022ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	333f      	adds	r3, #63	; 0x3f
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3344      	adds	r3, #68	; 0x44
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3348      	adds	r3, #72	; 0x48
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3350      	adds	r3, #80	; 0x50
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	3301      	adds	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3af      	bcc.n	80022ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e044      	b.n	80023dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	3301      	adds	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d3b5      	bcc.n	8002352 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	687e      	ldr	r6, [r7, #4]
 80023ee:	466d      	mov	r5, sp
 80023f0:	f106 0410 	add.w	r4, r6, #16
 80023f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002400:	e885 0003 	stmia.w	r5, {r0, r1}
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002408:	6838      	ldr	r0, [r7, #0]
 800240a:	f001 ffbf 	bl	800438c <USB_DevInit>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e014      	b.n	800244a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	2b01      	cmp	r3, #1
 8002436:	d102      	bne.n	800243e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f80b 	bl	8002454 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f002 f971 	bl	800472a <USB_DevDisconnect>

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002454 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_PCDEx_ActivateLPM+0x44>)
 8002484:	4313      	orrs	r3, r2
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	10000003 	.word	0x10000003

0800249c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024a0:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40007000 	.word	0x40007000

080024bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	4b23      	ldr	r3, [pc, #140]	; (8002554 <HAL_PWREx_EnableOverDrive+0x98>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	4a22      	ldr	r2, [pc, #136]	; (8002554 <HAL_PWREx_EnableOverDrive+0x98>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6413      	str	r3, [r2, #64]	; 0x40
 80024d2:	4b20      	ldr	r3, [pc, #128]	; (8002554 <HAL_PWREx_EnableOverDrive+0x98>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1d      	ldr	r2, [pc, #116]	; (8002558 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ea:	f7fe fe49 	bl	8001180 <HAL_GetTick>
 80024ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024f0:	e009      	b.n	8002506 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024f2:	f7fe fe45 	bl	8001180 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002500:	d901      	bls.n	8002506 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e022      	b.n	800254c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002512:	d1ee      	bne.n	80024f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <HAL_PWREx_EnableOverDrive+0x9c>)
 800251a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002520:	f7fe fe2e 	bl	8001180 <HAL_GetTick>
 8002524:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002526:	e009      	b.n	800253c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002528:	f7fe fe2a 	bl	8001180 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002536:	d901      	bls.n	800253c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e007      	b.n	800254c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_PWREx_EnableOverDrive+0x9c>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002548:	d1ee      	bne.n	8002528 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40023800 	.word	0x40023800
 8002558:	40007000 	.word	0x40007000

0800255c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002564:	2300      	movs	r3, #0
 8002566:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e29b      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 8087 	beq.w	800268e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002580:	4b96      	ldr	r3, [pc, #600]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b04      	cmp	r3, #4
 800258a:	d00c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258c:	4b93      	ldr	r3, [pc, #588]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d112      	bne.n	80025be <HAL_RCC_OscConfig+0x62>
 8002598:	4b90      	ldr	r3, [pc, #576]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a4:	d10b      	bne.n	80025be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a6:	4b8d      	ldr	r3, [pc, #564]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d06c      	beq.n	800268c <HAL_RCC_OscConfig+0x130>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d168      	bne.n	800268c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e275      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x7a>
 80025c8:	4b84      	ldr	r3, [pc, #528]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a83      	ldr	r2, [pc, #524]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	e02e      	b.n	8002634 <HAL_RCC_OscConfig+0xd8>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x9c>
 80025de:	4b7f      	ldr	r3, [pc, #508]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a7e      	ldr	r2, [pc, #504]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80025e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b7c      	ldr	r3, [pc, #496]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a7b      	ldr	r2, [pc, #492]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80025f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e01d      	b.n	8002634 <HAL_RCC_OscConfig+0xd8>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0xc0>
 8002602:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a75      	ldr	r2, [pc, #468]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b73      	ldr	r3, [pc, #460]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a72      	ldr	r2, [pc, #456]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e00b      	b.n	8002634 <HAL_RCC_OscConfig+0xd8>
 800261c:	4b6f      	ldr	r3, [pc, #444]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6e      	ldr	r2, [pc, #440]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b6c      	ldr	r3, [pc, #432]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a6b      	ldr	r2, [pc, #428]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 800262e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fda0 	bl	8001180 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002644:	f7fe fd9c 	bl	8001180 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e229      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b61      	ldr	r3, [pc, #388]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0xe8>
 8002662:	e014      	b.n	800268e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fd8c 	bl	8001180 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800266c:	f7fe fd88 	bl	8001180 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e215      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	4b57      	ldr	r3, [pc, #348]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x110>
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d069      	beq.n	800276e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800269a:	4b50      	ldr	r3, [pc, #320]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a6:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d11c      	bne.n	80026ec <HAL_RCC_OscConfig+0x190>
 80026b2:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d116      	bne.n	80026ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_RCC_OscConfig+0x17a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e1e9      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b41      	ldr	r3, [pc, #260]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	493d      	ldr	r1, [pc, #244]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	e040      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d023      	beq.n	800273c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f4:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a38      	ldr	r2, [pc, #224]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe fd3e 	bl	8001180 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002708:	f7fe fd3a 	bl	8001180 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1c7      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271a:	4b30      	ldr	r3, [pc, #192]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002726:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4929      	ldr	r1, [pc, #164]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
 800273a:	e018      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a26      	ldr	r2, [pc, #152]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fd1a 	bl	8001180 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002750:	f7fe fd16 	bl	8001180 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1a3      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d038      	beq.n	80027ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d019      	beq.n	80027b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002786:	4a15      	ldr	r2, [pc, #84]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278e:	f7fe fcf7 	bl	8001180 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002796:	f7fe fcf3 	bl	8001180 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e180      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80027aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x23a>
 80027b4:	e01a      	b.n	80027ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80027b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ba:	4a08      	ldr	r2, [pc, #32]	; (80027dc <HAL_RCC_OscConfig+0x280>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c2:	f7fe fcdd 	bl	8001180 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ca:	f7fe fcd9 	bl	8001180 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d903      	bls.n	80027e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e166      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
 80027dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e0:	4b92      	ldr	r3, [pc, #584]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80027e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1ee      	bne.n	80027ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80a4 	beq.w	8002942 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fa:	4b8c      	ldr	r3, [pc, #560]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10d      	bne.n	8002822 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	4b89      	ldr	r3, [pc, #548]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a88      	ldr	r2, [pc, #544]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b86      	ldr	r3, [pc, #536]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281e:	2301      	movs	r3, #1
 8002820:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002822:	4b83      	ldr	r3, [pc, #524]	; (8002a30 <HAL_RCC_OscConfig+0x4d4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d118      	bne.n	8002860 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800282e:	4b80      	ldr	r3, [pc, #512]	; (8002a30 <HAL_RCC_OscConfig+0x4d4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7f      	ldr	r2, [pc, #508]	; (8002a30 <HAL_RCC_OscConfig+0x4d4>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283a:	f7fe fca1 	bl	8001180 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002842:	f7fe fc9d 	bl	8001180 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b64      	cmp	r3, #100	; 0x64
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e12a      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002854:	4b76      	ldr	r3, [pc, #472]	; (8002a30 <HAL_RCC_OscConfig+0x4d4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x31a>
 8002868:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	4a6f      	ldr	r2, [pc, #444]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	; 0x70
 8002874:	e02d      	b.n	80028d2 <HAL_RCC_OscConfig+0x376>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x33c>
 800287e:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	4a6a      	ldr	r2, [pc, #424]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	6713      	str	r3, [r2, #112]	; 0x70
 800288a:	4b68      	ldr	r3, [pc, #416]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	4a67      	ldr	r2, [pc, #412]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 8002890:	f023 0304 	bic.w	r3, r3, #4
 8002894:	6713      	str	r3, [r2, #112]	; 0x70
 8002896:	e01c      	b.n	80028d2 <HAL_RCC_OscConfig+0x376>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b05      	cmp	r3, #5
 800289e:	d10c      	bne.n	80028ba <HAL_RCC_OscConfig+0x35e>
 80028a0:	4b62      	ldr	r3, [pc, #392]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a4:	4a61      	ldr	r2, [pc, #388]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80028a6:	f043 0304 	orr.w	r3, r3, #4
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70
 80028ac:	4b5f      	ldr	r3, [pc, #380]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4a5e      	ldr	r2, [pc, #376]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	; 0x70
 80028b8:	e00b      	b.n	80028d2 <HAL_RCC_OscConfig+0x376>
 80028ba:	4b5c      	ldr	r3, [pc, #368]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a5b      	ldr	r2, [pc, #364]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
 80028c6:	4b59      	ldr	r3, [pc, #356]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a58      	ldr	r2, [pc, #352]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d015      	beq.n	8002906 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe fc51 	bl	8001180 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7fe fc4d 	bl	8001180 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e0d8      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f8:	4b4c      	ldr	r3, [pc, #304]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0ee      	beq.n	80028e2 <HAL_RCC_OscConfig+0x386>
 8002904:	e014      	b.n	8002930 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002906:	f7fe fc3b 	bl	8001180 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290c:	e00a      	b.n	8002924 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	f7fe fc37 	bl	8001180 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	f241 3288 	movw	r2, #5000	; 0x1388
 800291c:	4293      	cmp	r3, r2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e0c2      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002924:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1ee      	bne.n	800290e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d105      	bne.n	8002942 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002936:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a3c      	ldr	r2, [pc, #240]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 800293c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80ae 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800294c:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b08      	cmp	r3, #8
 8002956:	d06d      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d14b      	bne.n	80029f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002960:	4b32      	ldr	r3, [pc, #200]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a31      	ldr	r2, [pc, #196]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 8002966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800296a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fc08 	bl	8001180 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7fe fc04 	bl	8001180 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e091      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	019b      	lsls	r3, r3, #6
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	3b01      	subs	r3, #1
 80029ac:	041b      	lsls	r3, r3, #16
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	061b      	lsls	r3, r3, #24
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	071b      	lsls	r3, r3, #28
 80029be:	491b      	ldr	r1, [pc, #108]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c4:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80029ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe fbd6 	bl	8001180 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe fbd2 	bl	8001180 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e05f      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x47c>
 80029f6:	e057      	b.n	8002aa8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 80029fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe fbbc 	bl	8001180 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7fe fbb8 	bl	8001180 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e045      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1e:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_RCC_OscConfig+0x4d0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x4b0>
 8002a2a:	e03d      	b.n	8002aa8 <HAL_RCC_OscConfig+0x54c>
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a34:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_RCC_OscConfig+0x558>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d030      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d129      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d122      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a64:	4013      	ands	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d119      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d10f      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0d0      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b6a      	ldr	r3, [pc, #424]	; (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d910      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 020f 	bic.w	r2, r3, #15
 8002ae6:	4965      	ldr	r1, [pc, #404]	; (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b63      	ldr	r3, [pc, #396]	; (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0b8      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b18:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a58      	ldr	r2, [pc, #352]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b30:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a52      	ldr	r2, [pc, #328]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3c:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	494d      	ldr	r1, [pc, #308]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d040      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d115      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e07f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b41      	ldr	r3, [pc, #260]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e073      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06b      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9a:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 0203 	bic.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4936      	ldr	r1, [pc, #216]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bac:	f7fe fae8 	bl	8001180 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7fe fae4 	bl	8001180 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e053      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 020c 	and.w	r2, r3, #12
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1eb      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d210      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 020f 	bic.w	r2, r3, #15
 8002bf2:	4922      	ldr	r1, [pc, #136]	; (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e032      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4916      	ldr	r1, [pc, #88]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	490e      	ldr	r1, [pc, #56]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c4a:	f000 f821 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c4e:	4601      	mov	r1, r0
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <HAL_RCC_ClockConfig+0x1cc>)
 8002c5c:	5cd3      	ldrb	r3, [r2, r3]
 8002c5e:	fa21 f303 	lsr.w	r3, r1, r3
 8002c62:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <HAL_RCC_ClockConfig+0x1d0>)
 8002c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1d4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fa44 	bl	80010f8 <HAL_InitTick>

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023c00 	.word	0x40023c00
 8002c80:	40023800 	.word	0x40023800
 8002c84:	08005170 	.word	0x08005170
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	20000004 	.word	0x20000004

08002c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	607b      	str	r3, [r7, #4]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca6:	4b63      	ldr	r3, [pc, #396]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d007      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x32>
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x38>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 80b4 	bne.w	8002e24 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cbe:	60bb      	str	r3, [r7, #8]
      break;
 8002cc0:	e0b3      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc2:	4b5e      	ldr	r3, [pc, #376]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002cc4:	60bb      	str	r3, [r7, #8]
      break;
 8002cc6:	e0b0      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc8:	4b5a      	ldr	r3, [pc, #360]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002cd2:	4b58      	ldr	r3, [pc, #352]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d04a      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cde:	4b55      	ldr	r3, [pc, #340]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	099b      	lsrs	r3, r3, #6
 8002ce4:	f04f 0400 	mov.w	r4, #0
 8002ce8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	ea03 0501 	and.w	r5, r3, r1
 8002cf4:	ea04 0602 	and.w	r6, r4, r2
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	4632      	mov	r2, r6
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	f04f 0400 	mov.w	r4, #0
 8002d04:	0154      	lsls	r4, r2, #5
 8002d06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d0a:	014b      	lsls	r3, r1, #5
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4622      	mov	r2, r4
 8002d10:	1b49      	subs	r1, r1, r5
 8002d12:	eb62 0206 	sbc.w	r2, r2, r6
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	f04f 0400 	mov.w	r4, #0
 8002d1e:	0194      	lsls	r4, r2, #6
 8002d20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d24:	018b      	lsls	r3, r1, #6
 8002d26:	1a5b      	subs	r3, r3, r1
 8002d28:	eb64 0402 	sbc.w	r4, r4, r2
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	00e2      	lsls	r2, r4, #3
 8002d36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d3a:	00d9      	lsls	r1, r3, #3
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4614      	mov	r4, r2
 8002d40:	195b      	adds	r3, r3, r5
 8002d42:	eb44 0406 	adc.w	r4, r4, r6
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	0262      	lsls	r2, r4, #9
 8002d50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d54:	0259      	lsls	r1, r3, #9
 8002d56:	460b      	mov	r3, r1
 8002d58:	4614      	mov	r4, r2
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f04f 0400 	mov.w	r4, #0
 8002d64:	461a      	mov	r2, r3
 8002d66:	4623      	mov	r3, r4
 8002d68:	f7fd fac2 	bl	80002f0 <__aeabi_uldivmod>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	460c      	mov	r4, r1
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e049      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d74:	4b2f      	ldr	r3, [pc, #188]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	f04f 0400 	mov.w	r4, #0
 8002d7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	ea03 0501 	and.w	r5, r3, r1
 8002d8a:	ea04 0602 	and.w	r6, r4, r2
 8002d8e:	4629      	mov	r1, r5
 8002d90:	4632      	mov	r2, r6
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	f04f 0400 	mov.w	r4, #0
 8002d9a:	0154      	lsls	r4, r2, #5
 8002d9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002da0:	014b      	lsls	r3, r1, #5
 8002da2:	4619      	mov	r1, r3
 8002da4:	4622      	mov	r2, r4
 8002da6:	1b49      	subs	r1, r1, r5
 8002da8:	eb62 0206 	sbc.w	r2, r2, r6
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	f04f 0400 	mov.w	r4, #0
 8002db4:	0194      	lsls	r4, r2, #6
 8002db6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dba:	018b      	lsls	r3, r1, #6
 8002dbc:	1a5b      	subs	r3, r3, r1
 8002dbe:	eb64 0402 	sbc.w	r4, r4, r2
 8002dc2:	f04f 0100 	mov.w	r1, #0
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	00e2      	lsls	r2, r4, #3
 8002dcc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dd0:	00d9      	lsls	r1, r3, #3
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4614      	mov	r4, r2
 8002dd6:	195b      	adds	r3, r3, r5
 8002dd8:	eb44 0406 	adc.w	r4, r4, r6
 8002ddc:	f04f 0100 	mov.w	r1, #0
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	02a2      	lsls	r2, r4, #10
 8002de6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dea:	0299      	lsls	r1, r3, #10
 8002dec:	460b      	mov	r3, r1
 8002dee:	4614      	mov	r4, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	4621      	mov	r1, r4
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f04f 0400 	mov.w	r4, #0
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4623      	mov	r3, r4
 8002dfe:	f7fd fa77 	bl	80002f0 <__aeabi_uldivmod>
 8002e02:	4603      	mov	r3, r0
 8002e04:	460c      	mov	r4, r1
 8002e06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	3301      	adds	r3, #1
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e20:	60bb      	str	r3, [r7, #8]
      break;
 8002e22:	e002      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e26:	60bb      	str	r3, [r7, #8]
      break;
 8002e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e34:	40023800 	.word	0x40023800
 8002e38:	00f42400 	.word	0x00f42400
 8002e3c:	007a1200 	.word	0x007a1200

08002e40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e46:	681b      	ldr	r3, [r3, #0]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000000 	.word	0x20000000

08002e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e5c:	f7ff fff0 	bl	8002e40 <HAL_RCC_GetHCLKFreq>
 8002e60:	4601      	mov	r1, r0
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	0a9b      	lsrs	r3, r3, #10
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	4a03      	ldr	r2, [pc, #12]	; (8002e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e6e:	5cd3      	ldrb	r3, [r2, r3]
 8002e70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	08005180 	.word	0x08005180

08002e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e84:	f7ff ffdc 	bl	8002e40 <HAL_RCC_GetHCLKFreq>
 8002e88:	4601      	mov	r1, r0
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	0b5b      	lsrs	r3, r3, #13
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	4a03      	ldr	r2, [pc, #12]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	08005180 	.word	0x08005180

08002ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d012      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ed0:	4b69      	ldr	r3, [pc, #420]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a68      	ldr	r2, [pc, #416]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002eda:	6093      	str	r3, [r2, #8]
 8002edc:	4b66      	ldr	r3, [pc, #408]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee4:	4964      	ldr	r1, [pc, #400]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d017      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f02:	4b5d      	ldr	r3, [pc, #372]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	4959      	ldr	r1, [pc, #356]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f20:	d101      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d017      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f3e:	4b4e      	ldr	r3, [pc, #312]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	494a      	ldr	r1, [pc, #296]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 808b 	beq.w	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f8c:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	4a39      	ldr	r2, [pc, #228]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6413      	str	r3, [r2, #64]	; 0x40
 8002f98:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fa4:	4b35      	ldr	r3, [pc, #212]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a34      	ldr	r2, [pc, #208]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb0:	f7fe f8e6 	bl	8001180 <HAL_GetTick>
 8002fb4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb8:	f7fe f8e2 	bl	8001180 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e38d      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fca:	4b2c      	ldr	r3, [pc, #176]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fd6:	4b28      	ldr	r3, [pc, #160]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fde:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d035      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d02e      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ff4:	4b20      	ldr	r3, [pc, #128]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ffe:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800300a:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	4a1a      	ldr	r2, [pc, #104]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003014:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003016:	4a18      	ldr	r2, [pc, #96]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800301c:	4b16      	ldr	r3, [pc, #88]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d114      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe f8aa 	bl	8001180 <HAL_GetTick>
 800302c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302e:	e00a      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003030:	f7fe f8a6 	bl	8001180 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4293      	cmp	r3, r2
 8003040:	d901      	bls.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e34f      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0ee      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800305e:	d111      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003060:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800306e:	400b      	ands	r3, r1
 8003070:	4901      	ldr	r1, [pc, #4]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
 8003076:	e00b      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003078:	40023800 	.word	0x40023800
 800307c:	40007000 	.word	0x40007000
 8003080:	0ffffcff 	.word	0x0ffffcff
 8003084:	4bb3      	ldr	r3, [pc, #716]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4ab2      	ldr	r2, [pc, #712]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800308a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800308e:	6093      	str	r3, [r2, #8]
 8003090:	4bb0      	ldr	r3, [pc, #704]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309c:	49ad      	ldr	r1, [pc, #692]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d010      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030ae:	4ba9      	ldr	r3, [pc, #676]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030b4:	4aa7      	ldr	r2, [pc, #668]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030be:	4ba5      	ldr	r3, [pc, #660]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	49a2      	ldr	r1, [pc, #648]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030dc:	4b9d      	ldr	r3, [pc, #628]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ea:	499a      	ldr	r1, [pc, #616]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030fe:	4b95      	ldr	r3, [pc, #596]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800310c:	4991      	ldr	r1, [pc, #580]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003120:	4b8c      	ldr	r3, [pc, #560]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800312e:	4989      	ldr	r1, [pc, #548]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003142:	4b84      	ldr	r3, [pc, #528]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003148:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	4980      	ldr	r1, [pc, #512]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003164:	4b7b      	ldr	r3, [pc, #492]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	f023 0203 	bic.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	4978      	ldr	r1, [pc, #480]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003186:	4b73      	ldr	r3, [pc, #460]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	f023 020c 	bic.w	r2, r3, #12
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003194:	496f      	ldr	r1, [pc, #444]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031a8:	4b6a      	ldr	r3, [pc, #424]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b6:	4967      	ldr	r1, [pc, #412]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031ca:	4b62      	ldr	r3, [pc, #392]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d8:	495e      	ldr	r1, [pc, #376]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031ec:	4b59      	ldr	r3, [pc, #356]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fa:	4956      	ldr	r1, [pc, #344]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800320e:	4b51      	ldr	r3, [pc, #324]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003214:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	494d      	ldr	r1, [pc, #308]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00a      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003230:	4b48      	ldr	r3, [pc, #288]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	4945      	ldr	r1, [pc, #276]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00a      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003252:	4b40      	ldr	r3, [pc, #256]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003258:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003260:	493c      	ldr	r1, [pc, #240]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003274:	4b37      	ldr	r3, [pc, #220]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003282:	4934      	ldr	r1, [pc, #208]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003284:	4313      	orrs	r3, r2
 8003286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d011      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003296:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032a4:	492b      	ldr	r1, [pc, #172]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b4:	d101      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032d6:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	491b      	ldr	r1, [pc, #108]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00b      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003308:	4912      	ldr	r1, [pc, #72]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00b      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332c:	4909      	ldr	r1, [pc, #36]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332e:	4313      	orrs	r3, r2
 8003330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00f      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003346:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	e002      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	4985      	ldr	r1, [pc, #532]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00b      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800336c:	4b80      	ldr	r3, [pc, #512]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800336e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003372:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800337c:	497c      	ldr	r1, [pc, #496]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d005      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003392:	f040 80d6 	bne.w	8003542 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003396:	4b76      	ldr	r3, [pc, #472]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a75      	ldr	r2, [pc, #468]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800339c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a2:	f7fd feed 	bl	8001180 <HAL_GetTick>
 80033a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033a8:	e008      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033aa:	f7fd fee9 	bl	8001180 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b64      	cmp	r3, #100	; 0x64
 80033b6:	d901      	bls.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e194      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033bc:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f0      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d021      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d11d      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033dc:	4b64      	ldr	r3, [pc, #400]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033ea:	4b61      	ldr	r3, [pc, #388]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f0:	0e1b      	lsrs	r3, r3, #24
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	019a      	lsls	r2, r3, #6
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	061b      	lsls	r3, r3, #24
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	071b      	lsls	r3, r3, #28
 8003410:	4957      	ldr	r1, [pc, #348]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003436:	2b00      	cmp	r3, #0
 8003438:	d02e      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003442:	d129      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003444:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800344a:	0c1b      	lsrs	r3, r3, #16
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003452:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003458:	0f1b      	lsrs	r3, r3, #28
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	019a      	lsls	r2, r3, #6
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	071b      	lsls	r3, r3, #28
 8003478:	493d      	ldr	r1, [pc, #244]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003480:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003486:	f023 021f 	bic.w	r2, r3, #31
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	3b01      	subs	r3, #1
 8003490:	4937      	ldr	r1, [pc, #220]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01d      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034a4:	4b32      	ldr	r3, [pc, #200]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034aa:	0e1b      	lsrs	r3, r3, #24
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034b2:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b8:	0f1b      	lsrs	r3, r3, #28
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	019a      	lsls	r2, r3, #6
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	041b      	lsls	r3, r3, #16
 80034cc:	431a      	orrs	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	431a      	orrs	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	071b      	lsls	r3, r3, #28
 80034d8:	4925      	ldr	r1, [pc, #148]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d011      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	019a      	lsls	r2, r3, #6
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	071b      	lsls	r3, r3, #28
 8003508:	4919      	ldr	r1, [pc, #100]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003510:	4b17      	ldr	r3, [pc, #92]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a16      	ldr	r2, [pc, #88]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003516:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800351a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800351c:	f7fd fe30 	bl	8001180 <HAL_GetTick>
 8003520:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003524:	f7fd fe2c 	bl	8001180 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0d7      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	f040 80cd 	bne.w	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003556:	f7fd fe13 	bl	8001180 <HAL_GetTick>
 800355a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800355e:	f7fd fe0f 	bl	8001180 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b64      	cmp	r3, #100	; 0x64
 800356a:	d903      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0ba      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003570:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003574:	4b5e      	ldr	r3, [pc, #376]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800357c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003580:	d0ed      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d02e      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d12a      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035aa:	4b51      	ldr	r3, [pc, #324]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035b8:	4b4d      	ldr	r3, [pc, #308]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	0f1b      	lsrs	r3, r3, #28
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	019a      	lsls	r2, r3, #6
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	061b      	lsls	r3, r3, #24
 80035d8:	431a      	orrs	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	071b      	lsls	r3, r3, #28
 80035de:	4944      	ldr	r1, [pc, #272]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035e6:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	3b01      	subs	r3, #1
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	493d      	ldr	r1, [pc, #244]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d022      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003614:	d11d      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003616:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	0e1b      	lsrs	r3, r3, #24
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003624:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	0f1b      	lsrs	r3, r3, #28
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	019a      	lsls	r2, r3, #6
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	431a      	orrs	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	061b      	lsls	r3, r3, #24
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	071b      	lsls	r3, r3, #28
 800364a:	4929      	ldr	r1, [pc, #164]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d028      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003664:	0e1b      	lsrs	r3, r3, #24
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800366c:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	0c1b      	lsrs	r3, r3, #16
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	019a      	lsls	r2, r3, #6
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	431a      	orrs	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	071b      	lsls	r3, r3, #28
 8003692:	4917      	ldr	r1, [pc, #92]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800369c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4911      	ldr	r1, [pc, #68]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0e      	ldr	r2, [pc, #56]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036bc:	f7fd fd60 	bl	8001180 <HAL_GetTick>
 80036c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036c4:	f7fd fd5c 	bl	8001180 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e007      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e2:	d1ef      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800

080036f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e040      	b.n	8003788 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fb6c 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	; 0x24
 8003720:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f98a 	bl	8003a4c <UART_SetConfig>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e022      	b.n	8003788 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fc28 	bl	8003fa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800375e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800376e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fcaf 	bl	80040e4 <UART_CheckIdleState>
 8003786:	4603      	mov	r3, r0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d17f      	bne.n	80038a8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_UART_Transmit+0x24>
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e078      	b.n	80038aa <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_UART_Transmit+0x36>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e071      	b.n	80038aa <HAL_UART_Transmit+0x11a>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2221      	movs	r2, #33	; 0x21
 80037d8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80037da:	f7fd fcd1 	bl	8001180 <HAL_GetTick>
 80037de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	88fa      	ldrh	r2, [r7, #6]
 80037e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f8:	d108      	bne.n	800380c <HAL_UART_Transmit+0x7c>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d104      	bne.n	800380c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	e003      	b.n	8003814 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003810:	2300      	movs	r3, #0
 8003812:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800381c:	e02c      	b.n	8003878 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2200      	movs	r2, #0
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 fca0 	bl	800416e <UART_WaitOnFlagUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e038      	b.n	80038aa <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	881b      	ldrh	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	3302      	adds	r3, #2
 8003852:	61bb      	str	r3, [r7, #24]
 8003854:	e007      	b.n	8003866 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	781a      	ldrb	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3301      	adds	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1cc      	bne.n	800381e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2200      	movs	r2, #0
 800388c:	2140      	movs	r1, #64	; 0x40
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fc6d 	bl	800416e <UART_WaitOnFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e005      	b.n	80038aa <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b08a      	sub	sp, #40	; 0x28
 80038b6:	af02      	add	r7, sp, #8
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	f040 80ba 	bne.w	8003a40 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_UART_Receive+0x26>
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0b2      	b.n	8003a42 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_UART_Receive+0x38>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e0ab      	b.n	8003a42 <HAL_UART_Receive+0x190>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2222      	movs	r2, #34	; 0x22
 80038fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80038fe:	f7fd fc3f 	bl	8001180 <HAL_GetTick>
 8003902:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	d10e      	bne.n	800393c <HAL_UART_Receive+0x8a>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d105      	bne.n	8003932 <HAL_UART_Receive+0x80>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f240 12ff 	movw	r2, #511	; 0x1ff
 800392c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003930:	e02d      	b.n	800398e <HAL_UART_Receive+0xdc>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800393a:	e028      	b.n	800398e <HAL_UART_Receive+0xdc>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10d      	bne.n	8003960 <HAL_UART_Receive+0xae>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d104      	bne.n	8003956 <HAL_UART_Receive+0xa4>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	22ff      	movs	r2, #255	; 0xff
 8003950:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003954:	e01b      	b.n	800398e <HAL_UART_Receive+0xdc>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	227f      	movs	r2, #127	; 0x7f
 800395a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800395e:	e016      	b.n	800398e <HAL_UART_Receive+0xdc>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003968:	d10d      	bne.n	8003986 <HAL_UART_Receive+0xd4>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <HAL_UART_Receive+0xca>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	227f      	movs	r2, #127	; 0x7f
 8003976:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800397a:	e008      	b.n	800398e <HAL_UART_Receive+0xdc>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	223f      	movs	r2, #63	; 0x3f
 8003980:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003984:	e003      	b.n	800398e <HAL_UART_Receive+0xdc>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003994:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399e:	d108      	bne.n	80039b2 <HAL_UART_Receive+0x100>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d104      	bne.n	80039b2 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	e003      	b.n	80039ba <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80039c2:	e032      	b.n	8003a2a <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2200      	movs	r2, #0
 80039cc:	2120      	movs	r1, #32
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fbcd 	bl	800416e <UART_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e031      	b.n	8003a42 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10c      	bne.n	80039fe <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	8a7b      	ldrh	r3, [r7, #18]
 80039ee:	4013      	ands	r3, r2
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	3302      	adds	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	e00c      	b.n	8003a18 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	8a7b      	ldrh	r3, [r7, #18]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3301      	adds	r3, #1
 8003a16:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1c6      	bne.n	80039c4 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3720      	adds	r7, #32
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4bb1      	ldr	r3, [pc, #708]	; (8003d40 <UART_SetConfig+0x2f4>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	6939      	ldr	r1, [r7, #16]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a9f      	ldr	r2, [pc, #636]	; (8003d44 <UART_SetConfig+0x2f8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d121      	bne.n	8003b10 <UART_SetConfig+0xc4>
 8003acc:	4b9e      	ldr	r3, [pc, #632]	; (8003d48 <UART_SetConfig+0x2fc>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d816      	bhi.n	8003b08 <UART_SetConfig+0xbc>
 8003ada:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <UART_SetConfig+0x94>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003afd 	.word	0x08003afd
 8003ae8:	08003af7 	.word	0x08003af7
 8003aec:	08003b03 	.word	0x08003b03
 8003af0:	2301      	movs	r3, #1
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e151      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003af6:	2302      	movs	r3, #2
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e14e      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003afc:	2304      	movs	r3, #4
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e14b      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003b02:	2308      	movs	r3, #8
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e148      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	bf00      	nop
 8003b0e:	e144      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a8d      	ldr	r2, [pc, #564]	; (8003d4c <UART_SetConfig+0x300>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d134      	bne.n	8003b84 <UART_SetConfig+0x138>
 8003b1a:	4b8b      	ldr	r3, [pc, #556]	; (8003d48 <UART_SetConfig+0x2fc>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d829      	bhi.n	8003b7c <UART_SetConfig+0x130>
 8003b28:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <UART_SetConfig+0xe4>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b65 	.word	0x08003b65
 8003b34:	08003b7d 	.word	0x08003b7d
 8003b38:	08003b7d 	.word	0x08003b7d
 8003b3c:	08003b7d 	.word	0x08003b7d
 8003b40:	08003b71 	.word	0x08003b71
 8003b44:	08003b7d 	.word	0x08003b7d
 8003b48:	08003b7d 	.word	0x08003b7d
 8003b4c:	08003b7d 	.word	0x08003b7d
 8003b50:	08003b6b 	.word	0x08003b6b
 8003b54:	08003b7d 	.word	0x08003b7d
 8003b58:	08003b7d 	.word	0x08003b7d
 8003b5c:	08003b7d 	.word	0x08003b7d
 8003b60:	08003b77 	.word	0x08003b77
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e117      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e114      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003b70:	2304      	movs	r3, #4
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e111      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003b76:	2308      	movs	r3, #8
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	e10e      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	bf00      	nop
 8003b82:	e10a      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a71      	ldr	r2, [pc, #452]	; (8003d50 <UART_SetConfig+0x304>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d120      	bne.n	8003bd0 <UART_SetConfig+0x184>
 8003b8e:	4b6e      	ldr	r3, [pc, #440]	; (8003d48 <UART_SetConfig+0x2fc>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d00f      	beq.n	8003bbc <UART_SetConfig+0x170>
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d802      	bhi.n	8003ba6 <UART_SetConfig+0x15a>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <UART_SetConfig+0x164>
 8003ba4:	e010      	b.n	8003bc8 <UART_SetConfig+0x17c>
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d005      	beq.n	8003bb6 <UART_SetConfig+0x16a>
 8003baa:	2b30      	cmp	r3, #48	; 0x30
 8003bac:	d009      	beq.n	8003bc2 <UART_SetConfig+0x176>
 8003bae:	e00b      	b.n	8003bc8 <UART_SetConfig+0x17c>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e0f1      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e0ee      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e0eb      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	77fb      	strb	r3, [r7, #31]
 8003bc6:	e0e8      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	bf00      	nop
 8003bce:	e0e4      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a5f      	ldr	r2, [pc, #380]	; (8003d54 <UART_SetConfig+0x308>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d120      	bne.n	8003c1c <UART_SetConfig+0x1d0>
 8003bda:	4b5b      	ldr	r3, [pc, #364]	; (8003d48 <UART_SetConfig+0x2fc>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d00f      	beq.n	8003c08 <UART_SetConfig+0x1bc>
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d802      	bhi.n	8003bf2 <UART_SetConfig+0x1a6>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <UART_SetConfig+0x1b0>
 8003bf0:	e010      	b.n	8003c14 <UART_SetConfig+0x1c8>
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d005      	beq.n	8003c02 <UART_SetConfig+0x1b6>
 8003bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf8:	d009      	beq.n	8003c0e <UART_SetConfig+0x1c2>
 8003bfa:	e00b      	b.n	8003c14 <UART_SetConfig+0x1c8>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e0cb      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003c02:	2302      	movs	r3, #2
 8003c04:	77fb      	strb	r3, [r7, #31]
 8003c06:	e0c8      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	77fb      	strb	r3, [r7, #31]
 8003c0c:	e0c5      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003c0e:	2308      	movs	r3, #8
 8003c10:	77fb      	strb	r3, [r7, #31]
 8003c12:	e0c2      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003c14:	2310      	movs	r3, #16
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	bf00      	nop
 8003c1a:	e0be      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a4d      	ldr	r2, [pc, #308]	; (8003d58 <UART_SetConfig+0x30c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d124      	bne.n	8003c70 <UART_SetConfig+0x224>
 8003c26:	4b48      	ldr	r3, [pc, #288]	; (8003d48 <UART_SetConfig+0x2fc>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c34:	d012      	beq.n	8003c5c <UART_SetConfig+0x210>
 8003c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3a:	d802      	bhi.n	8003c42 <UART_SetConfig+0x1f6>
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <UART_SetConfig+0x204>
 8003c40:	e012      	b.n	8003c68 <UART_SetConfig+0x21c>
 8003c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c46:	d006      	beq.n	8003c56 <UART_SetConfig+0x20a>
 8003c48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c4c:	d009      	beq.n	8003c62 <UART_SetConfig+0x216>
 8003c4e:	e00b      	b.n	8003c68 <UART_SetConfig+0x21c>
 8003c50:	2300      	movs	r3, #0
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e0a1      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003c56:	2302      	movs	r3, #2
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e09e      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e09b      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003c62:	2308      	movs	r3, #8
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e098      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	bf00      	nop
 8003c6e:	e094      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a39      	ldr	r2, [pc, #228]	; (8003d5c <UART_SetConfig+0x310>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d124      	bne.n	8003cc4 <UART_SetConfig+0x278>
 8003c7a:	4b33      	ldr	r3, [pc, #204]	; (8003d48 <UART_SetConfig+0x2fc>)
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c88:	d012      	beq.n	8003cb0 <UART_SetConfig+0x264>
 8003c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8e:	d802      	bhi.n	8003c96 <UART_SetConfig+0x24a>
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <UART_SetConfig+0x258>
 8003c94:	e012      	b.n	8003cbc <UART_SetConfig+0x270>
 8003c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9a:	d006      	beq.n	8003caa <UART_SetConfig+0x25e>
 8003c9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ca0:	d009      	beq.n	8003cb6 <UART_SetConfig+0x26a>
 8003ca2:	e00b      	b.n	8003cbc <UART_SetConfig+0x270>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e077      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003caa:	2302      	movs	r3, #2
 8003cac:	77fb      	strb	r3, [r7, #31]
 8003cae:	e074      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	77fb      	strb	r3, [r7, #31]
 8003cb4:	e071      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	77fb      	strb	r3, [r7, #31]
 8003cba:	e06e      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	bf00      	nop
 8003cc2:	e06a      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a25      	ldr	r2, [pc, #148]	; (8003d60 <UART_SetConfig+0x314>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d124      	bne.n	8003d18 <UART_SetConfig+0x2cc>
 8003cce:	4b1e      	ldr	r3, [pc, #120]	; (8003d48 <UART_SetConfig+0x2fc>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cdc:	d012      	beq.n	8003d04 <UART_SetConfig+0x2b8>
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce2:	d802      	bhi.n	8003cea <UART_SetConfig+0x29e>
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d007      	beq.n	8003cf8 <UART_SetConfig+0x2ac>
 8003ce8:	e012      	b.n	8003d10 <UART_SetConfig+0x2c4>
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cee:	d006      	beq.n	8003cfe <UART_SetConfig+0x2b2>
 8003cf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003cf4:	d009      	beq.n	8003d0a <UART_SetConfig+0x2be>
 8003cf6:	e00b      	b.n	8003d10 <UART_SetConfig+0x2c4>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e04d      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	77fb      	strb	r3, [r7, #31]
 8003d02:	e04a      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003d04:	2304      	movs	r3, #4
 8003d06:	77fb      	strb	r3, [r7, #31]
 8003d08:	e047      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	77fb      	strb	r3, [r7, #31]
 8003d0e:	e044      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003d10:	2310      	movs	r3, #16
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	bf00      	nop
 8003d16:	e040      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a11      	ldr	r2, [pc, #68]	; (8003d64 <UART_SetConfig+0x318>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d139      	bne.n	8003d96 <UART_SetConfig+0x34a>
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <UART_SetConfig+0x2fc>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d30:	d027      	beq.n	8003d82 <UART_SetConfig+0x336>
 8003d32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d36:	d817      	bhi.n	8003d68 <UART_SetConfig+0x31c>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01c      	beq.n	8003d76 <UART_SetConfig+0x32a>
 8003d3c:	e027      	b.n	8003d8e <UART_SetConfig+0x342>
 8003d3e:	bf00      	nop
 8003d40:	efff69f3 	.word	0xefff69f3
 8003d44:	40011000 	.word	0x40011000
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40004400 	.word	0x40004400
 8003d50:	40004800 	.word	0x40004800
 8003d54:	40004c00 	.word	0x40004c00
 8003d58:	40005000 	.word	0x40005000
 8003d5c:	40011400 	.word	0x40011400
 8003d60:	40007800 	.word	0x40007800
 8003d64:	40007c00 	.word	0x40007c00
 8003d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d6c:	d006      	beq.n	8003d7c <UART_SetConfig+0x330>
 8003d6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d72:	d009      	beq.n	8003d88 <UART_SetConfig+0x33c>
 8003d74:	e00b      	b.n	8003d8e <UART_SetConfig+0x342>
 8003d76:	2300      	movs	r3, #0
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e00e      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	e00b      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003d82:	2304      	movs	r3, #4
 8003d84:	77fb      	strb	r3, [r7, #31]
 8003d86:	e008      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003d88:	2308      	movs	r3, #8
 8003d8a:	77fb      	strb	r3, [r7, #31]
 8003d8c:	e005      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003d8e:	2310      	movs	r3, #16
 8003d90:	77fb      	strb	r3, [r7, #31]
 8003d92:	bf00      	nop
 8003d94:	e001      	b.n	8003d9a <UART_SetConfig+0x34e>
 8003d96:	2310      	movs	r3, #16
 8003d98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da2:	d17f      	bne.n	8003ea4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003da4:	7ffb      	ldrb	r3, [r7, #31]
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d85c      	bhi.n	8003e64 <UART_SetConfig+0x418>
 8003daa:	a201      	add	r2, pc, #4	; (adr r2, 8003db0 <UART_SetConfig+0x364>)
 8003dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db0:	08003dd5 	.word	0x08003dd5
 8003db4:	08003df5 	.word	0x08003df5
 8003db8:	08003e15 	.word	0x08003e15
 8003dbc:	08003e65 	.word	0x08003e65
 8003dc0:	08003e2d 	.word	0x08003e2d
 8003dc4:	08003e65 	.word	0x08003e65
 8003dc8:	08003e65 	.word	0x08003e65
 8003dcc:	08003e65 	.word	0x08003e65
 8003dd0:	08003e4d 	.word	0x08003e4d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd4:	f7ff f840 	bl	8002e58 <HAL_RCC_GetPCLK1Freq>
 8003dd8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	005a      	lsls	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	441a      	add	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	61bb      	str	r3, [r7, #24]
        break;
 8003df2:	e03a      	b.n	8003e6a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df4:	f7ff f844 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 8003df8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	005a      	lsls	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	441a      	add	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	61bb      	str	r3, [r7, #24]
        break;
 8003e12:	e02a      	b.n	8003e6a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	085a      	lsrs	r2, r3, #1
 8003e1a:	4b5f      	ldr	r3, [pc, #380]	; (8003f98 <UART_SetConfig+0x54c>)
 8003e1c:	4413      	add	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6852      	ldr	r2, [r2, #4]
 8003e22:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	61bb      	str	r3, [r7, #24]
        break;
 8003e2a:	e01e      	b.n	8003e6a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2c:	f7fe ff30 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8003e30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	005a      	lsls	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	441a      	add	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	61bb      	str	r3, [r7, #24]
        break;
 8003e4a:	e00e      	b.n	8003e6a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	61bb      	str	r3, [r7, #24]
        break;
 8003e62:	e002      	b.n	8003e6a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	75fb      	strb	r3, [r7, #23]
        break;
 8003e68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b0f      	cmp	r3, #15
 8003e6e:	d916      	bls.n	8003e9e <UART_SetConfig+0x452>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e76:	d212      	bcs.n	8003e9e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	f023 030f 	bic.w	r3, r3, #15
 8003e80:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	085b      	lsrs	r3, r3, #1
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	897b      	ldrh	r3, [r7, #10]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	897a      	ldrh	r2, [r7, #10]
 8003e9a:	60da      	str	r2, [r3, #12]
 8003e9c:	e070      	b.n	8003f80 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75fb      	strb	r3, [r7, #23]
 8003ea2:	e06d      	b.n	8003f80 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003ea4:	7ffb      	ldrb	r3, [r7, #31]
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d859      	bhi.n	8003f5e <UART_SetConfig+0x512>
 8003eaa:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <UART_SetConfig+0x464>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003ed5 	.word	0x08003ed5
 8003eb4:	08003ef3 	.word	0x08003ef3
 8003eb8:	08003f11 	.word	0x08003f11
 8003ebc:	08003f5f 	.word	0x08003f5f
 8003ec0:	08003f29 	.word	0x08003f29
 8003ec4:	08003f5f 	.word	0x08003f5f
 8003ec8:	08003f5f 	.word	0x08003f5f
 8003ecc:	08003f5f 	.word	0x08003f5f
 8003ed0:	08003f47 	.word	0x08003f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed4:	f7fe ffc0 	bl	8002e58 <HAL_RCC_GetPCLK1Freq>
 8003ed8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	085a      	lsrs	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	441a      	add	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	61bb      	str	r3, [r7, #24]
        break;
 8003ef0:	e038      	b.n	8003f64 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef2:	f7fe ffc5 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 8003ef6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	085a      	lsrs	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	441a      	add	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	61bb      	str	r3, [r7, #24]
        break;
 8003f0e:	e029      	b.n	8003f64 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	085a      	lsrs	r2, r3, #1
 8003f16:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <UART_SetConfig+0x550>)
 8003f18:	4413      	add	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6852      	ldr	r2, [r2, #4]
 8003f1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	61bb      	str	r3, [r7, #24]
        break;
 8003f26:	e01d      	b.n	8003f64 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f28:	f7fe feb2 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8003f2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	085a      	lsrs	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	441a      	add	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	61bb      	str	r3, [r7, #24]
        break;
 8003f44:	e00e      	b.n	8003f64 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	61bb      	str	r3, [r7, #24]
        break;
 8003f5c:	e002      	b.n	8003f64 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	75fb      	strb	r3, [r7, #23]
        break;
 8003f62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b0f      	cmp	r3, #15
 8003f68:	d908      	bls.n	8003f7c <UART_SetConfig+0x530>
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d204      	bcs.n	8003f7c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	e001      	b.n	8003f80 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	01e84800 	.word	0x01e84800
 8003f9c:	00f42400 	.word	0x00f42400

08003fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01a      	beq.n	80040b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800409e:	d10a      	bne.n	80040b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00a      	beq.n	80040d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
  }
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040f2:	f7fd f845 	bl	8001180 <HAL_GetTick>
 80040f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b08      	cmp	r3, #8
 8004104:	d10e      	bne.n	8004124 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004106:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f82a 	bl	800416e <UART_WaitOnFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e020      	b.n	8004166 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b04      	cmp	r3, #4
 8004130:	d10e      	bne.n	8004150 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004132:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f814 	bl	800416e <UART_WaitOnFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e00a      	b.n	8004166 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b084      	sub	sp, #16
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	4613      	mov	r3, r2
 800417c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417e:	e05d      	b.n	800423c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d059      	beq.n	800423c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004188:	f7fc fffa 	bl	8001180 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	429a      	cmp	r2, r3
 8004196:	d302      	bcc.n	800419e <UART_WaitOnFlagUntilTimeout+0x30>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d11b      	bne.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 0201 	bic.w	r2, r2, #1
 80041bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2220      	movs	r2, #32
 80041c2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e042      	b.n	800425c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d02b      	beq.n	800423c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f2:	d123      	bne.n	800423c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041fc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800420c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0201 	bic.w	r2, r2, #1
 800421c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e00f      	b.n	800425c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69da      	ldr	r2, [r3, #28]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4013      	ands	r3, r2
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	429a      	cmp	r2, r3
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	461a      	mov	r2, r3
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	429a      	cmp	r2, r3
 8004258:	d092      	beq.n	8004180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004264:	b084      	sub	sp, #16
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	f107 001c 	add.w	r0, r7, #28
 8004272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	2b01      	cmp	r3, #1
 800427a:	d120      	bne.n	80042be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	4b20      	ldr	r3, [pc, #128]	; (8004310 <USB_CoreInit+0xac>)
 800428e:	4013      	ands	r3, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d105      	bne.n	80042b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fa52 	bl	800475c <USB_CoreReset>
 80042b8:	4603      	mov	r3, r0
 80042ba:	73fb      	strb	r3, [r7, #15]
 80042bc:	e010      	b.n	80042e0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fa46 	bl	800475c <USB_CoreReset>
 80042d0:	4603      	mov	r3, r0
 80042d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10b      	bne.n	80042fe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f043 0206 	orr.w	r2, r3, #6
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800430a:	b004      	add	sp, #16
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	ffbdffbf 	.word	0xffbdffbf

08004314 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f023 0201 	bic.w	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d106      	bne.n	8004362 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	60da      	str	r2, [r3, #12]
 8004360:	e00b      	b.n	800437a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	60da      	str	r2, [r3, #12]
 8004374:	e001      	b.n	800437a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e003      	b.n	8004382 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800437a:	2032      	movs	r0, #50	; 0x32
 800437c:	f7fc ff0c 	bl	8001198 <HAL_Delay>

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800438c:	b084      	sub	sp, #16
 800438e:	b580      	push	{r7, lr}
 8004390:	b086      	sub	sp, #24
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800439a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043a6:	2300      	movs	r3, #0
 80043a8:	613b      	str	r3, [r7, #16]
 80043aa:	e009      	b.n	80043c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	3340      	adds	r3, #64	; 0x40
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	2200      	movs	r2, #0
 80043b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	3301      	adds	r3, #1
 80043be:	613b      	str	r3, [r7, #16]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b0e      	cmp	r3, #14
 80043c4:	d9f2      	bls.n	80043ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d11c      	bne.n	8004406 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043da:	f043 0302 	orr.w	r3, r3, #2
 80043de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e005      	b.n	8004412 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004418:	461a      	mov	r2, r3
 800441a:	2300      	movs	r3, #0
 800441c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004424:	4619      	mov	r1, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442c:	461a      	mov	r2, r3
 800442e:	680b      	ldr	r3, [r1, #0]
 8004430:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004434:	2b01      	cmp	r3, #1
 8004436:	d10c      	bne.n	8004452 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d104      	bne.n	8004448 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800443e:	2100      	movs	r1, #0
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f959 	bl	80046f8 <USB_SetDevSpeed>
 8004446:	e018      	b.n	800447a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004448:	2101      	movs	r1, #1
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f954 	bl	80046f8 <USB_SetDevSpeed>
 8004450:	e013      	b.n	800447a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004454:	2b03      	cmp	r3, #3
 8004456:	d10c      	bne.n	8004472 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d104      	bne.n	8004468 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800445e:	2100      	movs	r1, #0
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f949 	bl	80046f8 <USB_SetDevSpeed>
 8004466:	e008      	b.n	800447a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004468:	2101      	movs	r1, #1
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f944 	bl	80046f8 <USB_SetDevSpeed>
 8004470:	e003      	b.n	800447a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004472:	2103      	movs	r1, #3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f93f 	bl	80046f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800447a:	2110      	movs	r1, #16
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f8f3 	bl	8004668 <USB_FlushTxFifo>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f911 	bl	80046b4 <USB_FlushRxFifo>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	461a      	mov	r2, r3
 80044a4:	2300      	movs	r3, #0
 80044a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ae:	461a      	mov	r2, r3
 80044b0:	2300      	movs	r3, #0
 80044b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ba:	461a      	mov	r2, r3
 80044bc:	2300      	movs	r3, #0
 80044be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	e043      	b.n	800454e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044dc:	d118      	bne.n	8004510 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f0:	461a      	mov	r2, r3
 80044f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	e013      	b.n	8004522 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004506:	461a      	mov	r2, r3
 8004508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e008      	b.n	8004522 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451c:	461a      	mov	r2, r3
 800451e:	2300      	movs	r3, #0
 8004520:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452e:	461a      	mov	r2, r3
 8004530:	2300      	movs	r3, #0
 8004532:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004540:	461a      	mov	r2, r3
 8004542:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	3301      	adds	r3, #1
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	429a      	cmp	r2, r3
 8004554:	d3b7      	bcc.n	80044c6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	e043      	b.n	80045e4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800456e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004572:	d118      	bne.n	80045a6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10a      	bne.n	8004590 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004586:	461a      	mov	r2, r3
 8004588:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	e013      	b.n	80045b8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459c:	461a      	mov	r2, r3
 800459e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	e008      	b.n	80045b8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b2:	461a      	mov	r2, r3
 80045b4:	2300      	movs	r3, #0
 80045b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	461a      	mov	r2, r3
 80045c6:	2300      	movs	r3, #0
 80045c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d6:	461a      	mov	r2, r3
 80045d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3301      	adds	r3, #1
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d3b7      	bcc.n	800455c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800460c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	2b00      	cmp	r3, #0
 8004612:	d105      	bne.n	8004620 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	f043 0210 	orr.w	r2, r3, #16
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <USB_DevInit+0x2d4>)
 8004626:	4313      	orrs	r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800462c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f043 0208 	orr.w	r2, r3, #8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800463e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d105      	bne.n	8004650 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699a      	ldr	r2, [r3, #24]
 8004648:	4b06      	ldr	r3, [pc, #24]	; (8004664 <USB_DevInit+0x2d8>)
 800464a:	4313      	orrs	r3, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004650:	7dfb      	ldrb	r3, [r7, #23]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800465c:	b004      	add	sp, #16
 800465e:	4770      	bx	lr
 8004660:	803c3800 	.word	0x803c3800
 8004664:	40000004 	.word	0x40000004

08004668 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	019b      	lsls	r3, r3, #6
 800467a:	f043 0220 	orr.w	r2, r3, #32
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3301      	adds	r3, #1
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <USB_FlushTxFifo+0x48>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d901      	bls.n	8004694 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e006      	b.n	80046a2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b20      	cmp	r3, #32
 800469e:	d0f0      	beq.n	8004682 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	00030d40 	.word	0x00030d40

080046b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2210      	movs	r2, #16
 80046c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3301      	adds	r3, #1
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a09      	ldr	r2, [pc, #36]	; (80046f4 <USB_FlushRxFifo+0x40>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d901      	bls.n	80046d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e006      	b.n	80046e6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d0f0      	beq.n	80046c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	00030d40 	.word	0x00030d40

080046f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	68f9      	ldr	r1, [r7, #12]
 8004714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004718:	4313      	orrs	r3, r2
 800471a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004744:	f043 0302 	orr.w	r3, r3, #2
 8004748:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800474a:	2003      	movs	r0, #3
 800474c:	f7fc fd24 	bl	8001198 <HAL_Delay>

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3301      	adds	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a13      	ldr	r2, [pc, #76]	; (80047c0 <USB_CoreReset+0x64>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e01b      	b.n	80047b2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	2b00      	cmp	r3, #0
 8004780:	daf2      	bge.n	8004768 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f043 0201 	orr.w	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3301      	adds	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <USB_CoreReset+0x64>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e006      	b.n	80047b2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d0f0      	beq.n	8004792 <USB_CoreReset+0x36>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	00030d40 	.word	0x00030d40

080047c4 <__errno>:
 80047c4:	4b01      	ldr	r3, [pc, #4]	; (80047cc <__errno+0x8>)
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	2000000c 	.word	0x2000000c

080047d0 <__libc_init_array>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	4e0d      	ldr	r6, [pc, #52]	; (8004808 <__libc_init_array+0x38>)
 80047d4:	4c0d      	ldr	r4, [pc, #52]	; (800480c <__libc_init_array+0x3c>)
 80047d6:	1ba4      	subs	r4, r4, r6
 80047d8:	10a4      	asrs	r4, r4, #2
 80047da:	2500      	movs	r5, #0
 80047dc:	42a5      	cmp	r5, r4
 80047de:	d109      	bne.n	80047f4 <__libc_init_array+0x24>
 80047e0:	4e0b      	ldr	r6, [pc, #44]	; (8004810 <__libc_init_array+0x40>)
 80047e2:	4c0c      	ldr	r4, [pc, #48]	; (8004814 <__libc_init_array+0x44>)
 80047e4:	f000 fc26 	bl	8005034 <_init>
 80047e8:	1ba4      	subs	r4, r4, r6
 80047ea:	10a4      	asrs	r4, r4, #2
 80047ec:	2500      	movs	r5, #0
 80047ee:	42a5      	cmp	r5, r4
 80047f0:	d105      	bne.n	80047fe <__libc_init_array+0x2e>
 80047f2:	bd70      	pop	{r4, r5, r6, pc}
 80047f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047f8:	4798      	blx	r3
 80047fa:	3501      	adds	r5, #1
 80047fc:	e7ee      	b.n	80047dc <__libc_init_array+0xc>
 80047fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004802:	4798      	blx	r3
 8004804:	3501      	adds	r5, #1
 8004806:	e7f2      	b.n	80047ee <__libc_init_array+0x1e>
 8004808:	080051c4 	.word	0x080051c4
 800480c:	080051c4 	.word	0x080051c4
 8004810:	080051c4 	.word	0x080051c4
 8004814:	080051c8 	.word	0x080051c8

08004818 <memset>:
 8004818:	4402      	add	r2, r0
 800481a:	4603      	mov	r3, r0
 800481c:	4293      	cmp	r3, r2
 800481e:	d100      	bne.n	8004822 <memset+0xa>
 8004820:	4770      	bx	lr
 8004822:	f803 1b01 	strb.w	r1, [r3], #1
 8004826:	e7f9      	b.n	800481c <memset+0x4>

08004828 <_vsiprintf_r>:
 8004828:	b500      	push	{lr}
 800482a:	b09b      	sub	sp, #108	; 0x6c
 800482c:	9100      	str	r1, [sp, #0]
 800482e:	9104      	str	r1, [sp, #16]
 8004830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004834:	9105      	str	r1, [sp, #20]
 8004836:	9102      	str	r1, [sp, #8]
 8004838:	4905      	ldr	r1, [pc, #20]	; (8004850 <_vsiprintf_r+0x28>)
 800483a:	9103      	str	r1, [sp, #12]
 800483c:	4669      	mov	r1, sp
 800483e:	f000 f86d 	bl	800491c <_svfiprintf_r>
 8004842:	9b00      	ldr	r3, [sp, #0]
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	b01b      	add	sp, #108	; 0x6c
 800484a:	f85d fb04 	ldr.w	pc, [sp], #4
 800484e:	bf00      	nop
 8004850:	ffff0208 	.word	0xffff0208

08004854 <vsiprintf>:
 8004854:	4613      	mov	r3, r2
 8004856:	460a      	mov	r2, r1
 8004858:	4601      	mov	r1, r0
 800485a:	4802      	ldr	r0, [pc, #8]	; (8004864 <vsiprintf+0x10>)
 800485c:	6800      	ldr	r0, [r0, #0]
 800485e:	f7ff bfe3 	b.w	8004828 <_vsiprintf_r>
 8004862:	bf00      	nop
 8004864:	2000000c 	.word	0x2000000c

08004868 <__ssputs_r>:
 8004868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800486c:	688e      	ldr	r6, [r1, #8]
 800486e:	429e      	cmp	r6, r3
 8004870:	4682      	mov	sl, r0
 8004872:	460c      	mov	r4, r1
 8004874:	4690      	mov	r8, r2
 8004876:	4699      	mov	r9, r3
 8004878:	d837      	bhi.n	80048ea <__ssputs_r+0x82>
 800487a:	898a      	ldrh	r2, [r1, #12]
 800487c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004880:	d031      	beq.n	80048e6 <__ssputs_r+0x7e>
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	6909      	ldr	r1, [r1, #16]
 8004886:	1a6f      	subs	r7, r5, r1
 8004888:	6965      	ldr	r5, [r4, #20]
 800488a:	2302      	movs	r3, #2
 800488c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004890:	fb95 f5f3 	sdiv	r5, r5, r3
 8004894:	f109 0301 	add.w	r3, r9, #1
 8004898:	443b      	add	r3, r7
 800489a:	429d      	cmp	r5, r3
 800489c:	bf38      	it	cc
 800489e:	461d      	movcc	r5, r3
 80048a0:	0553      	lsls	r3, r2, #21
 80048a2:	d530      	bpl.n	8004906 <__ssputs_r+0x9e>
 80048a4:	4629      	mov	r1, r5
 80048a6:	f000 fb2b 	bl	8004f00 <_malloc_r>
 80048aa:	4606      	mov	r6, r0
 80048ac:	b950      	cbnz	r0, 80048c4 <__ssputs_r+0x5c>
 80048ae:	230c      	movs	r3, #12
 80048b0:	f8ca 3000 	str.w	r3, [sl]
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ba:	81a3      	strh	r3, [r4, #12]
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295
 80048c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c4:	463a      	mov	r2, r7
 80048c6:	6921      	ldr	r1, [r4, #16]
 80048c8:	f000 faa8 	bl	8004e1c <memcpy>
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	6126      	str	r6, [r4, #16]
 80048da:	6165      	str	r5, [r4, #20]
 80048dc:	443e      	add	r6, r7
 80048de:	1bed      	subs	r5, r5, r7
 80048e0:	6026      	str	r6, [r4, #0]
 80048e2:	60a5      	str	r5, [r4, #8]
 80048e4:	464e      	mov	r6, r9
 80048e6:	454e      	cmp	r6, r9
 80048e8:	d900      	bls.n	80048ec <__ssputs_r+0x84>
 80048ea:	464e      	mov	r6, r9
 80048ec:	4632      	mov	r2, r6
 80048ee:	4641      	mov	r1, r8
 80048f0:	6820      	ldr	r0, [r4, #0]
 80048f2:	f000 fa9e 	bl	8004e32 <memmove>
 80048f6:	68a3      	ldr	r3, [r4, #8]
 80048f8:	1b9b      	subs	r3, r3, r6
 80048fa:	60a3      	str	r3, [r4, #8]
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	441e      	add	r6, r3
 8004900:	6026      	str	r6, [r4, #0]
 8004902:	2000      	movs	r0, #0
 8004904:	e7dc      	b.n	80048c0 <__ssputs_r+0x58>
 8004906:	462a      	mov	r2, r5
 8004908:	f000 fb54 	bl	8004fb4 <_realloc_r>
 800490c:	4606      	mov	r6, r0
 800490e:	2800      	cmp	r0, #0
 8004910:	d1e2      	bne.n	80048d8 <__ssputs_r+0x70>
 8004912:	6921      	ldr	r1, [r4, #16]
 8004914:	4650      	mov	r0, sl
 8004916:	f000 faa5 	bl	8004e64 <_free_r>
 800491a:	e7c8      	b.n	80048ae <__ssputs_r+0x46>

0800491c <_svfiprintf_r>:
 800491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004920:	461d      	mov	r5, r3
 8004922:	898b      	ldrh	r3, [r1, #12]
 8004924:	061f      	lsls	r7, r3, #24
 8004926:	b09d      	sub	sp, #116	; 0x74
 8004928:	4680      	mov	r8, r0
 800492a:	460c      	mov	r4, r1
 800492c:	4616      	mov	r6, r2
 800492e:	d50f      	bpl.n	8004950 <_svfiprintf_r+0x34>
 8004930:	690b      	ldr	r3, [r1, #16]
 8004932:	b96b      	cbnz	r3, 8004950 <_svfiprintf_r+0x34>
 8004934:	2140      	movs	r1, #64	; 0x40
 8004936:	f000 fae3 	bl	8004f00 <_malloc_r>
 800493a:	6020      	str	r0, [r4, #0]
 800493c:	6120      	str	r0, [r4, #16]
 800493e:	b928      	cbnz	r0, 800494c <_svfiprintf_r+0x30>
 8004940:	230c      	movs	r3, #12
 8004942:	f8c8 3000 	str.w	r3, [r8]
 8004946:	f04f 30ff 	mov.w	r0, #4294967295
 800494a:	e0c8      	b.n	8004ade <_svfiprintf_r+0x1c2>
 800494c:	2340      	movs	r3, #64	; 0x40
 800494e:	6163      	str	r3, [r4, #20]
 8004950:	2300      	movs	r3, #0
 8004952:	9309      	str	r3, [sp, #36]	; 0x24
 8004954:	2320      	movs	r3, #32
 8004956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800495a:	2330      	movs	r3, #48	; 0x30
 800495c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004960:	9503      	str	r5, [sp, #12]
 8004962:	f04f 0b01 	mov.w	fp, #1
 8004966:	4637      	mov	r7, r6
 8004968:	463d      	mov	r5, r7
 800496a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800496e:	b10b      	cbz	r3, 8004974 <_svfiprintf_r+0x58>
 8004970:	2b25      	cmp	r3, #37	; 0x25
 8004972:	d13e      	bne.n	80049f2 <_svfiprintf_r+0xd6>
 8004974:	ebb7 0a06 	subs.w	sl, r7, r6
 8004978:	d00b      	beq.n	8004992 <_svfiprintf_r+0x76>
 800497a:	4653      	mov	r3, sl
 800497c:	4632      	mov	r2, r6
 800497e:	4621      	mov	r1, r4
 8004980:	4640      	mov	r0, r8
 8004982:	f7ff ff71 	bl	8004868 <__ssputs_r>
 8004986:	3001      	adds	r0, #1
 8004988:	f000 80a4 	beq.w	8004ad4 <_svfiprintf_r+0x1b8>
 800498c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800498e:	4453      	add	r3, sl
 8004990:	9309      	str	r3, [sp, #36]	; 0x24
 8004992:	783b      	ldrb	r3, [r7, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 809d 	beq.w	8004ad4 <_svfiprintf_r+0x1b8>
 800499a:	2300      	movs	r3, #0
 800499c:	f04f 32ff 	mov.w	r2, #4294967295
 80049a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049a4:	9304      	str	r3, [sp, #16]
 80049a6:	9307      	str	r3, [sp, #28]
 80049a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049ac:	931a      	str	r3, [sp, #104]	; 0x68
 80049ae:	462f      	mov	r7, r5
 80049b0:	2205      	movs	r2, #5
 80049b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80049b6:	4850      	ldr	r0, [pc, #320]	; (8004af8 <_svfiprintf_r+0x1dc>)
 80049b8:	f7fb fc4a 	bl	8000250 <memchr>
 80049bc:	9b04      	ldr	r3, [sp, #16]
 80049be:	b9d0      	cbnz	r0, 80049f6 <_svfiprintf_r+0xda>
 80049c0:	06d9      	lsls	r1, r3, #27
 80049c2:	bf44      	itt	mi
 80049c4:	2220      	movmi	r2, #32
 80049c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049ca:	071a      	lsls	r2, r3, #28
 80049cc:	bf44      	itt	mi
 80049ce:	222b      	movmi	r2, #43	; 0x2b
 80049d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80049d4:	782a      	ldrb	r2, [r5, #0]
 80049d6:	2a2a      	cmp	r2, #42	; 0x2a
 80049d8:	d015      	beq.n	8004a06 <_svfiprintf_r+0xea>
 80049da:	9a07      	ldr	r2, [sp, #28]
 80049dc:	462f      	mov	r7, r5
 80049de:	2000      	movs	r0, #0
 80049e0:	250a      	movs	r5, #10
 80049e2:	4639      	mov	r1, r7
 80049e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049e8:	3b30      	subs	r3, #48	; 0x30
 80049ea:	2b09      	cmp	r3, #9
 80049ec:	d94d      	bls.n	8004a8a <_svfiprintf_r+0x16e>
 80049ee:	b1b8      	cbz	r0, 8004a20 <_svfiprintf_r+0x104>
 80049f0:	e00f      	b.n	8004a12 <_svfiprintf_r+0xf6>
 80049f2:	462f      	mov	r7, r5
 80049f4:	e7b8      	b.n	8004968 <_svfiprintf_r+0x4c>
 80049f6:	4a40      	ldr	r2, [pc, #256]	; (8004af8 <_svfiprintf_r+0x1dc>)
 80049f8:	1a80      	subs	r0, r0, r2
 80049fa:	fa0b f000 	lsl.w	r0, fp, r0
 80049fe:	4318      	orrs	r0, r3
 8004a00:	9004      	str	r0, [sp, #16]
 8004a02:	463d      	mov	r5, r7
 8004a04:	e7d3      	b.n	80049ae <_svfiprintf_r+0x92>
 8004a06:	9a03      	ldr	r2, [sp, #12]
 8004a08:	1d11      	adds	r1, r2, #4
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	9103      	str	r1, [sp, #12]
 8004a0e:	2a00      	cmp	r2, #0
 8004a10:	db01      	blt.n	8004a16 <_svfiprintf_r+0xfa>
 8004a12:	9207      	str	r2, [sp, #28]
 8004a14:	e004      	b.n	8004a20 <_svfiprintf_r+0x104>
 8004a16:	4252      	negs	r2, r2
 8004a18:	f043 0302 	orr.w	r3, r3, #2
 8004a1c:	9207      	str	r2, [sp, #28]
 8004a1e:	9304      	str	r3, [sp, #16]
 8004a20:	783b      	ldrb	r3, [r7, #0]
 8004a22:	2b2e      	cmp	r3, #46	; 0x2e
 8004a24:	d10c      	bne.n	8004a40 <_svfiprintf_r+0x124>
 8004a26:	787b      	ldrb	r3, [r7, #1]
 8004a28:	2b2a      	cmp	r3, #42	; 0x2a
 8004a2a:	d133      	bne.n	8004a94 <_svfiprintf_r+0x178>
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	1d1a      	adds	r2, r3, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	9203      	str	r2, [sp, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bfb8      	it	lt
 8004a38:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a3c:	3702      	adds	r7, #2
 8004a3e:	9305      	str	r3, [sp, #20]
 8004a40:	4d2e      	ldr	r5, [pc, #184]	; (8004afc <_svfiprintf_r+0x1e0>)
 8004a42:	7839      	ldrb	r1, [r7, #0]
 8004a44:	2203      	movs	r2, #3
 8004a46:	4628      	mov	r0, r5
 8004a48:	f7fb fc02 	bl	8000250 <memchr>
 8004a4c:	b138      	cbz	r0, 8004a5e <_svfiprintf_r+0x142>
 8004a4e:	2340      	movs	r3, #64	; 0x40
 8004a50:	1b40      	subs	r0, r0, r5
 8004a52:	fa03 f000 	lsl.w	r0, r3, r0
 8004a56:	9b04      	ldr	r3, [sp, #16]
 8004a58:	4303      	orrs	r3, r0
 8004a5a:	3701      	adds	r7, #1
 8004a5c:	9304      	str	r3, [sp, #16]
 8004a5e:	7839      	ldrb	r1, [r7, #0]
 8004a60:	4827      	ldr	r0, [pc, #156]	; (8004b00 <_svfiprintf_r+0x1e4>)
 8004a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a66:	2206      	movs	r2, #6
 8004a68:	1c7e      	adds	r6, r7, #1
 8004a6a:	f7fb fbf1 	bl	8000250 <memchr>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d038      	beq.n	8004ae4 <_svfiprintf_r+0x1c8>
 8004a72:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <_svfiprintf_r+0x1e8>)
 8004a74:	bb13      	cbnz	r3, 8004abc <_svfiprintf_r+0x1a0>
 8004a76:	9b03      	ldr	r3, [sp, #12]
 8004a78:	3307      	adds	r3, #7
 8004a7a:	f023 0307 	bic.w	r3, r3, #7
 8004a7e:	3308      	adds	r3, #8
 8004a80:	9303      	str	r3, [sp, #12]
 8004a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a84:	444b      	add	r3, r9
 8004a86:	9309      	str	r3, [sp, #36]	; 0x24
 8004a88:	e76d      	b.n	8004966 <_svfiprintf_r+0x4a>
 8004a8a:	fb05 3202 	mla	r2, r5, r2, r3
 8004a8e:	2001      	movs	r0, #1
 8004a90:	460f      	mov	r7, r1
 8004a92:	e7a6      	b.n	80049e2 <_svfiprintf_r+0xc6>
 8004a94:	2300      	movs	r3, #0
 8004a96:	3701      	adds	r7, #1
 8004a98:	9305      	str	r3, [sp, #20]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	250a      	movs	r5, #10
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aa4:	3a30      	subs	r2, #48	; 0x30
 8004aa6:	2a09      	cmp	r2, #9
 8004aa8:	d903      	bls.n	8004ab2 <_svfiprintf_r+0x196>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0c8      	beq.n	8004a40 <_svfiprintf_r+0x124>
 8004aae:	9105      	str	r1, [sp, #20]
 8004ab0:	e7c6      	b.n	8004a40 <_svfiprintf_r+0x124>
 8004ab2:	fb05 2101 	mla	r1, r5, r1, r2
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	4607      	mov	r7, r0
 8004aba:	e7f0      	b.n	8004a9e <_svfiprintf_r+0x182>
 8004abc:	ab03      	add	r3, sp, #12
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <_svfiprintf_r+0x1ec>)
 8004ac4:	a904      	add	r1, sp, #16
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	f3af 8000 	nop.w
 8004acc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ad0:	4681      	mov	r9, r0
 8004ad2:	d1d6      	bne.n	8004a82 <_svfiprintf_r+0x166>
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	065b      	lsls	r3, r3, #25
 8004ad8:	f53f af35 	bmi.w	8004946 <_svfiprintf_r+0x2a>
 8004adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ade:	b01d      	add	sp, #116	; 0x74
 8004ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae4:	ab03      	add	r3, sp, #12
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4622      	mov	r2, r4
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <_svfiprintf_r+0x1ec>)
 8004aec:	a904      	add	r1, sp, #16
 8004aee:	4640      	mov	r0, r8
 8004af0:	f000 f882 	bl	8004bf8 <_printf_i>
 8004af4:	e7ea      	b.n	8004acc <_svfiprintf_r+0x1b0>
 8004af6:	bf00      	nop
 8004af8:	08005188 	.word	0x08005188
 8004afc:	0800518e 	.word	0x0800518e
 8004b00:	08005192 	.word	0x08005192
 8004b04:	00000000 	.word	0x00000000
 8004b08:	08004869 	.word	0x08004869

08004b0c <_printf_common>:
 8004b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	4691      	mov	r9, r2
 8004b12:	461f      	mov	r7, r3
 8004b14:	688a      	ldr	r2, [r1, #8]
 8004b16:	690b      	ldr	r3, [r1, #16]
 8004b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	bfb8      	it	lt
 8004b20:	4613      	movlt	r3, r2
 8004b22:	f8c9 3000 	str.w	r3, [r9]
 8004b26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	b112      	cbz	r2, 8004b36 <_printf_common+0x2a>
 8004b30:	3301      	adds	r3, #1
 8004b32:	f8c9 3000 	str.w	r3, [r9]
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	0699      	lsls	r1, r3, #26
 8004b3a:	bf42      	ittt	mi
 8004b3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004b40:	3302      	addmi	r3, #2
 8004b42:	f8c9 3000 	strmi.w	r3, [r9]
 8004b46:	6825      	ldr	r5, [r4, #0]
 8004b48:	f015 0506 	ands.w	r5, r5, #6
 8004b4c:	d107      	bne.n	8004b5e <_printf_common+0x52>
 8004b4e:	f104 0a19 	add.w	sl, r4, #25
 8004b52:	68e3      	ldr	r3, [r4, #12]
 8004b54:	f8d9 2000 	ldr.w	r2, [r9]
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	42ab      	cmp	r3, r5
 8004b5c:	dc28      	bgt.n	8004bb0 <_printf_common+0xa4>
 8004b5e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	3300      	adds	r3, #0
 8004b66:	bf18      	it	ne
 8004b68:	2301      	movne	r3, #1
 8004b6a:	0692      	lsls	r2, r2, #26
 8004b6c:	d42d      	bmi.n	8004bca <_printf_common+0xbe>
 8004b6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b72:	4639      	mov	r1, r7
 8004b74:	4630      	mov	r0, r6
 8004b76:	47c0      	blx	r8
 8004b78:	3001      	adds	r0, #1
 8004b7a:	d020      	beq.n	8004bbe <_printf_common+0xb2>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	68e5      	ldr	r5, [r4, #12]
 8004b80:	f8d9 2000 	ldr.w	r2, [r9]
 8004b84:	f003 0306 	and.w	r3, r3, #6
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	bf08      	it	eq
 8004b8c:	1aad      	subeq	r5, r5, r2
 8004b8e:	68a3      	ldr	r3, [r4, #8]
 8004b90:	6922      	ldr	r2, [r4, #16]
 8004b92:	bf0c      	ite	eq
 8004b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b98:	2500      	movne	r5, #0
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	bfc4      	itt	gt
 8004b9e:	1a9b      	subgt	r3, r3, r2
 8004ba0:	18ed      	addgt	r5, r5, r3
 8004ba2:	f04f 0900 	mov.w	r9, #0
 8004ba6:	341a      	adds	r4, #26
 8004ba8:	454d      	cmp	r5, r9
 8004baa:	d11a      	bne.n	8004be2 <_printf_common+0xd6>
 8004bac:	2000      	movs	r0, #0
 8004bae:	e008      	b.n	8004bc2 <_printf_common+0xb6>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	4652      	mov	r2, sl
 8004bb4:	4639      	mov	r1, r7
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	47c0      	blx	r8
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d103      	bne.n	8004bc6 <_printf_common+0xba>
 8004bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8004bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc6:	3501      	adds	r5, #1
 8004bc8:	e7c3      	b.n	8004b52 <_printf_common+0x46>
 8004bca:	18e1      	adds	r1, r4, r3
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	2030      	movs	r0, #48	; 0x30
 8004bd0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bd4:	4422      	add	r2, r4
 8004bd6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bde:	3302      	adds	r3, #2
 8004be0:	e7c5      	b.n	8004b6e <_printf_common+0x62>
 8004be2:	2301      	movs	r3, #1
 8004be4:	4622      	mov	r2, r4
 8004be6:	4639      	mov	r1, r7
 8004be8:	4630      	mov	r0, r6
 8004bea:	47c0      	blx	r8
 8004bec:	3001      	adds	r0, #1
 8004bee:	d0e6      	beq.n	8004bbe <_printf_common+0xb2>
 8004bf0:	f109 0901 	add.w	r9, r9, #1
 8004bf4:	e7d8      	b.n	8004ba8 <_printf_common+0x9c>
	...

08004bf8 <_printf_i>:
 8004bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bfc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c00:	460c      	mov	r4, r1
 8004c02:	7e09      	ldrb	r1, [r1, #24]
 8004c04:	b085      	sub	sp, #20
 8004c06:	296e      	cmp	r1, #110	; 0x6e
 8004c08:	4617      	mov	r7, r2
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	4698      	mov	r8, r3
 8004c0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c10:	f000 80b3 	beq.w	8004d7a <_printf_i+0x182>
 8004c14:	d822      	bhi.n	8004c5c <_printf_i+0x64>
 8004c16:	2963      	cmp	r1, #99	; 0x63
 8004c18:	d036      	beq.n	8004c88 <_printf_i+0x90>
 8004c1a:	d80a      	bhi.n	8004c32 <_printf_i+0x3a>
 8004c1c:	2900      	cmp	r1, #0
 8004c1e:	f000 80b9 	beq.w	8004d94 <_printf_i+0x19c>
 8004c22:	2958      	cmp	r1, #88	; 0x58
 8004c24:	f000 8083 	beq.w	8004d2e <_printf_i+0x136>
 8004c28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c2c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004c30:	e032      	b.n	8004c98 <_printf_i+0xa0>
 8004c32:	2964      	cmp	r1, #100	; 0x64
 8004c34:	d001      	beq.n	8004c3a <_printf_i+0x42>
 8004c36:	2969      	cmp	r1, #105	; 0x69
 8004c38:	d1f6      	bne.n	8004c28 <_printf_i+0x30>
 8004c3a:	6820      	ldr	r0, [r4, #0]
 8004c3c:	6813      	ldr	r3, [r2, #0]
 8004c3e:	0605      	lsls	r5, r0, #24
 8004c40:	f103 0104 	add.w	r1, r3, #4
 8004c44:	d52a      	bpl.n	8004c9c <_printf_i+0xa4>
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	6011      	str	r1, [r2, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	da03      	bge.n	8004c56 <_printf_i+0x5e>
 8004c4e:	222d      	movs	r2, #45	; 0x2d
 8004c50:	425b      	negs	r3, r3
 8004c52:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004c56:	486f      	ldr	r0, [pc, #444]	; (8004e14 <_printf_i+0x21c>)
 8004c58:	220a      	movs	r2, #10
 8004c5a:	e039      	b.n	8004cd0 <_printf_i+0xd8>
 8004c5c:	2973      	cmp	r1, #115	; 0x73
 8004c5e:	f000 809d 	beq.w	8004d9c <_printf_i+0x1a4>
 8004c62:	d808      	bhi.n	8004c76 <_printf_i+0x7e>
 8004c64:	296f      	cmp	r1, #111	; 0x6f
 8004c66:	d020      	beq.n	8004caa <_printf_i+0xb2>
 8004c68:	2970      	cmp	r1, #112	; 0x70
 8004c6a:	d1dd      	bne.n	8004c28 <_printf_i+0x30>
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	f043 0320 	orr.w	r3, r3, #32
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	e003      	b.n	8004c7e <_printf_i+0x86>
 8004c76:	2975      	cmp	r1, #117	; 0x75
 8004c78:	d017      	beq.n	8004caa <_printf_i+0xb2>
 8004c7a:	2978      	cmp	r1, #120	; 0x78
 8004c7c:	d1d4      	bne.n	8004c28 <_printf_i+0x30>
 8004c7e:	2378      	movs	r3, #120	; 0x78
 8004c80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c84:	4864      	ldr	r0, [pc, #400]	; (8004e18 <_printf_i+0x220>)
 8004c86:	e055      	b.n	8004d34 <_printf_i+0x13c>
 8004c88:	6813      	ldr	r3, [r2, #0]
 8004c8a:	1d19      	adds	r1, r3, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6011      	str	r1, [r2, #0]
 8004c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e08c      	b.n	8004db6 <_printf_i+0x1be>
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6011      	str	r1, [r2, #0]
 8004ca0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ca4:	bf18      	it	ne
 8004ca6:	b21b      	sxthne	r3, r3
 8004ca8:	e7cf      	b.n	8004c4a <_printf_i+0x52>
 8004caa:	6813      	ldr	r3, [r2, #0]
 8004cac:	6825      	ldr	r5, [r4, #0]
 8004cae:	1d18      	adds	r0, r3, #4
 8004cb0:	6010      	str	r0, [r2, #0]
 8004cb2:	0628      	lsls	r0, r5, #24
 8004cb4:	d501      	bpl.n	8004cba <_printf_i+0xc2>
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	e002      	b.n	8004cc0 <_printf_i+0xc8>
 8004cba:	0668      	lsls	r0, r5, #25
 8004cbc:	d5fb      	bpl.n	8004cb6 <_printf_i+0xbe>
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	4854      	ldr	r0, [pc, #336]	; (8004e14 <_printf_i+0x21c>)
 8004cc2:	296f      	cmp	r1, #111	; 0x6f
 8004cc4:	bf14      	ite	ne
 8004cc6:	220a      	movne	r2, #10
 8004cc8:	2208      	moveq	r2, #8
 8004cca:	2100      	movs	r1, #0
 8004ccc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cd0:	6865      	ldr	r5, [r4, #4]
 8004cd2:	60a5      	str	r5, [r4, #8]
 8004cd4:	2d00      	cmp	r5, #0
 8004cd6:	f2c0 8095 	blt.w	8004e04 <_printf_i+0x20c>
 8004cda:	6821      	ldr	r1, [r4, #0]
 8004cdc:	f021 0104 	bic.w	r1, r1, #4
 8004ce0:	6021      	str	r1, [r4, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d13d      	bne.n	8004d62 <_printf_i+0x16a>
 8004ce6:	2d00      	cmp	r5, #0
 8004ce8:	f040 808e 	bne.w	8004e08 <_printf_i+0x210>
 8004cec:	4665      	mov	r5, ip
 8004cee:	2a08      	cmp	r2, #8
 8004cf0:	d10b      	bne.n	8004d0a <_printf_i+0x112>
 8004cf2:	6823      	ldr	r3, [r4, #0]
 8004cf4:	07db      	lsls	r3, r3, #31
 8004cf6:	d508      	bpl.n	8004d0a <_printf_i+0x112>
 8004cf8:	6923      	ldr	r3, [r4, #16]
 8004cfa:	6862      	ldr	r2, [r4, #4]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	bfde      	ittt	le
 8004d00:	2330      	movle	r3, #48	; 0x30
 8004d02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d0a:	ebac 0305 	sub.w	r3, ip, r5
 8004d0e:	6123      	str	r3, [r4, #16]
 8004d10:	f8cd 8000 	str.w	r8, [sp]
 8004d14:	463b      	mov	r3, r7
 8004d16:	aa03      	add	r2, sp, #12
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f7ff fef6 	bl	8004b0c <_printf_common>
 8004d20:	3001      	adds	r0, #1
 8004d22:	d14d      	bne.n	8004dc0 <_printf_i+0x1c8>
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	b005      	add	sp, #20
 8004d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d2e:	4839      	ldr	r0, [pc, #228]	; (8004e14 <_printf_i+0x21c>)
 8004d30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004d34:	6813      	ldr	r3, [r2, #0]
 8004d36:	6821      	ldr	r1, [r4, #0]
 8004d38:	1d1d      	adds	r5, r3, #4
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6015      	str	r5, [r2, #0]
 8004d3e:	060a      	lsls	r2, r1, #24
 8004d40:	d50b      	bpl.n	8004d5a <_printf_i+0x162>
 8004d42:	07ca      	lsls	r2, r1, #31
 8004d44:	bf44      	itt	mi
 8004d46:	f041 0120 	orrmi.w	r1, r1, #32
 8004d4a:	6021      	strmi	r1, [r4, #0]
 8004d4c:	b91b      	cbnz	r3, 8004d56 <_printf_i+0x15e>
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	f022 0220 	bic.w	r2, r2, #32
 8004d54:	6022      	str	r2, [r4, #0]
 8004d56:	2210      	movs	r2, #16
 8004d58:	e7b7      	b.n	8004cca <_printf_i+0xd2>
 8004d5a:	064d      	lsls	r5, r1, #25
 8004d5c:	bf48      	it	mi
 8004d5e:	b29b      	uxthmi	r3, r3
 8004d60:	e7ef      	b.n	8004d42 <_printf_i+0x14a>
 8004d62:	4665      	mov	r5, ip
 8004d64:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d68:	fb02 3311 	mls	r3, r2, r1, r3
 8004d6c:	5cc3      	ldrb	r3, [r0, r3]
 8004d6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004d72:	460b      	mov	r3, r1
 8004d74:	2900      	cmp	r1, #0
 8004d76:	d1f5      	bne.n	8004d64 <_printf_i+0x16c>
 8004d78:	e7b9      	b.n	8004cee <_printf_i+0xf6>
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	6825      	ldr	r5, [r4, #0]
 8004d7e:	6961      	ldr	r1, [r4, #20]
 8004d80:	1d18      	adds	r0, r3, #4
 8004d82:	6010      	str	r0, [r2, #0]
 8004d84:	0628      	lsls	r0, r5, #24
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	d501      	bpl.n	8004d8e <_printf_i+0x196>
 8004d8a:	6019      	str	r1, [r3, #0]
 8004d8c:	e002      	b.n	8004d94 <_printf_i+0x19c>
 8004d8e:	066a      	lsls	r2, r5, #25
 8004d90:	d5fb      	bpl.n	8004d8a <_printf_i+0x192>
 8004d92:	8019      	strh	r1, [r3, #0]
 8004d94:	2300      	movs	r3, #0
 8004d96:	6123      	str	r3, [r4, #16]
 8004d98:	4665      	mov	r5, ip
 8004d9a:	e7b9      	b.n	8004d10 <_printf_i+0x118>
 8004d9c:	6813      	ldr	r3, [r2, #0]
 8004d9e:	1d19      	adds	r1, r3, #4
 8004da0:	6011      	str	r1, [r2, #0]
 8004da2:	681d      	ldr	r5, [r3, #0]
 8004da4:	6862      	ldr	r2, [r4, #4]
 8004da6:	2100      	movs	r1, #0
 8004da8:	4628      	mov	r0, r5
 8004daa:	f7fb fa51 	bl	8000250 <memchr>
 8004dae:	b108      	cbz	r0, 8004db4 <_printf_i+0x1bc>
 8004db0:	1b40      	subs	r0, r0, r5
 8004db2:	6060      	str	r0, [r4, #4]
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	6123      	str	r3, [r4, #16]
 8004db8:	2300      	movs	r3, #0
 8004dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dbe:	e7a7      	b.n	8004d10 <_printf_i+0x118>
 8004dc0:	6923      	ldr	r3, [r4, #16]
 8004dc2:	462a      	mov	r2, r5
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	47c0      	blx	r8
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d0aa      	beq.n	8004d24 <_printf_i+0x12c>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	079b      	lsls	r3, r3, #30
 8004dd2:	d413      	bmi.n	8004dfc <_printf_i+0x204>
 8004dd4:	68e0      	ldr	r0, [r4, #12]
 8004dd6:	9b03      	ldr	r3, [sp, #12]
 8004dd8:	4298      	cmp	r0, r3
 8004dda:	bfb8      	it	lt
 8004ddc:	4618      	movlt	r0, r3
 8004dde:	e7a3      	b.n	8004d28 <_printf_i+0x130>
 8004de0:	2301      	movs	r3, #1
 8004de2:	464a      	mov	r2, r9
 8004de4:	4639      	mov	r1, r7
 8004de6:	4630      	mov	r0, r6
 8004de8:	47c0      	blx	r8
 8004dea:	3001      	adds	r0, #1
 8004dec:	d09a      	beq.n	8004d24 <_printf_i+0x12c>
 8004dee:	3501      	adds	r5, #1
 8004df0:	68e3      	ldr	r3, [r4, #12]
 8004df2:	9a03      	ldr	r2, [sp, #12]
 8004df4:	1a9b      	subs	r3, r3, r2
 8004df6:	42ab      	cmp	r3, r5
 8004df8:	dcf2      	bgt.n	8004de0 <_printf_i+0x1e8>
 8004dfa:	e7eb      	b.n	8004dd4 <_printf_i+0x1dc>
 8004dfc:	2500      	movs	r5, #0
 8004dfe:	f104 0919 	add.w	r9, r4, #25
 8004e02:	e7f5      	b.n	8004df0 <_printf_i+0x1f8>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1ac      	bne.n	8004d62 <_printf_i+0x16a>
 8004e08:	7803      	ldrb	r3, [r0, #0]
 8004e0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e12:	e76c      	b.n	8004cee <_printf_i+0xf6>
 8004e14:	08005199 	.word	0x08005199
 8004e18:	080051aa 	.word	0x080051aa

08004e1c <memcpy>:
 8004e1c:	b510      	push	{r4, lr}
 8004e1e:	1e43      	subs	r3, r0, #1
 8004e20:	440a      	add	r2, r1
 8004e22:	4291      	cmp	r1, r2
 8004e24:	d100      	bne.n	8004e28 <memcpy+0xc>
 8004e26:	bd10      	pop	{r4, pc}
 8004e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e30:	e7f7      	b.n	8004e22 <memcpy+0x6>

08004e32 <memmove>:
 8004e32:	4288      	cmp	r0, r1
 8004e34:	b510      	push	{r4, lr}
 8004e36:	eb01 0302 	add.w	r3, r1, r2
 8004e3a:	d807      	bhi.n	8004e4c <memmove+0x1a>
 8004e3c:	1e42      	subs	r2, r0, #1
 8004e3e:	4299      	cmp	r1, r3
 8004e40:	d00a      	beq.n	8004e58 <memmove+0x26>
 8004e42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e46:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004e4a:	e7f8      	b.n	8004e3e <memmove+0xc>
 8004e4c:	4283      	cmp	r3, r0
 8004e4e:	d9f5      	bls.n	8004e3c <memmove+0xa>
 8004e50:	1881      	adds	r1, r0, r2
 8004e52:	1ad2      	subs	r2, r2, r3
 8004e54:	42d3      	cmn	r3, r2
 8004e56:	d100      	bne.n	8004e5a <memmove+0x28>
 8004e58:	bd10      	pop	{r4, pc}
 8004e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004e62:	e7f7      	b.n	8004e54 <memmove+0x22>

08004e64 <_free_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4605      	mov	r5, r0
 8004e68:	2900      	cmp	r1, #0
 8004e6a:	d045      	beq.n	8004ef8 <_free_r+0x94>
 8004e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e70:	1f0c      	subs	r4, r1, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bfb8      	it	lt
 8004e76:	18e4      	addlt	r4, r4, r3
 8004e78:	f000 f8d2 	bl	8005020 <__malloc_lock>
 8004e7c:	4a1f      	ldr	r2, [pc, #124]	; (8004efc <_free_r+0x98>)
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	4610      	mov	r0, r2
 8004e82:	b933      	cbnz	r3, 8004e92 <_free_r+0x2e>
 8004e84:	6063      	str	r3, [r4, #4]
 8004e86:	6014      	str	r4, [r2, #0]
 8004e88:	4628      	mov	r0, r5
 8004e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e8e:	f000 b8c8 	b.w	8005022 <__malloc_unlock>
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	d90c      	bls.n	8004eb0 <_free_r+0x4c>
 8004e96:	6821      	ldr	r1, [r4, #0]
 8004e98:	1862      	adds	r2, r4, r1
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	bf04      	itt	eq
 8004e9e:	681a      	ldreq	r2, [r3, #0]
 8004ea0:	685b      	ldreq	r3, [r3, #4]
 8004ea2:	6063      	str	r3, [r4, #4]
 8004ea4:	bf04      	itt	eq
 8004ea6:	1852      	addeq	r2, r2, r1
 8004ea8:	6022      	streq	r2, [r4, #0]
 8004eaa:	6004      	str	r4, [r0, #0]
 8004eac:	e7ec      	b.n	8004e88 <_free_r+0x24>
 8004eae:	4613      	mov	r3, r2
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	b10a      	cbz	r2, 8004eb8 <_free_r+0x54>
 8004eb4:	42a2      	cmp	r2, r4
 8004eb6:	d9fa      	bls.n	8004eae <_free_r+0x4a>
 8004eb8:	6819      	ldr	r1, [r3, #0]
 8004eba:	1858      	adds	r0, r3, r1
 8004ebc:	42a0      	cmp	r0, r4
 8004ebe:	d10b      	bne.n	8004ed8 <_free_r+0x74>
 8004ec0:	6820      	ldr	r0, [r4, #0]
 8004ec2:	4401      	add	r1, r0
 8004ec4:	1858      	adds	r0, r3, r1
 8004ec6:	4282      	cmp	r2, r0
 8004ec8:	6019      	str	r1, [r3, #0]
 8004eca:	d1dd      	bne.n	8004e88 <_free_r+0x24>
 8004ecc:	6810      	ldr	r0, [r2, #0]
 8004ece:	6852      	ldr	r2, [r2, #4]
 8004ed0:	605a      	str	r2, [r3, #4]
 8004ed2:	4401      	add	r1, r0
 8004ed4:	6019      	str	r1, [r3, #0]
 8004ed6:	e7d7      	b.n	8004e88 <_free_r+0x24>
 8004ed8:	d902      	bls.n	8004ee0 <_free_r+0x7c>
 8004eda:	230c      	movs	r3, #12
 8004edc:	602b      	str	r3, [r5, #0]
 8004ede:	e7d3      	b.n	8004e88 <_free_r+0x24>
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	1821      	adds	r1, r4, r0
 8004ee4:	428a      	cmp	r2, r1
 8004ee6:	bf04      	itt	eq
 8004ee8:	6811      	ldreq	r1, [r2, #0]
 8004eea:	6852      	ldreq	r2, [r2, #4]
 8004eec:	6062      	str	r2, [r4, #4]
 8004eee:	bf04      	itt	eq
 8004ef0:	1809      	addeq	r1, r1, r0
 8004ef2:	6021      	streq	r1, [r4, #0]
 8004ef4:	605c      	str	r4, [r3, #4]
 8004ef6:	e7c7      	b.n	8004e88 <_free_r+0x24>
 8004ef8:	bd38      	pop	{r3, r4, r5, pc}
 8004efa:	bf00      	nop
 8004efc:	20000090 	.word	0x20000090

08004f00 <_malloc_r>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	1ccd      	adds	r5, r1, #3
 8004f04:	f025 0503 	bic.w	r5, r5, #3
 8004f08:	3508      	adds	r5, #8
 8004f0a:	2d0c      	cmp	r5, #12
 8004f0c:	bf38      	it	cc
 8004f0e:	250c      	movcc	r5, #12
 8004f10:	2d00      	cmp	r5, #0
 8004f12:	4606      	mov	r6, r0
 8004f14:	db01      	blt.n	8004f1a <_malloc_r+0x1a>
 8004f16:	42a9      	cmp	r1, r5
 8004f18:	d903      	bls.n	8004f22 <_malloc_r+0x22>
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	6033      	str	r3, [r6, #0]
 8004f1e:	2000      	movs	r0, #0
 8004f20:	bd70      	pop	{r4, r5, r6, pc}
 8004f22:	f000 f87d 	bl	8005020 <__malloc_lock>
 8004f26:	4a21      	ldr	r2, [pc, #132]	; (8004fac <_malloc_r+0xac>)
 8004f28:	6814      	ldr	r4, [r2, #0]
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	b991      	cbnz	r1, 8004f54 <_malloc_r+0x54>
 8004f2e:	4c20      	ldr	r4, [pc, #128]	; (8004fb0 <_malloc_r+0xb0>)
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	b91b      	cbnz	r3, 8004f3c <_malloc_r+0x3c>
 8004f34:	4630      	mov	r0, r6
 8004f36:	f000 f863 	bl	8005000 <_sbrk_r>
 8004f3a:	6020      	str	r0, [r4, #0]
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f000 f85e 	bl	8005000 <_sbrk_r>
 8004f44:	1c43      	adds	r3, r0, #1
 8004f46:	d124      	bne.n	8004f92 <_malloc_r+0x92>
 8004f48:	230c      	movs	r3, #12
 8004f4a:	6033      	str	r3, [r6, #0]
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f000 f868 	bl	8005022 <__malloc_unlock>
 8004f52:	e7e4      	b.n	8004f1e <_malloc_r+0x1e>
 8004f54:	680b      	ldr	r3, [r1, #0]
 8004f56:	1b5b      	subs	r3, r3, r5
 8004f58:	d418      	bmi.n	8004f8c <_malloc_r+0x8c>
 8004f5a:	2b0b      	cmp	r3, #11
 8004f5c:	d90f      	bls.n	8004f7e <_malloc_r+0x7e>
 8004f5e:	600b      	str	r3, [r1, #0]
 8004f60:	50cd      	str	r5, [r1, r3]
 8004f62:	18cc      	adds	r4, r1, r3
 8004f64:	4630      	mov	r0, r6
 8004f66:	f000 f85c 	bl	8005022 <__malloc_unlock>
 8004f6a:	f104 000b 	add.w	r0, r4, #11
 8004f6e:	1d23      	adds	r3, r4, #4
 8004f70:	f020 0007 	bic.w	r0, r0, #7
 8004f74:	1ac3      	subs	r3, r0, r3
 8004f76:	d0d3      	beq.n	8004f20 <_malloc_r+0x20>
 8004f78:	425a      	negs	r2, r3
 8004f7a:	50e2      	str	r2, [r4, r3]
 8004f7c:	e7d0      	b.n	8004f20 <_malloc_r+0x20>
 8004f7e:	428c      	cmp	r4, r1
 8004f80:	684b      	ldr	r3, [r1, #4]
 8004f82:	bf16      	itet	ne
 8004f84:	6063      	strne	r3, [r4, #4]
 8004f86:	6013      	streq	r3, [r2, #0]
 8004f88:	460c      	movne	r4, r1
 8004f8a:	e7eb      	b.n	8004f64 <_malloc_r+0x64>
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	6849      	ldr	r1, [r1, #4]
 8004f90:	e7cc      	b.n	8004f2c <_malloc_r+0x2c>
 8004f92:	1cc4      	adds	r4, r0, #3
 8004f94:	f024 0403 	bic.w	r4, r4, #3
 8004f98:	42a0      	cmp	r0, r4
 8004f9a:	d005      	beq.n	8004fa8 <_malloc_r+0xa8>
 8004f9c:	1a21      	subs	r1, r4, r0
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	f000 f82e 	bl	8005000 <_sbrk_r>
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d0cf      	beq.n	8004f48 <_malloc_r+0x48>
 8004fa8:	6025      	str	r5, [r4, #0]
 8004faa:	e7db      	b.n	8004f64 <_malloc_r+0x64>
 8004fac:	20000090 	.word	0x20000090
 8004fb0:	20000094 	.word	0x20000094

08004fb4 <_realloc_r>:
 8004fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb6:	4607      	mov	r7, r0
 8004fb8:	4614      	mov	r4, r2
 8004fba:	460e      	mov	r6, r1
 8004fbc:	b921      	cbnz	r1, 8004fc8 <_realloc_r+0x14>
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004fc4:	f7ff bf9c 	b.w	8004f00 <_malloc_r>
 8004fc8:	b922      	cbnz	r2, 8004fd4 <_realloc_r+0x20>
 8004fca:	f7ff ff4b 	bl	8004e64 <_free_r>
 8004fce:	4625      	mov	r5, r4
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fd4:	f000 f826 	bl	8005024 <_malloc_usable_size_r>
 8004fd8:	42a0      	cmp	r0, r4
 8004fda:	d20f      	bcs.n	8004ffc <_realloc_r+0x48>
 8004fdc:	4621      	mov	r1, r4
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f7ff ff8e 	bl	8004f00 <_malloc_r>
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d0f2      	beq.n	8004fd0 <_realloc_r+0x1c>
 8004fea:	4631      	mov	r1, r6
 8004fec:	4622      	mov	r2, r4
 8004fee:	f7ff ff15 	bl	8004e1c <memcpy>
 8004ff2:	4631      	mov	r1, r6
 8004ff4:	4638      	mov	r0, r7
 8004ff6:	f7ff ff35 	bl	8004e64 <_free_r>
 8004ffa:	e7e9      	b.n	8004fd0 <_realloc_r+0x1c>
 8004ffc:	4635      	mov	r5, r6
 8004ffe:	e7e7      	b.n	8004fd0 <_realloc_r+0x1c>

08005000 <_sbrk_r>:
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	4c06      	ldr	r4, [pc, #24]	; (800501c <_sbrk_r+0x1c>)
 8005004:	2300      	movs	r3, #0
 8005006:	4605      	mov	r5, r0
 8005008:	4608      	mov	r0, r1
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	f7fb fff2 	bl	8000ff4 <_sbrk>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d102      	bne.n	800501a <_sbrk_r+0x1a>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	b103      	cbz	r3, 800501a <_sbrk_r+0x1a>
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	200006d4 	.word	0x200006d4

08005020 <__malloc_lock>:
 8005020:	4770      	bx	lr

08005022 <__malloc_unlock>:
 8005022:	4770      	bx	lr

08005024 <_malloc_usable_size_r>:
 8005024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005028:	1f18      	subs	r0, r3, #4
 800502a:	2b00      	cmp	r3, #0
 800502c:	bfbc      	itt	lt
 800502e:	580b      	ldrlt	r3, [r1, r0]
 8005030:	18c0      	addlt	r0, r0, r3
 8005032:	4770      	bx	lr

08005034 <_init>:
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005036:	bf00      	nop
 8005038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503a:	bc08      	pop	{r3}
 800503c:	469e      	mov	lr, r3
 800503e:	4770      	bx	lr

08005040 <_fini>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	bf00      	nop
 8005044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005046:	bc08      	pop	{r3}
 8005048:	469e      	mov	lr, r3
 800504a:	4770      	bx	lr
