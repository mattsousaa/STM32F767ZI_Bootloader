
02_User_app_STM32F7xxx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc0  080081f8  080081f8  000081f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800adb8  0800adb8  0000adb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800add0  0800add0  0001002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800add0  0800add0  0000add0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800add8  0800add8  0001002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800add8  0800add8  0000add8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800addc  0800addc  0000addc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800ade0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000002c  0800ae0c  0001002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800ae0c  00010114  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ab3  00000000  00000000  0001005a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000160a  00000000  00000000  00018b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b8  00000000  00000000  0001a118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f0  00000000  00000000  0001a8d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027164  00000000  00000000  0001afc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000721c  00000000  00000000  00042124  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6e9d  00000000  00000000  00049340  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001401dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dfc  00000000  00000000  00140258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080081f8 <__do_global_dtors_aux>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	4c05      	ldr	r4, [pc, #20]	; (8008210 <__do_global_dtors_aux+0x18>)
 80081fc:	7823      	ldrb	r3, [r4, #0]
 80081fe:	b933      	cbnz	r3, 800820e <__do_global_dtors_aux+0x16>
 8008200:	4b04      	ldr	r3, [pc, #16]	; (8008214 <__do_global_dtors_aux+0x1c>)
 8008202:	b113      	cbz	r3, 800820a <__do_global_dtors_aux+0x12>
 8008204:	4804      	ldr	r0, [pc, #16]	; (8008218 <__do_global_dtors_aux+0x20>)
 8008206:	f3af 8000 	nop.w
 800820a:	2301      	movs	r3, #1
 800820c:	7023      	strb	r3, [r4, #0]
 800820e:	bd10      	pop	{r4, pc}
 8008210:	2000002c 	.word	0x2000002c
 8008214:	00000000 	.word	0x00000000
 8008218:	0800ada0 	.word	0x0800ada0

0800821c <frame_dummy>:
 800821c:	b508      	push	{r3, lr}
 800821e:	4b03      	ldr	r3, [pc, #12]	; (800822c <frame_dummy+0x10>)
 8008220:	b11b      	cbz	r3, 800822a <frame_dummy+0xe>
 8008222:	4903      	ldr	r1, [pc, #12]	; (8008230 <frame_dummy+0x14>)
 8008224:	4803      	ldr	r0, [pc, #12]	; (8008234 <frame_dummy+0x18>)
 8008226:	f3af 8000 	nop.w
 800822a:	bd08      	pop	{r3, pc}
 800822c:	00000000 	.word	0x00000000
 8008230:	20000030 	.word	0x20000030
 8008234:	0800ada0 	.word	0x0800ada0

08008238 <__aeabi_uldivmod>:
 8008238:	b953      	cbnz	r3, 8008250 <__aeabi_uldivmod+0x18>
 800823a:	b94a      	cbnz	r2, 8008250 <__aeabi_uldivmod+0x18>
 800823c:	2900      	cmp	r1, #0
 800823e:	bf08      	it	eq
 8008240:	2800      	cmpeq	r0, #0
 8008242:	bf1c      	itt	ne
 8008244:	f04f 31ff 	movne.w	r1, #4294967295
 8008248:	f04f 30ff 	movne.w	r0, #4294967295
 800824c:	f000 b972 	b.w	8008534 <__aeabi_idiv0>
 8008250:	f1ad 0c08 	sub.w	ip, sp, #8
 8008254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008258:	f000 f806 	bl	8008268 <__udivmoddi4>
 800825c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008264:	b004      	add	sp, #16
 8008266:	4770      	bx	lr

08008268 <__udivmoddi4>:
 8008268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800826c:	9e08      	ldr	r6, [sp, #32]
 800826e:	4604      	mov	r4, r0
 8008270:	4688      	mov	r8, r1
 8008272:	2b00      	cmp	r3, #0
 8008274:	d14b      	bne.n	800830e <__udivmoddi4+0xa6>
 8008276:	428a      	cmp	r2, r1
 8008278:	4615      	mov	r5, r2
 800827a:	d967      	bls.n	800834c <__udivmoddi4+0xe4>
 800827c:	fab2 f282 	clz	r2, r2
 8008280:	b14a      	cbz	r2, 8008296 <__udivmoddi4+0x2e>
 8008282:	f1c2 0720 	rsb	r7, r2, #32
 8008286:	fa01 f302 	lsl.w	r3, r1, r2
 800828a:	fa20 f707 	lsr.w	r7, r0, r7
 800828e:	4095      	lsls	r5, r2
 8008290:	ea47 0803 	orr.w	r8, r7, r3
 8008294:	4094      	lsls	r4, r2
 8008296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800829a:	0c23      	lsrs	r3, r4, #16
 800829c:	fbb8 f7fe 	udiv	r7, r8, lr
 80082a0:	fa1f fc85 	uxth.w	ip, r5
 80082a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80082a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80082ac:	fb07 f10c 	mul.w	r1, r7, ip
 80082b0:	4299      	cmp	r1, r3
 80082b2:	d909      	bls.n	80082c8 <__udivmoddi4+0x60>
 80082b4:	18eb      	adds	r3, r5, r3
 80082b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80082ba:	f080 811b 	bcs.w	80084f4 <__udivmoddi4+0x28c>
 80082be:	4299      	cmp	r1, r3
 80082c0:	f240 8118 	bls.w	80084f4 <__udivmoddi4+0x28c>
 80082c4:	3f02      	subs	r7, #2
 80082c6:	442b      	add	r3, r5
 80082c8:	1a5b      	subs	r3, r3, r1
 80082ca:	b2a4      	uxth	r4, r4
 80082cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80082d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80082d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80082d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80082dc:	45a4      	cmp	ip, r4
 80082de:	d909      	bls.n	80082f4 <__udivmoddi4+0x8c>
 80082e0:	192c      	adds	r4, r5, r4
 80082e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80082e6:	f080 8107 	bcs.w	80084f8 <__udivmoddi4+0x290>
 80082ea:	45a4      	cmp	ip, r4
 80082ec:	f240 8104 	bls.w	80084f8 <__udivmoddi4+0x290>
 80082f0:	3802      	subs	r0, #2
 80082f2:	442c      	add	r4, r5
 80082f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80082f8:	eba4 040c 	sub.w	r4, r4, ip
 80082fc:	2700      	movs	r7, #0
 80082fe:	b11e      	cbz	r6, 8008308 <__udivmoddi4+0xa0>
 8008300:	40d4      	lsrs	r4, r2
 8008302:	2300      	movs	r3, #0
 8008304:	e9c6 4300 	strd	r4, r3, [r6]
 8008308:	4639      	mov	r1, r7
 800830a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830e:	428b      	cmp	r3, r1
 8008310:	d909      	bls.n	8008326 <__udivmoddi4+0xbe>
 8008312:	2e00      	cmp	r6, #0
 8008314:	f000 80eb 	beq.w	80084ee <__udivmoddi4+0x286>
 8008318:	2700      	movs	r7, #0
 800831a:	e9c6 0100 	strd	r0, r1, [r6]
 800831e:	4638      	mov	r0, r7
 8008320:	4639      	mov	r1, r7
 8008322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008326:	fab3 f783 	clz	r7, r3
 800832a:	2f00      	cmp	r7, #0
 800832c:	d147      	bne.n	80083be <__udivmoddi4+0x156>
 800832e:	428b      	cmp	r3, r1
 8008330:	d302      	bcc.n	8008338 <__udivmoddi4+0xd0>
 8008332:	4282      	cmp	r2, r0
 8008334:	f200 80fa 	bhi.w	800852c <__udivmoddi4+0x2c4>
 8008338:	1a84      	subs	r4, r0, r2
 800833a:	eb61 0303 	sbc.w	r3, r1, r3
 800833e:	2001      	movs	r0, #1
 8008340:	4698      	mov	r8, r3
 8008342:	2e00      	cmp	r6, #0
 8008344:	d0e0      	beq.n	8008308 <__udivmoddi4+0xa0>
 8008346:	e9c6 4800 	strd	r4, r8, [r6]
 800834a:	e7dd      	b.n	8008308 <__udivmoddi4+0xa0>
 800834c:	b902      	cbnz	r2, 8008350 <__udivmoddi4+0xe8>
 800834e:	deff      	udf	#255	; 0xff
 8008350:	fab2 f282 	clz	r2, r2
 8008354:	2a00      	cmp	r2, #0
 8008356:	f040 808f 	bne.w	8008478 <__udivmoddi4+0x210>
 800835a:	1b49      	subs	r1, r1, r5
 800835c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008360:	fa1f f885 	uxth.w	r8, r5
 8008364:	2701      	movs	r7, #1
 8008366:	fbb1 fcfe 	udiv	ip, r1, lr
 800836a:	0c23      	lsrs	r3, r4, #16
 800836c:	fb0e 111c 	mls	r1, lr, ip, r1
 8008370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008374:	fb08 f10c 	mul.w	r1, r8, ip
 8008378:	4299      	cmp	r1, r3
 800837a:	d907      	bls.n	800838c <__udivmoddi4+0x124>
 800837c:	18eb      	adds	r3, r5, r3
 800837e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008382:	d202      	bcs.n	800838a <__udivmoddi4+0x122>
 8008384:	4299      	cmp	r1, r3
 8008386:	f200 80cd 	bhi.w	8008524 <__udivmoddi4+0x2bc>
 800838a:	4684      	mov	ip, r0
 800838c:	1a59      	subs	r1, r3, r1
 800838e:	b2a3      	uxth	r3, r4
 8008390:	fbb1 f0fe 	udiv	r0, r1, lr
 8008394:	fb0e 1410 	mls	r4, lr, r0, r1
 8008398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800839c:	fb08 f800 	mul.w	r8, r8, r0
 80083a0:	45a0      	cmp	r8, r4
 80083a2:	d907      	bls.n	80083b4 <__udivmoddi4+0x14c>
 80083a4:	192c      	adds	r4, r5, r4
 80083a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80083aa:	d202      	bcs.n	80083b2 <__udivmoddi4+0x14a>
 80083ac:	45a0      	cmp	r8, r4
 80083ae:	f200 80b6 	bhi.w	800851e <__udivmoddi4+0x2b6>
 80083b2:	4618      	mov	r0, r3
 80083b4:	eba4 0408 	sub.w	r4, r4, r8
 80083b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80083bc:	e79f      	b.n	80082fe <__udivmoddi4+0x96>
 80083be:	f1c7 0c20 	rsb	ip, r7, #32
 80083c2:	40bb      	lsls	r3, r7
 80083c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80083c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80083cc:	fa01 f407 	lsl.w	r4, r1, r7
 80083d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80083d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80083d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80083dc:	4325      	orrs	r5, r4
 80083de:	fbb3 f9f8 	udiv	r9, r3, r8
 80083e2:	0c2c      	lsrs	r4, r5, #16
 80083e4:	fb08 3319 	mls	r3, r8, r9, r3
 80083e8:	fa1f fa8e 	uxth.w	sl, lr
 80083ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80083f0:	fb09 f40a 	mul.w	r4, r9, sl
 80083f4:	429c      	cmp	r4, r3
 80083f6:	fa02 f207 	lsl.w	r2, r2, r7
 80083fa:	fa00 f107 	lsl.w	r1, r0, r7
 80083fe:	d90b      	bls.n	8008418 <__udivmoddi4+0x1b0>
 8008400:	eb1e 0303 	adds.w	r3, lr, r3
 8008404:	f109 30ff 	add.w	r0, r9, #4294967295
 8008408:	f080 8087 	bcs.w	800851a <__udivmoddi4+0x2b2>
 800840c:	429c      	cmp	r4, r3
 800840e:	f240 8084 	bls.w	800851a <__udivmoddi4+0x2b2>
 8008412:	f1a9 0902 	sub.w	r9, r9, #2
 8008416:	4473      	add	r3, lr
 8008418:	1b1b      	subs	r3, r3, r4
 800841a:	b2ad      	uxth	r5, r5
 800841c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008420:	fb08 3310 	mls	r3, r8, r0, r3
 8008424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008428:	fb00 fa0a 	mul.w	sl, r0, sl
 800842c:	45a2      	cmp	sl, r4
 800842e:	d908      	bls.n	8008442 <__udivmoddi4+0x1da>
 8008430:	eb1e 0404 	adds.w	r4, lr, r4
 8008434:	f100 33ff 	add.w	r3, r0, #4294967295
 8008438:	d26b      	bcs.n	8008512 <__udivmoddi4+0x2aa>
 800843a:	45a2      	cmp	sl, r4
 800843c:	d969      	bls.n	8008512 <__udivmoddi4+0x2aa>
 800843e:	3802      	subs	r0, #2
 8008440:	4474      	add	r4, lr
 8008442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008446:	fba0 8902 	umull	r8, r9, r0, r2
 800844a:	eba4 040a 	sub.w	r4, r4, sl
 800844e:	454c      	cmp	r4, r9
 8008450:	46c2      	mov	sl, r8
 8008452:	464b      	mov	r3, r9
 8008454:	d354      	bcc.n	8008500 <__udivmoddi4+0x298>
 8008456:	d051      	beq.n	80084fc <__udivmoddi4+0x294>
 8008458:	2e00      	cmp	r6, #0
 800845a:	d069      	beq.n	8008530 <__udivmoddi4+0x2c8>
 800845c:	ebb1 050a 	subs.w	r5, r1, sl
 8008460:	eb64 0403 	sbc.w	r4, r4, r3
 8008464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008468:	40fd      	lsrs	r5, r7
 800846a:	40fc      	lsrs	r4, r7
 800846c:	ea4c 0505 	orr.w	r5, ip, r5
 8008470:	e9c6 5400 	strd	r5, r4, [r6]
 8008474:	2700      	movs	r7, #0
 8008476:	e747      	b.n	8008308 <__udivmoddi4+0xa0>
 8008478:	f1c2 0320 	rsb	r3, r2, #32
 800847c:	fa20 f703 	lsr.w	r7, r0, r3
 8008480:	4095      	lsls	r5, r2
 8008482:	fa01 f002 	lsl.w	r0, r1, r2
 8008486:	fa21 f303 	lsr.w	r3, r1, r3
 800848a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800848e:	4338      	orrs	r0, r7
 8008490:	0c01      	lsrs	r1, r0, #16
 8008492:	fbb3 f7fe 	udiv	r7, r3, lr
 8008496:	fa1f f885 	uxth.w	r8, r5
 800849a:	fb0e 3317 	mls	r3, lr, r7, r3
 800849e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084a2:	fb07 f308 	mul.w	r3, r7, r8
 80084a6:	428b      	cmp	r3, r1
 80084a8:	fa04 f402 	lsl.w	r4, r4, r2
 80084ac:	d907      	bls.n	80084be <__udivmoddi4+0x256>
 80084ae:	1869      	adds	r1, r5, r1
 80084b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80084b4:	d22f      	bcs.n	8008516 <__udivmoddi4+0x2ae>
 80084b6:	428b      	cmp	r3, r1
 80084b8:	d92d      	bls.n	8008516 <__udivmoddi4+0x2ae>
 80084ba:	3f02      	subs	r7, #2
 80084bc:	4429      	add	r1, r5
 80084be:	1acb      	subs	r3, r1, r3
 80084c0:	b281      	uxth	r1, r0
 80084c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80084c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80084ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084ce:	fb00 f308 	mul.w	r3, r0, r8
 80084d2:	428b      	cmp	r3, r1
 80084d4:	d907      	bls.n	80084e6 <__udivmoddi4+0x27e>
 80084d6:	1869      	adds	r1, r5, r1
 80084d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80084dc:	d217      	bcs.n	800850e <__udivmoddi4+0x2a6>
 80084de:	428b      	cmp	r3, r1
 80084e0:	d915      	bls.n	800850e <__udivmoddi4+0x2a6>
 80084e2:	3802      	subs	r0, #2
 80084e4:	4429      	add	r1, r5
 80084e6:	1ac9      	subs	r1, r1, r3
 80084e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80084ec:	e73b      	b.n	8008366 <__udivmoddi4+0xfe>
 80084ee:	4637      	mov	r7, r6
 80084f0:	4630      	mov	r0, r6
 80084f2:	e709      	b.n	8008308 <__udivmoddi4+0xa0>
 80084f4:	4607      	mov	r7, r0
 80084f6:	e6e7      	b.n	80082c8 <__udivmoddi4+0x60>
 80084f8:	4618      	mov	r0, r3
 80084fa:	e6fb      	b.n	80082f4 <__udivmoddi4+0x8c>
 80084fc:	4541      	cmp	r1, r8
 80084fe:	d2ab      	bcs.n	8008458 <__udivmoddi4+0x1f0>
 8008500:	ebb8 0a02 	subs.w	sl, r8, r2
 8008504:	eb69 020e 	sbc.w	r2, r9, lr
 8008508:	3801      	subs	r0, #1
 800850a:	4613      	mov	r3, r2
 800850c:	e7a4      	b.n	8008458 <__udivmoddi4+0x1f0>
 800850e:	4660      	mov	r0, ip
 8008510:	e7e9      	b.n	80084e6 <__udivmoddi4+0x27e>
 8008512:	4618      	mov	r0, r3
 8008514:	e795      	b.n	8008442 <__udivmoddi4+0x1da>
 8008516:	4667      	mov	r7, ip
 8008518:	e7d1      	b.n	80084be <__udivmoddi4+0x256>
 800851a:	4681      	mov	r9, r0
 800851c:	e77c      	b.n	8008418 <__udivmoddi4+0x1b0>
 800851e:	3802      	subs	r0, #2
 8008520:	442c      	add	r4, r5
 8008522:	e747      	b.n	80083b4 <__udivmoddi4+0x14c>
 8008524:	f1ac 0c02 	sub.w	ip, ip, #2
 8008528:	442b      	add	r3, r5
 800852a:	e72f      	b.n	800838c <__udivmoddi4+0x124>
 800852c:	4638      	mov	r0, r7
 800852e:	e708      	b.n	8008342 <__udivmoddi4+0xda>
 8008530:	4637      	mov	r7, r6
 8008532:	e6e9      	b.n	8008308 <__udivmoddi4+0xa0>

08008534 <__aeabi_idiv0>:
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop

08008538 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void){
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800853e:	f000 fa7a 	bl	8008a36 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8008542:	f000 f81d 	bl	8008580 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8008546:	f000 f8e1 	bl	800870c <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800854a:	f000 f8af 	bl	80086ac <MX_USART3_UART_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while(1){
		/* USER CODE END WHILE */
		uint32_t current_tick = HAL_GetTick();
 800854e:	f000 fac3 	bl	8008ad8 <HAL_GetTick>
 8008552:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart3, (uint8_t*) somedata, sizeof(somedata), HAL_MAX_DELAY);
 8008554:	f04f 33ff 	mov.w	r3, #4294967295
 8008558:	221f      	movs	r2, #31
 800855a:	4907      	ldr	r1, [pc, #28]	; (8008578 <main+0x40>)
 800855c:	4807      	ldr	r0, [pc, #28]	; (800857c <main+0x44>)
 800855e:	f001 ff55 	bl	800a40c <HAL_UART_Transmit>
		while(HAL_GetTick() <= (current_tick + 500));
 8008562:	bf00      	nop
 8008564:	f000 fab8 	bl	8008ad8 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008570:	429a      	cmp	r2, r3
 8008572:	d9f7      	bls.n	8008564 <main+0x2c>
	while(1){
 8008574:	e7eb      	b.n	800854e <main+0x16>
 8008576:	bf00      	nop
 8008578:	20000000 	.word	0x20000000
 800857c:	20000048 	.word	0x20000048

08008580 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void){
 8008580:	b580      	push	{r7, lr}
 8008582:	b0b8      	sub	sp, #224	; 0xe0
 8008584:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008586:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800858a:	2234      	movs	r2, #52	; 0x34
 800858c:	2100      	movs	r1, #0
 800858e:	4618      	mov	r0, r3
 8008590:	f002 fbfe 	bl	800ad90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008594:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	605a      	str	r2, [r3, #4]
 800859e:	609a      	str	r2, [r3, #8]
 80085a0:	60da      	str	r2, [r3, #12]
 80085a2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80085a4:	f107 0308 	add.w	r3, r7, #8
 80085a8:	2290      	movs	r2, #144	; 0x90
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f002 fbef 	bl	800ad90 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80085b2:	f000 fdb1 	bl	8009118 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80085b6:	4b3a      	ldr	r3, [pc, #232]	; (80086a0 <SystemClock_Config+0x120>)
 80085b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ba:	4a39      	ldr	r2, [pc, #228]	; (80086a0 <SystemClock_Config+0x120>)
 80085bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085c0:	6413      	str	r3, [r2, #64]	; 0x40
 80085c2:	4b37      	ldr	r3, [pc, #220]	; (80086a0 <SystemClock_Config+0x120>)
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ca:	607b      	str	r3, [r7, #4]
 80085cc:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80085ce:	4b35      	ldr	r3, [pc, #212]	; (80086a4 <SystemClock_Config+0x124>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80085d6:	4a33      	ldr	r2, [pc, #204]	; (80086a4 <SystemClock_Config+0x124>)
 80085d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	4b31      	ldr	r3, [pc, #196]	; (80086a4 <SystemClock_Config+0x124>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085ea:	2301      	movs	r3, #1
 80085ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80085f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80085f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085f8:	2302      	movs	r3, #2
 80085fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80085fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008602:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 4;
 8008606:	2304      	movs	r3, #4
 8008608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 96;
 800860c:	2360      	movs	r3, #96	; 0x60
 800860e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008612:	2302      	movs	r3, #2
 8008614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8008618:	2304      	movs	r3, #4
 800861a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800861e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fdd8 	bl	80091d8 <HAL_RCC_OscConfig>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <SystemClock_Config+0xb2>
		Error_Handler();
 800862e:	f000 f917 	bl	8008860 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8008632:	f000 fd81 	bl	8009138 <HAL_PWREx_EnableOverDrive>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <SystemClock_Config+0xc0>
		Error_Handler();
 800863c:	f000 f910 	bl	8008860 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8008640:	230f      	movs	r3, #15
 8008642:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008646:	2302      	movs	r3, #2
 8008648:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800864c:	2300      	movs	r3, #0
 800864e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800865a:	2300      	movs	r3, #0
 800865c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8008660:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008664:	2103      	movs	r1, #3
 8008666:	4618      	mov	r0, r3
 8008668:	f001 f864 	bl	8009734 <HAL_RCC_ClockConfig>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <SystemClock_Config+0xf6>
		Error_Handler();
 8008672:	f000 f8f5 	bl	8008860 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3
 8008676:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <SystemClock_Config+0x128>)
 8008678:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800867a:	2300      	movs	r3, #0
 800867c:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800867e:	2300      	movs	r3, #0
 8008680:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8008684:	f107 0308 	add.w	r3, r7, #8
 8008688:	4618      	mov	r0, r3
 800868a:	f001 fa4b 	bl	8009b24 <HAL_RCCEx_PeriphCLKConfig>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <SystemClock_Config+0x118>
		Error_Handler();
 8008694:	f000 f8e4 	bl	8008860 <Error_Handler>
	}
}
 8008698:	bf00      	nop
 800869a:	37e0      	adds	r7, #224	; 0xe0
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	40023800 	.word	0x40023800
 80086a4:	40007000 	.word	0x40007000
 80086a8:	00200100 	.word	0x00200100

080086ac <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void){
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80086b0:	4b14      	ldr	r3, [pc, #80]	; (8008704 <MX_USART3_UART_Init+0x58>)
 80086b2:	4a15      	ldr	r2, [pc, #84]	; (8008708 <MX_USART3_UART_Init+0x5c>)
 80086b4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80086b6:	4b13      	ldr	r3, [pc, #76]	; (8008704 <MX_USART3_UART_Init+0x58>)
 80086b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80086bc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80086be:	4b11      	ldr	r3, [pc, #68]	; (8008704 <MX_USART3_UART_Init+0x58>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80086c4:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <MX_USART3_UART_Init+0x58>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80086ca:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <MX_USART3_UART_Init+0x58>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80086d0:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <MX_USART3_UART_Init+0x58>)
 80086d2:	220c      	movs	r2, #12
 80086d4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <MX_USART3_UART_Init+0x58>)
 80086d8:	2200      	movs	r2, #0
 80086da:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80086dc:	4b09      	ldr	r3, [pc, #36]	; (8008704 <MX_USART3_UART_Init+0x58>)
 80086de:	2200      	movs	r2, #0
 80086e0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80086e2:	4b08      	ldr	r3, [pc, #32]	; (8008704 <MX_USART3_UART_Init+0x58>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80086e8:	4b06      	ldr	r3, [pc, #24]	; (8008704 <MX_USART3_UART_Init+0x58>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80086ee:	4805      	ldr	r0, [pc, #20]	; (8008704 <MX_USART3_UART_Init+0x58>)
 80086f0:	f001 fe3e 	bl	800a370 <HAL_UART_Init>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <MX_USART3_UART_Init+0x52>
		Error_Handler();
 80086fa:	f000 f8b1 	bl	8008860 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80086fe:	bf00      	nop
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20000048 	.word	0x20000048
 8008708:	40004800 	.word	0x40004800

0800870c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void){
 800870c:	b580      	push	{r7, lr}
 800870e:	b08c      	sub	sp, #48	; 0x30
 8008710:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008712:	f107 031c 	add.w	r3, r7, #28
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	605a      	str	r2, [r3, #4]
 800871c:	609a      	str	r2, [r3, #8]
 800871e:	60da      	str	r2, [r3, #12]
 8008720:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8008722:	4b4a      	ldr	r3, [pc, #296]	; (800884c <MX_GPIO_Init+0x140>)
 8008724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008726:	4a49      	ldr	r2, [pc, #292]	; (800884c <MX_GPIO_Init+0x140>)
 8008728:	f043 0304 	orr.w	r3, r3, #4
 800872c:	6313      	str	r3, [r2, #48]	; 0x30
 800872e:	4b47      	ldr	r3, [pc, #284]	; (800884c <MX_GPIO_Init+0x140>)
 8008730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	61bb      	str	r3, [r7, #24]
 8008738:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800873a:	4b44      	ldr	r3, [pc, #272]	; (800884c <MX_GPIO_Init+0x140>)
 800873c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873e:	4a43      	ldr	r2, [pc, #268]	; (800884c <MX_GPIO_Init+0x140>)
 8008740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008744:	6313      	str	r3, [r2, #48]	; 0x30
 8008746:	4b41      	ldr	r3, [pc, #260]	; (800884c <MX_GPIO_Init+0x140>)
 8008748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800874e:	617b      	str	r3, [r7, #20]
 8008750:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8008752:	4b3e      	ldr	r3, [pc, #248]	; (800884c <MX_GPIO_Init+0x140>)
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	4a3d      	ldr	r2, [pc, #244]	; (800884c <MX_GPIO_Init+0x140>)
 8008758:	f043 0301 	orr.w	r3, r3, #1
 800875c:	6313      	str	r3, [r2, #48]	; 0x30
 800875e:	4b3b      	ldr	r3, [pc, #236]	; (800884c <MX_GPIO_Init+0x140>)
 8008760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	613b      	str	r3, [r7, #16]
 8008768:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800876a:	4b38      	ldr	r3, [pc, #224]	; (800884c <MX_GPIO_Init+0x140>)
 800876c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876e:	4a37      	ldr	r2, [pc, #220]	; (800884c <MX_GPIO_Init+0x140>)
 8008770:	f043 0302 	orr.w	r3, r3, #2
 8008774:	6313      	str	r3, [r2, #48]	; 0x30
 8008776:	4b35      	ldr	r3, [pc, #212]	; (800884c <MX_GPIO_Init+0x140>)
 8008778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	60fb      	str	r3, [r7, #12]
 8008780:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8008782:	4b32      	ldr	r3, [pc, #200]	; (800884c <MX_GPIO_Init+0x140>)
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	4a31      	ldr	r2, [pc, #196]	; (800884c <MX_GPIO_Init+0x140>)
 8008788:	f043 0308 	orr.w	r3, r3, #8
 800878c:	6313      	str	r3, [r2, #48]	; 0x30
 800878e:	4b2f      	ldr	r3, [pc, #188]	; (800884c <MX_GPIO_Init+0x140>)
 8008790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008792:	f003 0308 	and.w	r3, r3, #8
 8008796:	60bb      	str	r3, [r7, #8]
 8008798:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800879a:	4b2c      	ldr	r3, [pc, #176]	; (800884c <MX_GPIO_Init+0x140>)
 800879c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879e:	4a2b      	ldr	r2, [pc, #172]	; (800884c <MX_GPIO_Init+0x140>)
 80087a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a4:	6313      	str	r3, [r2, #48]	; 0x30
 80087a6:	4b29      	ldr	r3, [pc, #164]	; (800884c <MX_GPIO_Init+0x140>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ae:	607b      	str	r3, [r7, #4]
 80087b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80087b2:	2200      	movs	r2, #0
 80087b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80087b8:	4825      	ldr	r0, [pc, #148]	; (8008850 <MX_GPIO_Init+0x144>)
 80087ba:	f000 fc55 	bl	8009068 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80087be:	2200      	movs	r2, #0
 80087c0:	2140      	movs	r1, #64	; 0x40
 80087c2:	4824      	ldr	r0, [pc, #144]	; (8008854 <MX_GPIO_Init+0x148>)
 80087c4:	f000 fc50 	bl	8009068 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80087c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80087ce:	4b22      	ldr	r3, [pc, #136]	; (8008858 <MX_GPIO_Init+0x14c>)
 80087d0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d2:	2300      	movs	r3, #0
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80087d6:	f107 031c 	add.w	r3, r7, #28
 80087da:	4619      	mov	r1, r3
 80087dc:	481f      	ldr	r0, [pc, #124]	; (800885c <MX_GPIO_Init+0x150>)
 80087de:	f000 fa99 	bl	8008d14 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 80087e2:	f244 0381 	movw	r3, #16513	; 0x4081
 80087e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087e8:	2301      	movs	r3, #1
 80087ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ec:	2300      	movs	r3, #0
 80087ee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087f0:	2300      	movs	r3, #0
 80087f2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087f4:	f107 031c 	add.w	r3, r7, #28
 80087f8:	4619      	mov	r1, r3
 80087fa:	4815      	ldr	r0, [pc, #84]	; (8008850 <MX_GPIO_Init+0x144>)
 80087fc:	f000 fa8a 	bl	8008d14 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8008800:	2340      	movs	r3, #64	; 0x40
 8008802:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008804:	2301      	movs	r3, #1
 8008806:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008808:	2300      	movs	r3, #0
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800880c:	2300      	movs	r3, #0
 800880e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008810:	f107 031c 	add.w	r3, r7, #28
 8008814:	4619      	mov	r1, r3
 8008816:	480f      	ldr	r0, [pc, #60]	; (8008854 <MX_GPIO_Init+0x148>)
 8008818:	f000 fa7c 	bl	8008d14 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800881c:	2380      	movs	r3, #128	; 0x80
 800881e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008820:	2300      	movs	r3, #0
 8008822:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008824:	2300      	movs	r3, #0
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8008828:	f107 031c 	add.w	r3, r7, #28
 800882c:	4619      	mov	r1, r3
 800882e:	4809      	ldr	r0, [pc, #36]	; (8008854 <MX_GPIO_Init+0x148>)
 8008830:	f000 fa70 	bl	8008d14 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008834:	2200      	movs	r2, #0
 8008836:	2100      	movs	r1, #0
 8008838:	2028      	movs	r0, #40	; 0x28
 800883a:	f000 fa34 	bl	8008ca6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800883e:	2028      	movs	r0, #40	; 0x28
 8008840:	f000 fa4d 	bl	8008cde <HAL_NVIC_EnableIRQ>

}
 8008844:	bf00      	nop
 8008846:	3730      	adds	r7, #48	; 0x30
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	40023800 	.word	0x40023800
 8008850:	40020400 	.word	0x40020400
 8008854:	40021800 	.word	0x40021800
 8008858:	10110000 	.word	0x10110000
 800885c:	40020800 	.word	0x40020800

08008860 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void){
 8008860:	b480      	push	{r7}
 8008862:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
	...

08008870 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 8008876:	4b0f      	ldr	r3, [pc, #60]	; (80088b4 <HAL_MspInit+0x44>)
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	4a0e      	ldr	r2, [pc, #56]	; (80088b4 <HAL_MspInit+0x44>)
 800887c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008880:	6413      	str	r3, [r2, #64]	; 0x40
 8008882:	4b0c      	ldr	r3, [pc, #48]	; (80088b4 <HAL_MspInit+0x44>)
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800888a:	607b      	str	r3, [r7, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800888e:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <HAL_MspInit+0x44>)
 8008890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008892:	4a08      	ldr	r2, [pc, #32]	; (80088b4 <HAL_MspInit+0x44>)
 8008894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008898:	6453      	str	r3, [r2, #68]	; 0x44
 800889a:	4b06      	ldr	r3, [pc, #24]	; (80088b4 <HAL_MspInit+0x44>)
 800889c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088a2:	603b      	str	r3, [r7, #0]
 80088a4:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80088a6:	bf00      	nop
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	40023800 	.word	0x40023800

080088b8 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart){
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b08a      	sub	sp, #40	; 0x28
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80088c0:	f107 0314 	add.w	r3, r7, #20
 80088c4:	2200      	movs	r2, #0
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	605a      	str	r2, [r3, #4]
 80088ca:	609a      	str	r2, [r3, #8]
 80088cc:	60da      	str	r2, [r3, #12]
 80088ce:	611a      	str	r2, [r3, #16]
	if (huart->Instance == USART3) {
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a17      	ldr	r2, [pc, #92]	; (8008934 <HAL_UART_MspInit+0x7c>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d128      	bne.n	800892c <HAL_UART_MspInit+0x74>
		/* USER CODE BEGIN USART3_MspInit 0 */

		/* USER CODE END USART3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 80088da:	4b17      	ldr	r3, [pc, #92]	; (8008938 <HAL_UART_MspInit+0x80>)
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	4a16      	ldr	r2, [pc, #88]	; (8008938 <HAL_UART_MspInit+0x80>)
 80088e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088e4:	6413      	str	r3, [r2, #64]	; 0x40
 80088e6:	4b14      	ldr	r3, [pc, #80]	; (8008938 <HAL_UART_MspInit+0x80>)
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ee:	613b      	str	r3, [r7, #16]
 80088f0:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 80088f2:	4b11      	ldr	r3, [pc, #68]	; (8008938 <HAL_UART_MspInit+0x80>)
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	4a10      	ldr	r2, [pc, #64]	; (8008938 <HAL_UART_MspInit+0x80>)
 80088f8:	f043 0308 	orr.w	r3, r3, #8
 80088fc:	6313      	str	r3, [r2, #48]	; 0x30
 80088fe:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <HAL_UART_MspInit+0x80>)
 8008900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008902:	f003 0308 	and.w	r3, r3, #8
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 800890a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800890e:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008910:	2302      	movs	r3, #2
 8008912:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008914:	2300      	movs	r3, #0
 8008916:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008918:	2303      	movs	r3, #3
 800891a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800891c:	2307      	movs	r3, #7
 800891e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008920:	f107 0314 	add.w	r3, r7, #20
 8008924:	4619      	mov	r1, r3
 8008926:	4805      	ldr	r0, [pc, #20]	; (800893c <HAL_UART_MspInit+0x84>)
 8008928:	f000 f9f4 	bl	8008d14 <HAL_GPIO_Init>
		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}

}
 800892c:	bf00      	nop
 800892e:	3728      	adds	r7, #40	; 0x28
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	40004800 	.word	0x40004800
 8008938:	40023800 	.word	0x40023800
 800893c:	40020c00 	.word	0x40020c00

08008940 <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void){
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void){
 800894e:	b480      	push	{r7}
 8008950:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8008952:	e7fe      	b.n	8008952 <HardFault_Handler+0x4>

08008954 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void){
 8008954:	b480      	push	{r7}
 8008956:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8008958:	e7fe      	b.n	8008958 <MemManage_Handler+0x4>

0800895a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void){
 800895a:	b480      	push	{r7}
 800895c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800895e:	e7fe      	b.n	800895e <BusFault_Handler+0x4>

08008960 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void){
 8008960:	b480      	push	{r7}
 8008962:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8008964:	e7fe      	b.n	8008964 <UsageFault_Handler+0x4>

08008966 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void){
 8008966:	b480      	push	{r7}
 8008968:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800896a:	bf00      	nop
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void){
 8008974:	b480      	push	{r7}
 8008976:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8008978:	bf00      	nop
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void){
 8008982:	b480      	push	{r7}
 8008984:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8008986:	bf00      	nop
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void){
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8008994:	f000 f88c 	bl	8008ab0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8008998:	bf00      	nop
 800899a:	bd80      	pop	{r7, pc}

0800899c <EXTI15_10_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void){
 800899c:	b580      	push	{r7, lr}
 800899e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80089a0:	2101      	movs	r1, #1
 80089a2:	4804      	ldr	r0, [pc, #16]	; (80089b4 <EXTI15_10_IRQHandler+0x18>)
 80089a4:	f000 fb79 	bl	800909a <HAL_GPIO_TogglePin>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80089a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80089ac:	f000 fb90 	bl	80090d0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 80089b0:	bf00      	nop
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	40020400 	.word	0x40020400

080089b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80089b8:	b480      	push	{r7}
 80089ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80089bc:	4b07      	ldr	r3, [pc, #28]	; (80089dc <SystemInit+0x24>)
 80089be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c2:	4a06      	ldr	r2, [pc, #24]	; (80089dc <SystemInit+0x24>)
 80089c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80089cc:	4b03      	ldr	r3, [pc, #12]	; (80089dc <SystemInit+0x24>)
 80089ce:	4a04      	ldr	r2, [pc, #16]	; (80089e0 <SystemInit+0x28>)
 80089d0:	609a      	str	r2, [r3, #8]
#endif
}
 80089d2:	bf00      	nop
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	e000ed00 	.word	0xe000ed00
 80089e0:	08008000 	.word	0x08008000

080089e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80089e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80089e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80089ea:	e003      	b.n	80089f4 <LoopCopyDataInit>

080089ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80089ec:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80089ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80089f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80089f2:	3104      	adds	r1, #4

080089f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80089f4:	480b      	ldr	r0, [pc, #44]	; (8008a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80089f6:	4b0c      	ldr	r3, [pc, #48]	; (8008a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80089f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80089fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80089fc:	d3f6      	bcc.n	80089ec <CopyDataInit>
  ldr  r2, =_sbss
 80089fe:	4a0b      	ldr	r2, [pc, #44]	; (8008a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008a00:	e002      	b.n	8008a08 <LoopFillZerobss>

08008a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008a04:	f842 3b04 	str.w	r3, [r2], #4

08008a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008a08:	4b09      	ldr	r3, [pc, #36]	; (8008a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008a0c:	d3f9      	bcc.n	8008a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008a0e:	f7ff ffd3 	bl	80089b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008a12:	f002 f999 	bl	800ad48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a16:	f7ff fd8f 	bl	8008538 <main>
  bx  lr    
 8008a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008a1c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8008a20:	0800ade0 	.word	0x0800ade0
  ldr  r0, =_sdata
 8008a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008a28:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8008a2c:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8008a30:	20000114 	.word	0x20000114

08008a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a34:	e7fe      	b.n	8008a34 <ADC_IRQHandler>

08008a36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a3a:	2003      	movs	r0, #3
 8008a3c:	f000 f928 	bl	8008c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a40:	2000      	movs	r0, #0
 8008a42:	f000 f805 	bl	8008a50 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008a46:	f7ff ff13 	bl	8008870 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008a58:	4b12      	ldr	r3, [pc, #72]	; (8008aa4 <HAL_InitTick+0x54>)
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <HAL_InitTick+0x58>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	4619      	mov	r1, r3
 8008a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 f943 	bl	8008cfa <HAL_SYSTICK_Config>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e00e      	b.n	8008a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b0f      	cmp	r3, #15
 8008a82:	d80a      	bhi.n	8008a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a84:	2200      	movs	r2, #0
 8008a86:	6879      	ldr	r1, [r7, #4]
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8c:	f000 f90b 	bl	8008ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008a90:	4a06      	ldr	r2, [pc, #24]	; (8008aac <HAL_InitTick+0x5c>)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	e000      	b.n	8008a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	20000020 	.word	0x20000020
 8008aa8:	20000028 	.word	0x20000028
 8008aac:	20000024 	.word	0x20000024

08008ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ab4:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <HAL_IncTick+0x20>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <HAL_IncTick+0x24>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4413      	add	r3, r2
 8008ac0:	4a04      	ldr	r2, [pc, #16]	; (8008ad4 <HAL_IncTick+0x24>)
 8008ac2:	6013      	str	r3, [r2, #0]
}
 8008ac4:	bf00      	nop
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	20000028 	.word	0x20000028
 8008ad4:	20000110 	.word	0x20000110

08008ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
  return uwTick;
 8008adc:	4b03      	ldr	r3, [pc, #12]	; (8008aec <HAL_GetTick+0x14>)
 8008ade:	681b      	ldr	r3, [r3, #0]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	20000110 	.word	0x20000110

08008af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b00:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <__NVIC_SetPriorityGrouping+0x40>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008b18:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <__NVIC_SetPriorityGrouping+0x44>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b1e:	4a04      	ldr	r2, [pc, #16]	; (8008b30 <__NVIC_SetPriorityGrouping+0x40>)
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	60d3      	str	r3, [r2, #12]
}
 8008b24:	bf00      	nop
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	e000ed00 	.word	0xe000ed00
 8008b34:	05fa0000 	.word	0x05fa0000

08008b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b3c:	4b04      	ldr	r3, [pc, #16]	; (8008b50 <__NVIC_GetPriorityGrouping+0x18>)
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	0a1b      	lsrs	r3, r3, #8
 8008b42:	f003 0307 	and.w	r3, r3, #7
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr
 8008b50:	e000ed00 	.word	0xe000ed00

08008b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	db0b      	blt.n	8008b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	f003 021f 	and.w	r2, r3, #31
 8008b6c:	4907      	ldr	r1, [pc, #28]	; (8008b8c <__NVIC_EnableIRQ+0x38>)
 8008b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b72:	095b      	lsrs	r3, r3, #5
 8008b74:	2001      	movs	r0, #1
 8008b76:	fa00 f202 	lsl.w	r2, r0, r2
 8008b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008b7e:	bf00      	nop
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	e000e100 	.word	0xe000e100

08008b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	4603      	mov	r3, r0
 8008b98:	6039      	str	r1, [r7, #0]
 8008b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	db0a      	blt.n	8008bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	490c      	ldr	r1, [pc, #48]	; (8008bdc <__NVIC_SetPriority+0x4c>)
 8008baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bae:	0112      	lsls	r2, r2, #4
 8008bb0:	b2d2      	uxtb	r2, r2
 8008bb2:	440b      	add	r3, r1
 8008bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008bb8:	e00a      	b.n	8008bd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	4908      	ldr	r1, [pc, #32]	; (8008be0 <__NVIC_SetPriority+0x50>)
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	f003 030f 	and.w	r3, r3, #15
 8008bc6:	3b04      	subs	r3, #4
 8008bc8:	0112      	lsls	r2, r2, #4
 8008bca:	b2d2      	uxtb	r2, r2
 8008bcc:	440b      	add	r3, r1
 8008bce:	761a      	strb	r2, [r3, #24]
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	e000e100 	.word	0xe000e100
 8008be0:	e000ed00 	.word	0xe000ed00

08008be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b089      	sub	sp, #36	; 0x24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	f1c3 0307 	rsb	r3, r3, #7
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	bf28      	it	cs
 8008c02:	2304      	movcs	r3, #4
 8008c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	3304      	adds	r3, #4
 8008c0a:	2b06      	cmp	r3, #6
 8008c0c:	d902      	bls.n	8008c14 <NVIC_EncodePriority+0x30>
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	3b03      	subs	r3, #3
 8008c12:	e000      	b.n	8008c16 <NVIC_EncodePriority+0x32>
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c22:	43da      	mvns	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	401a      	ands	r2, r3
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	fa01 f303 	lsl.w	r3, r1, r3
 8008c36:	43d9      	mvns	r1, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c3c:	4313      	orrs	r3, r2
         );
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3724      	adds	r7, #36	; 0x24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
	...

08008c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c5c:	d301      	bcc.n	8008c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e00f      	b.n	8008c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c62:	4a0a      	ldr	r2, [pc, #40]	; (8008c8c <SysTick_Config+0x40>)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3b01      	subs	r3, #1
 8008c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c6a:	210f      	movs	r1, #15
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c70:	f7ff ff8e 	bl	8008b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <SysTick_Config+0x40>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c7a:	4b04      	ldr	r3, [pc, #16]	; (8008c8c <SysTick_Config+0x40>)
 8008c7c:	2207      	movs	r2, #7
 8008c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	e000e010 	.word	0xe000e010

08008c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff ff29 	bl	8008af0 <__NVIC_SetPriorityGrouping>
}
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b086      	sub	sp, #24
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	4603      	mov	r3, r0
 8008cae:	60b9      	str	r1, [r7, #8]
 8008cb0:	607a      	str	r2, [r7, #4]
 8008cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008cb8:	f7ff ff3e 	bl	8008b38 <__NVIC_GetPriorityGrouping>
 8008cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	68b9      	ldr	r1, [r7, #8]
 8008cc2:	6978      	ldr	r0, [r7, #20]
 8008cc4:	f7ff ff8e 	bl	8008be4 <NVIC_EncodePriority>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cce:	4611      	mov	r1, r2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7ff ff5d 	bl	8008b90 <__NVIC_SetPriority>
}
 8008cd6:	bf00      	nop
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff ff31 	bl	8008b54 <__NVIC_EnableIRQ>
}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b082      	sub	sp, #8
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7ff ffa2 	bl	8008c4c <SysTick_Config>
 8008d08:	4603      	mov	r3, r0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b089      	sub	sp, #36	; 0x24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008d22:	2300      	movs	r3, #0
 8008d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008d26:	2300      	movs	r3, #0
 8008d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008d2e:	2300      	movs	r3, #0
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	e175      	b.n	8009020 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008d34:	2201      	movs	r2, #1
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	4013      	ands	r3, r2
 8008d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	f040 8164 	bne.w	800901a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d00b      	beq.n	8008d72 <HAL_GPIO_Init+0x5e>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d007      	beq.n	8008d72 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008d66:	2b11      	cmp	r3, #17
 8008d68:	d003      	beq.n	8008d72 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	2b12      	cmp	r3, #18
 8008d70:	d130      	bne.n	8008dd4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	43db      	mvns	r3, r3
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	4013      	ands	r3, r2
 8008d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	005b      	lsls	r3, r3, #1
 8008d92:	fa02 f303 	lsl.w	r3, r2, r3
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008da8:	2201      	movs	r2, #1
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	fa02 f303 	lsl.w	r3, r2, r3
 8008db0:	43db      	mvns	r3, r3
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	4013      	ands	r3, r2
 8008db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	091b      	lsrs	r3, r3, #4
 8008dbe:	f003 0201 	and.w	r2, r3, #1
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	2203      	movs	r2, #3
 8008de0:	fa02 f303 	lsl.w	r3, r2, r3
 8008de4:	43db      	mvns	r3, r3
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	4013      	ands	r3, r2
 8008dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	689a      	ldr	r2, [r3, #8]
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	fa02 f303 	lsl.w	r3, r2, r3
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d003      	beq.n	8008e14 <HAL_GPIO_Init+0x100>
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	2b12      	cmp	r3, #18
 8008e12:	d123      	bne.n	8008e5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	08da      	lsrs	r2, r3, #3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3208      	adds	r2, #8
 8008e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	f003 0307 	and.w	r3, r3, #7
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	220f      	movs	r2, #15
 8008e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e30:	43db      	mvns	r3, r3
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	4013      	ands	r3, r2
 8008e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	691a      	ldr	r2, [r3, #16]
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	f003 0307 	and.w	r3, r3, #7
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	fa02 f303 	lsl.w	r3, r2, r3
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	08da      	lsrs	r2, r3, #3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	3208      	adds	r2, #8
 8008e56:	69b9      	ldr	r1, [r7, #24]
 8008e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	005b      	lsls	r3, r3, #1
 8008e66:	2203      	movs	r2, #3
 8008e68:	fa02 f303 	lsl.w	r3, r2, r3
 8008e6c:	43db      	mvns	r3, r3
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	4013      	ands	r3, r2
 8008e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f003 0203 	and.w	r2, r3, #3
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	005b      	lsls	r3, r3, #1
 8008e80:	fa02 f303 	lsl.w	r3, r2, r3
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 80be 	beq.w	800901a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e9e:	4b65      	ldr	r3, [pc, #404]	; (8009034 <HAL_GPIO_Init+0x320>)
 8008ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea2:	4a64      	ldr	r2, [pc, #400]	; (8009034 <HAL_GPIO_Init+0x320>)
 8008ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8008eaa:	4b62      	ldr	r3, [pc, #392]	; (8009034 <HAL_GPIO_Init+0x320>)
 8008eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008eb6:	4a60      	ldr	r2, [pc, #384]	; (8009038 <HAL_GPIO_Init+0x324>)
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	089b      	lsrs	r3, r3, #2
 8008ebc:	3302      	adds	r3, #2
 8008ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	220f      	movs	r2, #15
 8008ece:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed2:	43db      	mvns	r3, r3
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a57      	ldr	r2, [pc, #348]	; (800903c <HAL_GPIO_Init+0x328>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d037      	beq.n	8008f52 <HAL_GPIO_Init+0x23e>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a56      	ldr	r2, [pc, #344]	; (8009040 <HAL_GPIO_Init+0x32c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d031      	beq.n	8008f4e <HAL_GPIO_Init+0x23a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a55      	ldr	r2, [pc, #340]	; (8009044 <HAL_GPIO_Init+0x330>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d02b      	beq.n	8008f4a <HAL_GPIO_Init+0x236>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a54      	ldr	r2, [pc, #336]	; (8009048 <HAL_GPIO_Init+0x334>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d025      	beq.n	8008f46 <HAL_GPIO_Init+0x232>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a53      	ldr	r2, [pc, #332]	; (800904c <HAL_GPIO_Init+0x338>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d01f      	beq.n	8008f42 <HAL_GPIO_Init+0x22e>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a52      	ldr	r2, [pc, #328]	; (8009050 <HAL_GPIO_Init+0x33c>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d019      	beq.n	8008f3e <HAL_GPIO_Init+0x22a>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a51      	ldr	r2, [pc, #324]	; (8009054 <HAL_GPIO_Init+0x340>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d013      	beq.n	8008f3a <HAL_GPIO_Init+0x226>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4a50      	ldr	r2, [pc, #320]	; (8009058 <HAL_GPIO_Init+0x344>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d00d      	beq.n	8008f36 <HAL_GPIO_Init+0x222>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4a4f      	ldr	r2, [pc, #316]	; (800905c <HAL_GPIO_Init+0x348>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d007      	beq.n	8008f32 <HAL_GPIO_Init+0x21e>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a4e      	ldr	r2, [pc, #312]	; (8009060 <HAL_GPIO_Init+0x34c>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d101      	bne.n	8008f2e <HAL_GPIO_Init+0x21a>
 8008f2a:	2309      	movs	r3, #9
 8008f2c:	e012      	b.n	8008f54 <HAL_GPIO_Init+0x240>
 8008f2e:	230a      	movs	r3, #10
 8008f30:	e010      	b.n	8008f54 <HAL_GPIO_Init+0x240>
 8008f32:	2308      	movs	r3, #8
 8008f34:	e00e      	b.n	8008f54 <HAL_GPIO_Init+0x240>
 8008f36:	2307      	movs	r3, #7
 8008f38:	e00c      	b.n	8008f54 <HAL_GPIO_Init+0x240>
 8008f3a:	2306      	movs	r3, #6
 8008f3c:	e00a      	b.n	8008f54 <HAL_GPIO_Init+0x240>
 8008f3e:	2305      	movs	r3, #5
 8008f40:	e008      	b.n	8008f54 <HAL_GPIO_Init+0x240>
 8008f42:	2304      	movs	r3, #4
 8008f44:	e006      	b.n	8008f54 <HAL_GPIO_Init+0x240>
 8008f46:	2303      	movs	r3, #3
 8008f48:	e004      	b.n	8008f54 <HAL_GPIO_Init+0x240>
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	e002      	b.n	8008f54 <HAL_GPIO_Init+0x240>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e000      	b.n	8008f54 <HAL_GPIO_Init+0x240>
 8008f52:	2300      	movs	r3, #0
 8008f54:	69fa      	ldr	r2, [r7, #28]
 8008f56:	f002 0203 	and.w	r2, r2, #3
 8008f5a:	0092      	lsls	r2, r2, #2
 8008f5c:	4093      	lsls	r3, r2
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008f64:	4934      	ldr	r1, [pc, #208]	; (8009038 <HAL_GPIO_Init+0x324>)
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	089b      	lsrs	r3, r3, #2
 8008f6a:	3302      	adds	r3, #2
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008f72:	4b3c      	ldr	r3, [pc, #240]	; (8009064 <HAL_GPIO_Init+0x350>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	43db      	mvns	r3, r3
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	4013      	ands	r3, r2
 8008f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008f96:	4a33      	ldr	r2, [pc, #204]	; (8009064 <HAL_GPIO_Init+0x350>)
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008f9c:	4b31      	ldr	r3, [pc, #196]	; (8009064 <HAL_GPIO_Init+0x350>)
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	43db      	mvns	r3, r3
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	4013      	ands	r3, r2
 8008faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d003      	beq.n	8008fc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008fb8:	69ba      	ldr	r2, [r7, #24]
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008fc0:	4a28      	ldr	r2, [pc, #160]	; (8009064 <HAL_GPIO_Init+0x350>)
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008fc6:	4b27      	ldr	r3, [pc, #156]	; (8009064 <HAL_GPIO_Init+0x350>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	43db      	mvns	r3, r3
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d003      	beq.n	8008fea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008fea:	4a1e      	ldr	r2, [pc, #120]	; (8009064 <HAL_GPIO_Init+0x350>)
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ff0:	4b1c      	ldr	r3, [pc, #112]	; (8009064 <HAL_GPIO_Init+0x350>)
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	43db      	mvns	r3, r3
 8008ffa:	69ba      	ldr	r2, [r7, #24]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800900c:	69ba      	ldr	r2, [r7, #24]
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	4313      	orrs	r3, r2
 8009012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009014:	4a13      	ldr	r2, [pc, #76]	; (8009064 <HAL_GPIO_Init+0x350>)
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	3301      	adds	r3, #1
 800901e:	61fb      	str	r3, [r7, #28]
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	2b0f      	cmp	r3, #15
 8009024:	f67f ae86 	bls.w	8008d34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009028:	bf00      	nop
 800902a:	3724      	adds	r7, #36	; 0x24
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	40023800 	.word	0x40023800
 8009038:	40013800 	.word	0x40013800
 800903c:	40020000 	.word	0x40020000
 8009040:	40020400 	.word	0x40020400
 8009044:	40020800 	.word	0x40020800
 8009048:	40020c00 	.word	0x40020c00
 800904c:	40021000 	.word	0x40021000
 8009050:	40021400 	.word	0x40021400
 8009054:	40021800 	.word	0x40021800
 8009058:	40021c00 	.word	0x40021c00
 800905c:	40022000 	.word	0x40022000
 8009060:	40022400 	.word	0x40022400
 8009064:	40013c00 	.word	0x40013c00

08009068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	807b      	strh	r3, [r7, #2]
 8009074:	4613      	mov	r3, r2
 8009076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009078:	787b      	ldrb	r3, [r7, #1]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800907e:	887a      	ldrh	r2, [r7, #2]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009084:	e003      	b.n	800908e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009086:	887b      	ldrh	r3, [r7, #2]
 8009088:	041a      	lsls	r2, r3, #16
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	619a      	str	r2, [r3, #24]
}
 800908e:	bf00      	nop
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800909a:	b480      	push	{r7}
 800909c:	b083      	sub	sp, #12
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	460b      	mov	r3, r1
 80090a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	695a      	ldr	r2, [r3, #20]
 80090aa:	887b      	ldrh	r3, [r7, #2]
 80090ac:	4013      	ands	r3, r2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d004      	beq.n	80090bc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80090b2:	887b      	ldrh	r3, [r7, #2]
 80090b4:	041a      	lsls	r2, r3, #16
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80090ba:	e002      	b.n	80090c2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80090bc:	887a      	ldrh	r2, [r7, #2]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	619a      	str	r2, [r3, #24]
}
 80090c2:	bf00      	nop
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
	...

080090d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80090da:	4b08      	ldr	r3, [pc, #32]	; (80090fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090dc:	695a      	ldr	r2, [r3, #20]
 80090de:	88fb      	ldrh	r3, [r7, #6]
 80090e0:	4013      	ands	r3, r2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d006      	beq.n	80090f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80090e6:	4a05      	ldr	r2, [pc, #20]	; (80090fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090e8:	88fb      	ldrh	r3, [r7, #6]
 80090ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80090ec:	88fb      	ldrh	r3, [r7, #6]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f806 	bl	8009100 <HAL_GPIO_EXTI_Callback>
  }
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	40013c00 	.word	0x40013c00

08009100 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800910a:	bf00      	nop
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
	...

08009118 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009118:	b480      	push	{r7}
 800911a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800911c:	4b05      	ldr	r3, [pc, #20]	; (8009134 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a04      	ldr	r2, [pc, #16]	; (8009134 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009126:	6013      	str	r3, [r2, #0]
}
 8009128:	bf00      	nop
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	40007000 	.word	0x40007000

08009138 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009142:	4b23      	ldr	r3, [pc, #140]	; (80091d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009146:	4a22      	ldr	r2, [pc, #136]	; (80091d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800914c:	6413      	str	r3, [r2, #64]	; 0x40
 800914e:	4b20      	ldr	r3, [pc, #128]	; (80091d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8009150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009156:	603b      	str	r3, [r7, #0]
 8009158:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800915a:	4b1e      	ldr	r3, [pc, #120]	; (80091d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a1d      	ldr	r2, [pc, #116]	; (80091d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009164:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009166:	f7ff fcb7 	bl	8008ad8 <HAL_GetTick>
 800916a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800916c:	e009      	b.n	8009182 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800916e:	f7ff fcb3 	bl	8008ad8 <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800917c:	d901      	bls.n	8009182 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e022      	b.n	80091c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009182:	4b14      	ldr	r3, [pc, #80]	; (80091d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800918a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800918e:	d1ee      	bne.n	800916e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009190:	4b10      	ldr	r3, [pc, #64]	; (80091d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a0f      	ldr	r2, [pc, #60]	; (80091d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800919a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800919c:	f7ff fc9c 	bl	8008ad8 <HAL_GetTick>
 80091a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80091a2:	e009      	b.n	80091b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80091a4:	f7ff fc98 	bl	8008ad8 <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091b2:	d901      	bls.n	80091b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e007      	b.n	80091c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80091b8:	4b06      	ldr	r3, [pc, #24]	; (80091d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091c4:	d1ee      	bne.n	80091a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	40023800 	.word	0x40023800
 80091d4:	40007000 	.word	0x40007000

080091d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b086      	sub	sp, #24
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80091e0:	2300      	movs	r3, #0
 80091e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d101      	bne.n	80091ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	e29b      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 8087 	beq.w	800930a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80091fc:	4b96      	ldr	r3, [pc, #600]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f003 030c 	and.w	r3, r3, #12
 8009204:	2b04      	cmp	r3, #4
 8009206:	d00c      	beq.n	8009222 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009208:	4b93      	ldr	r3, [pc, #588]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f003 030c 	and.w	r3, r3, #12
 8009210:	2b08      	cmp	r3, #8
 8009212:	d112      	bne.n	800923a <HAL_RCC_OscConfig+0x62>
 8009214:	4b90      	ldr	r3, [pc, #576]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800921c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009220:	d10b      	bne.n	800923a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009222:	4b8d      	ldr	r3, [pc, #564]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d06c      	beq.n	8009308 <HAL_RCC_OscConfig+0x130>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d168      	bne.n	8009308 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e275      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009242:	d106      	bne.n	8009252 <HAL_RCC_OscConfig+0x7a>
 8009244:	4b84      	ldr	r3, [pc, #528]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a83      	ldr	r2, [pc, #524]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 800924a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	e02e      	b.n	80092b0 <HAL_RCC_OscConfig+0xd8>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10c      	bne.n	8009274 <HAL_RCC_OscConfig+0x9c>
 800925a:	4b7f      	ldr	r3, [pc, #508]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a7e      	ldr	r2, [pc, #504]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009264:	6013      	str	r3, [r2, #0]
 8009266:	4b7c      	ldr	r3, [pc, #496]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a7b      	ldr	r2, [pc, #492]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 800926c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	e01d      	b.n	80092b0 <HAL_RCC_OscConfig+0xd8>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800927c:	d10c      	bne.n	8009298 <HAL_RCC_OscConfig+0xc0>
 800927e:	4b76      	ldr	r3, [pc, #472]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a75      	ldr	r2, [pc, #468]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009288:	6013      	str	r3, [r2, #0]
 800928a:	4b73      	ldr	r3, [pc, #460]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a72      	ldr	r2, [pc, #456]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009294:	6013      	str	r3, [r2, #0]
 8009296:	e00b      	b.n	80092b0 <HAL_RCC_OscConfig+0xd8>
 8009298:	4b6f      	ldr	r3, [pc, #444]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a6e      	ldr	r2, [pc, #440]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 800929e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092a2:	6013      	str	r3, [r2, #0]
 80092a4:	4b6c      	ldr	r3, [pc, #432]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a6b      	ldr	r2, [pc, #428]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 80092aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d013      	beq.n	80092e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b8:	f7ff fc0e 	bl	8008ad8 <HAL_GetTick>
 80092bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092be:	e008      	b.n	80092d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092c0:	f7ff fc0a 	bl	8008ad8 <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	2b64      	cmp	r3, #100	; 0x64
 80092cc:	d901      	bls.n	80092d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e229      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092d2:	4b61      	ldr	r3, [pc, #388]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0f0      	beq.n	80092c0 <HAL_RCC_OscConfig+0xe8>
 80092de:	e014      	b.n	800930a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092e0:	f7ff fbfa 	bl	8008ad8 <HAL_GetTick>
 80092e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092e6:	e008      	b.n	80092fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092e8:	f7ff fbf6 	bl	8008ad8 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	2b64      	cmp	r3, #100	; 0x64
 80092f4:	d901      	bls.n	80092fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e215      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092fa:	4b57      	ldr	r3, [pc, #348]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1f0      	bne.n	80092e8 <HAL_RCC_OscConfig+0x110>
 8009306:	e000      	b.n	800930a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	2b00      	cmp	r3, #0
 8009314:	d069      	beq.n	80093ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009316:	4b50      	ldr	r3, [pc, #320]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f003 030c 	and.w	r3, r3, #12
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00b      	beq.n	800933a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009322:	4b4d      	ldr	r3, [pc, #308]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f003 030c 	and.w	r3, r3, #12
 800932a:	2b08      	cmp	r3, #8
 800932c:	d11c      	bne.n	8009368 <HAL_RCC_OscConfig+0x190>
 800932e:	4b4a      	ldr	r3, [pc, #296]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d116      	bne.n	8009368 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800933a:	4b47      	ldr	r3, [pc, #284]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	2b00      	cmp	r3, #0
 8009344:	d005      	beq.n	8009352 <HAL_RCC_OscConfig+0x17a>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d001      	beq.n	8009352 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e1e9      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009352:	4b41      	ldr	r3, [pc, #260]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	493d      	ldr	r1, [pc, #244]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009362:	4313      	orrs	r3, r2
 8009364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009366:	e040      	b.n	80093ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d023      	beq.n	80093b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009370:	4b39      	ldr	r3, [pc, #228]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a38      	ldr	r2, [pc, #224]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009376:	f043 0301 	orr.w	r3, r3, #1
 800937a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800937c:	f7ff fbac 	bl	8008ad8 <HAL_GetTick>
 8009380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009382:	e008      	b.n	8009396 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009384:	f7ff fba8 	bl	8008ad8 <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	2b02      	cmp	r3, #2
 8009390:	d901      	bls.n	8009396 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e1c7      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009396:	4b30      	ldr	r3, [pc, #192]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0302 	and.w	r3, r3, #2
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0f0      	beq.n	8009384 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093a2:	4b2d      	ldr	r3, [pc, #180]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	4929      	ldr	r1, [pc, #164]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	600b      	str	r3, [r1, #0]
 80093b6:	e018      	b.n	80093ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093b8:	4b27      	ldr	r3, [pc, #156]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a26      	ldr	r2, [pc, #152]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 80093be:	f023 0301 	bic.w	r3, r3, #1
 80093c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c4:	f7ff fb88 	bl	8008ad8 <HAL_GetTick>
 80093c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093ca:	e008      	b.n	80093de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093cc:	f7ff fb84 	bl	8008ad8 <HAL_GetTick>
 80093d0:	4602      	mov	r2, r0
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d901      	bls.n	80093de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e1a3      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093de:	4b1e      	ldr	r3, [pc, #120]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f003 0302 	and.w	r3, r3, #2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1f0      	bne.n	80093cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0308 	and.w	r3, r3, #8
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d038      	beq.n	8009468 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d019      	beq.n	8009432 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093fe:	4b16      	ldr	r3, [pc, #88]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009402:	4a15      	ldr	r2, [pc, #84]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009404:	f043 0301 	orr.w	r3, r3, #1
 8009408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800940a:	f7ff fb65 	bl	8008ad8 <HAL_GetTick>
 800940e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009410:	e008      	b.n	8009424 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009412:	f7ff fb61 	bl	8008ad8 <HAL_GetTick>
 8009416:	4602      	mov	r2, r0
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	2b02      	cmp	r3, #2
 800941e:	d901      	bls.n	8009424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e180      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009424:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0f0      	beq.n	8009412 <HAL_RCC_OscConfig+0x23a>
 8009430:	e01a      	b.n	8009468 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009432:	4b09      	ldr	r3, [pc, #36]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009436:	4a08      	ldr	r2, [pc, #32]	; (8009458 <HAL_RCC_OscConfig+0x280>)
 8009438:	f023 0301 	bic.w	r3, r3, #1
 800943c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800943e:	f7ff fb4b 	bl	8008ad8 <HAL_GetTick>
 8009442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009444:	e00a      	b.n	800945c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009446:	f7ff fb47 	bl	8008ad8 <HAL_GetTick>
 800944a:	4602      	mov	r2, r0
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	2b02      	cmp	r3, #2
 8009452:	d903      	bls.n	800945c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e166      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
 8009458:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800945c:	4b92      	ldr	r3, [pc, #584]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 800945e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009460:	f003 0302 	and.w	r3, r3, #2
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1ee      	bne.n	8009446 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0304 	and.w	r3, r3, #4
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 80a4 	beq.w	80095be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009476:	4b8c      	ldr	r3, [pc, #560]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10d      	bne.n	800949e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009482:	4b89      	ldr	r3, [pc, #548]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009486:	4a88      	ldr	r2, [pc, #544]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800948c:	6413      	str	r3, [r2, #64]	; 0x40
 800948e:	4b86      	ldr	r3, [pc, #536]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009496:	60bb      	str	r3, [r7, #8]
 8009498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800949a:	2301      	movs	r3, #1
 800949c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800949e:	4b83      	ldr	r3, [pc, #524]	; (80096ac <HAL_RCC_OscConfig+0x4d4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d118      	bne.n	80094dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80094aa:	4b80      	ldr	r3, [pc, #512]	; (80096ac <HAL_RCC_OscConfig+0x4d4>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a7f      	ldr	r2, [pc, #508]	; (80096ac <HAL_RCC_OscConfig+0x4d4>)
 80094b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094b6:	f7ff fb0f 	bl	8008ad8 <HAL_GetTick>
 80094ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80094bc:	e008      	b.n	80094d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094be:	f7ff fb0b 	bl	8008ad8 <HAL_GetTick>
 80094c2:	4602      	mov	r2, r0
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	2b64      	cmp	r3, #100	; 0x64
 80094ca:	d901      	bls.n	80094d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80094cc:	2303      	movs	r3, #3
 80094ce:	e12a      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80094d0:	4b76      	ldr	r3, [pc, #472]	; (80096ac <HAL_RCC_OscConfig+0x4d4>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d0f0      	beq.n	80094be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d106      	bne.n	80094f2 <HAL_RCC_OscConfig+0x31a>
 80094e4:	4b70      	ldr	r3, [pc, #448]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 80094e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e8:	4a6f      	ldr	r2, [pc, #444]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 80094ea:	f043 0301 	orr.w	r3, r3, #1
 80094ee:	6713      	str	r3, [r2, #112]	; 0x70
 80094f0:	e02d      	b.n	800954e <HAL_RCC_OscConfig+0x376>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10c      	bne.n	8009514 <HAL_RCC_OscConfig+0x33c>
 80094fa:	4b6b      	ldr	r3, [pc, #428]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 80094fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fe:	4a6a      	ldr	r2, [pc, #424]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009500:	f023 0301 	bic.w	r3, r3, #1
 8009504:	6713      	str	r3, [r2, #112]	; 0x70
 8009506:	4b68      	ldr	r3, [pc, #416]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950a:	4a67      	ldr	r2, [pc, #412]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 800950c:	f023 0304 	bic.w	r3, r3, #4
 8009510:	6713      	str	r3, [r2, #112]	; 0x70
 8009512:	e01c      	b.n	800954e <HAL_RCC_OscConfig+0x376>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	2b05      	cmp	r3, #5
 800951a:	d10c      	bne.n	8009536 <HAL_RCC_OscConfig+0x35e>
 800951c:	4b62      	ldr	r3, [pc, #392]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 800951e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009520:	4a61      	ldr	r2, [pc, #388]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009522:	f043 0304 	orr.w	r3, r3, #4
 8009526:	6713      	str	r3, [r2, #112]	; 0x70
 8009528:	4b5f      	ldr	r3, [pc, #380]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 800952a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800952c:	4a5e      	ldr	r2, [pc, #376]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 800952e:	f043 0301 	orr.w	r3, r3, #1
 8009532:	6713      	str	r3, [r2, #112]	; 0x70
 8009534:	e00b      	b.n	800954e <HAL_RCC_OscConfig+0x376>
 8009536:	4b5c      	ldr	r3, [pc, #368]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953a:	4a5b      	ldr	r2, [pc, #364]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 800953c:	f023 0301 	bic.w	r3, r3, #1
 8009540:	6713      	str	r3, [r2, #112]	; 0x70
 8009542:	4b59      	ldr	r3, [pc, #356]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009546:	4a58      	ldr	r2, [pc, #352]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009548:	f023 0304 	bic.w	r3, r3, #4
 800954c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d015      	beq.n	8009582 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009556:	f7ff fabf 	bl	8008ad8 <HAL_GetTick>
 800955a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800955c:	e00a      	b.n	8009574 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800955e:	f7ff fabb 	bl	8008ad8 <HAL_GetTick>
 8009562:	4602      	mov	r2, r0
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	f241 3288 	movw	r2, #5000	; 0x1388
 800956c:	4293      	cmp	r3, r2
 800956e:	d901      	bls.n	8009574 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009570:	2303      	movs	r3, #3
 8009572:	e0d8      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009574:	4b4c      	ldr	r3, [pc, #304]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009578:	f003 0302 	and.w	r3, r3, #2
 800957c:	2b00      	cmp	r3, #0
 800957e:	d0ee      	beq.n	800955e <HAL_RCC_OscConfig+0x386>
 8009580:	e014      	b.n	80095ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009582:	f7ff faa9 	bl	8008ad8 <HAL_GetTick>
 8009586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009588:	e00a      	b.n	80095a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800958a:	f7ff faa5 	bl	8008ad8 <HAL_GetTick>
 800958e:	4602      	mov	r2, r0
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	f241 3288 	movw	r2, #5000	; 0x1388
 8009598:	4293      	cmp	r3, r2
 800959a:	d901      	bls.n	80095a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e0c2      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095a0:	4b41      	ldr	r3, [pc, #260]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 80095a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095a4:	f003 0302 	and.w	r3, r3, #2
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1ee      	bne.n	800958a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d105      	bne.n	80095be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095b2:	4b3d      	ldr	r3, [pc, #244]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	4a3c      	ldr	r2, [pc, #240]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 80095b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f000 80ae 	beq.w	8009724 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80095c8:	4b37      	ldr	r3, [pc, #220]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f003 030c 	and.w	r3, r3, #12
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	d06d      	beq.n	80096b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d14b      	bne.n	8009674 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095dc:	4b32      	ldr	r3, [pc, #200]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a31      	ldr	r2, [pc, #196]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 80095e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e8:	f7ff fa76 	bl	8008ad8 <HAL_GetTick>
 80095ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ee:	e008      	b.n	8009602 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095f0:	f7ff fa72 	bl	8008ad8 <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d901      	bls.n	8009602 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e091      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009602:	4b29      	ldr	r3, [pc, #164]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1f0      	bne.n	80095f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	69da      	ldr	r2, [r3, #28]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	431a      	orrs	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	019b      	lsls	r3, r3, #6
 800961e:	431a      	orrs	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009624:	085b      	lsrs	r3, r3, #1
 8009626:	3b01      	subs	r3, #1
 8009628:	041b      	lsls	r3, r3, #16
 800962a:	431a      	orrs	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	061b      	lsls	r3, r3, #24
 8009632:	431a      	orrs	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009638:	071b      	lsls	r3, r3, #28
 800963a:	491b      	ldr	r1, [pc, #108]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 800963c:	4313      	orrs	r3, r2
 800963e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009640:	4b19      	ldr	r3, [pc, #100]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a18      	ldr	r2, [pc, #96]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800964a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800964c:	f7ff fa44 	bl	8008ad8 <HAL_GetTick>
 8009650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009652:	e008      	b.n	8009666 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009654:	f7ff fa40 	bl	8008ad8 <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	2b02      	cmp	r3, #2
 8009660:	d901      	bls.n	8009666 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	e05f      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009666:	4b10      	ldr	r3, [pc, #64]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0f0      	beq.n	8009654 <HAL_RCC_OscConfig+0x47c>
 8009672:	e057      	b.n	8009724 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009674:	4b0c      	ldr	r3, [pc, #48]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a0b      	ldr	r2, [pc, #44]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 800967a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800967e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009680:	f7ff fa2a 	bl	8008ad8 <HAL_GetTick>
 8009684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009686:	e008      	b.n	800969a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009688:	f7ff fa26 	bl	8008ad8 <HAL_GetTick>
 800968c:	4602      	mov	r2, r0
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	2b02      	cmp	r3, #2
 8009694:	d901      	bls.n	800969a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	e045      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800969a:	4b03      	ldr	r3, [pc, #12]	; (80096a8 <HAL_RCC_OscConfig+0x4d0>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1f0      	bne.n	8009688 <HAL_RCC_OscConfig+0x4b0>
 80096a6:	e03d      	b.n	8009724 <HAL_RCC_OscConfig+0x54c>
 80096a8:	40023800 	.word	0x40023800
 80096ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80096b0:	4b1f      	ldr	r3, [pc, #124]	; (8009730 <HAL_RCC_OscConfig+0x558>)
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d030      	beq.n	8009720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d129      	bne.n	8009720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d122      	bne.n	8009720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80096e0:	4013      	ands	r3, r2
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80096e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d119      	bne.n	8009720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	085b      	lsrs	r3, r3, #1
 80096f8:	3b01      	subs	r3, #1
 80096fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d10f      	bne.n	8009720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800970c:	429a      	cmp	r2, r3
 800970e:	d107      	bne.n	8009720 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800971c:	429a      	cmp	r2, r3
 800971e:	d001      	beq.n	8009724 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e000      	b.n	8009726 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	40023800 	.word	0x40023800

08009734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e0d0      	b.n	80098ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800974c:	4b6a      	ldr	r3, [pc, #424]	; (80098f8 <HAL_RCC_ClockConfig+0x1c4>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 030f 	and.w	r3, r3, #15
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d910      	bls.n	800977c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800975a:	4b67      	ldr	r3, [pc, #412]	; (80098f8 <HAL_RCC_ClockConfig+0x1c4>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f023 020f 	bic.w	r2, r3, #15
 8009762:	4965      	ldr	r1, [pc, #404]	; (80098f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	4313      	orrs	r3, r2
 8009768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800976a:	4b63      	ldr	r3, [pc, #396]	; (80098f8 <HAL_RCC_ClockConfig+0x1c4>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 030f 	and.w	r3, r3, #15
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	429a      	cmp	r2, r3
 8009776:	d001      	beq.n	800977c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e0b8      	b.n	80098ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 0302 	and.w	r3, r3, #2
 8009784:	2b00      	cmp	r3, #0
 8009786:	d020      	beq.n	80097ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b00      	cmp	r3, #0
 8009792:	d005      	beq.n	80097a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009794:	4b59      	ldr	r3, [pc, #356]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	4a58      	ldr	r2, [pc, #352]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 800979a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800979e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0308 	and.w	r3, r3, #8
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d005      	beq.n	80097b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80097ac:	4b53      	ldr	r3, [pc, #332]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	4a52      	ldr	r2, [pc, #328]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 80097b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80097b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097b8:	4b50      	ldr	r3, [pc, #320]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	494d      	ldr	r1, [pc, #308]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d040      	beq.n	8009858 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d107      	bne.n	80097ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097de:	4b47      	ldr	r3, [pc, #284]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d115      	bne.n	8009816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e07f      	b.n	80098ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d107      	bne.n	8009806 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097f6:	4b41      	ldr	r3, [pc, #260]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d109      	bne.n	8009816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e073      	b.n	80098ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009806:	4b3d      	ldr	r3, [pc, #244]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0302 	and.w	r3, r3, #2
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e06b      	b.n	80098ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009816:	4b39      	ldr	r3, [pc, #228]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f023 0203 	bic.w	r2, r3, #3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	4936      	ldr	r1, [pc, #216]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 8009824:	4313      	orrs	r3, r2
 8009826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009828:	f7ff f956 	bl	8008ad8 <HAL_GetTick>
 800982c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800982e:	e00a      	b.n	8009846 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009830:	f7ff f952 	bl	8008ad8 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	f241 3288 	movw	r2, #5000	; 0x1388
 800983e:	4293      	cmp	r3, r2
 8009840:	d901      	bls.n	8009846 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e053      	b.n	80098ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009846:	4b2d      	ldr	r3, [pc, #180]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f003 020c 	and.w	r2, r3, #12
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	429a      	cmp	r2, r3
 8009856:	d1eb      	bne.n	8009830 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009858:	4b27      	ldr	r3, [pc, #156]	; (80098f8 <HAL_RCC_ClockConfig+0x1c4>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 030f 	and.w	r3, r3, #15
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	429a      	cmp	r2, r3
 8009864:	d210      	bcs.n	8009888 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009866:	4b24      	ldr	r3, [pc, #144]	; (80098f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f023 020f 	bic.w	r2, r3, #15
 800986e:	4922      	ldr	r1, [pc, #136]	; (80098f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	4313      	orrs	r3, r2
 8009874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009876:	4b20      	ldr	r3, [pc, #128]	; (80098f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	d001      	beq.n	8009888 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e032      	b.n	80098ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d008      	beq.n	80098a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009894:	4b19      	ldr	r3, [pc, #100]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	4916      	ldr	r1, [pc, #88]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 0308 	and.w	r3, r3, #8
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d009      	beq.n	80098c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80098b2:	4b12      	ldr	r3, [pc, #72]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	490e      	ldr	r1, [pc, #56]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80098c6:	f000 f821 	bl	800990c <HAL_RCC_GetSysClockFreq>
 80098ca:	4601      	mov	r1, r0
 80098cc:	4b0b      	ldr	r3, [pc, #44]	; (80098fc <HAL_RCC_ClockConfig+0x1c8>)
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	091b      	lsrs	r3, r3, #4
 80098d2:	f003 030f 	and.w	r3, r3, #15
 80098d6:	4a0a      	ldr	r2, [pc, #40]	; (8009900 <HAL_RCC_ClockConfig+0x1cc>)
 80098d8:	5cd3      	ldrb	r3, [r2, r3]
 80098da:	fa21 f303 	lsr.w	r3, r1, r3
 80098de:	4a09      	ldr	r2, [pc, #36]	; (8009904 <HAL_RCC_ClockConfig+0x1d0>)
 80098e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <HAL_RCC_ClockConfig+0x1d4>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7ff f8b2 	bl	8008a50 <HAL_InitTick>

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	40023c00 	.word	0x40023c00
 80098fc:	40023800 	.word	0x40023800
 8009900:	0800adb8 	.word	0x0800adb8
 8009904:	20000020 	.word	0x20000020
 8009908:	20000024 	.word	0x20000024

0800990c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800990c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	607b      	str	r3, [r7, #4]
 8009916:	2300      	movs	r3, #0
 8009918:	60fb      	str	r3, [r7, #12]
 800991a:	2300      	movs	r3, #0
 800991c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009922:	4b63      	ldr	r3, [pc, #396]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f003 030c 	and.w	r3, r3, #12
 800992a:	2b04      	cmp	r3, #4
 800992c:	d007      	beq.n	800993e <HAL_RCC_GetSysClockFreq+0x32>
 800992e:	2b08      	cmp	r3, #8
 8009930:	d008      	beq.n	8009944 <HAL_RCC_GetSysClockFreq+0x38>
 8009932:	2b00      	cmp	r3, #0
 8009934:	f040 80b4 	bne.w	8009aa0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009938:	4b5e      	ldr	r3, [pc, #376]	; (8009ab4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800993a:	60bb      	str	r3, [r7, #8]
      break;
 800993c:	e0b3      	b.n	8009aa6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800993e:	4b5e      	ldr	r3, [pc, #376]	; (8009ab8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009940:	60bb      	str	r3, [r7, #8]
      break;
 8009942:	e0b0      	b.n	8009aa6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009944:	4b5a      	ldr	r3, [pc, #360]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800994c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800994e:	4b58      	ldr	r3, [pc, #352]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009956:	2b00      	cmp	r3, #0
 8009958:	d04a      	beq.n	80099f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800995a:	4b55      	ldr	r3, [pc, #340]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	099b      	lsrs	r3, r3, #6
 8009960:	f04f 0400 	mov.w	r4, #0
 8009964:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009968:	f04f 0200 	mov.w	r2, #0
 800996c:	ea03 0501 	and.w	r5, r3, r1
 8009970:	ea04 0602 	and.w	r6, r4, r2
 8009974:	4629      	mov	r1, r5
 8009976:	4632      	mov	r2, r6
 8009978:	f04f 0300 	mov.w	r3, #0
 800997c:	f04f 0400 	mov.w	r4, #0
 8009980:	0154      	lsls	r4, r2, #5
 8009982:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009986:	014b      	lsls	r3, r1, #5
 8009988:	4619      	mov	r1, r3
 800998a:	4622      	mov	r2, r4
 800998c:	1b49      	subs	r1, r1, r5
 800998e:	eb62 0206 	sbc.w	r2, r2, r6
 8009992:	f04f 0300 	mov.w	r3, #0
 8009996:	f04f 0400 	mov.w	r4, #0
 800999a:	0194      	lsls	r4, r2, #6
 800999c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80099a0:	018b      	lsls	r3, r1, #6
 80099a2:	1a5b      	subs	r3, r3, r1
 80099a4:	eb64 0402 	sbc.w	r4, r4, r2
 80099a8:	f04f 0100 	mov.w	r1, #0
 80099ac:	f04f 0200 	mov.w	r2, #0
 80099b0:	00e2      	lsls	r2, r4, #3
 80099b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80099b6:	00d9      	lsls	r1, r3, #3
 80099b8:	460b      	mov	r3, r1
 80099ba:	4614      	mov	r4, r2
 80099bc:	195b      	adds	r3, r3, r5
 80099be:	eb44 0406 	adc.w	r4, r4, r6
 80099c2:	f04f 0100 	mov.w	r1, #0
 80099c6:	f04f 0200 	mov.w	r2, #0
 80099ca:	0262      	lsls	r2, r4, #9
 80099cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80099d0:	0259      	lsls	r1, r3, #9
 80099d2:	460b      	mov	r3, r1
 80099d4:	4614      	mov	r4, r2
 80099d6:	4618      	mov	r0, r3
 80099d8:	4621      	mov	r1, r4
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f04f 0400 	mov.w	r4, #0
 80099e0:	461a      	mov	r2, r3
 80099e2:	4623      	mov	r3, r4
 80099e4:	f7fe fc28 	bl	8008238 <__aeabi_uldivmod>
 80099e8:	4603      	mov	r3, r0
 80099ea:	460c      	mov	r4, r1
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	e049      	b.n	8009a84 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099f0:	4b2f      	ldr	r3, [pc, #188]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	099b      	lsrs	r3, r3, #6
 80099f6:	f04f 0400 	mov.w	r4, #0
 80099fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80099fe:	f04f 0200 	mov.w	r2, #0
 8009a02:	ea03 0501 	and.w	r5, r3, r1
 8009a06:	ea04 0602 	and.w	r6, r4, r2
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	4632      	mov	r2, r6
 8009a0e:	f04f 0300 	mov.w	r3, #0
 8009a12:	f04f 0400 	mov.w	r4, #0
 8009a16:	0154      	lsls	r4, r2, #5
 8009a18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009a1c:	014b      	lsls	r3, r1, #5
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4622      	mov	r2, r4
 8009a22:	1b49      	subs	r1, r1, r5
 8009a24:	eb62 0206 	sbc.w	r2, r2, r6
 8009a28:	f04f 0300 	mov.w	r3, #0
 8009a2c:	f04f 0400 	mov.w	r4, #0
 8009a30:	0194      	lsls	r4, r2, #6
 8009a32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009a36:	018b      	lsls	r3, r1, #6
 8009a38:	1a5b      	subs	r3, r3, r1
 8009a3a:	eb64 0402 	sbc.w	r4, r4, r2
 8009a3e:	f04f 0100 	mov.w	r1, #0
 8009a42:	f04f 0200 	mov.w	r2, #0
 8009a46:	00e2      	lsls	r2, r4, #3
 8009a48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009a4c:	00d9      	lsls	r1, r3, #3
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4614      	mov	r4, r2
 8009a52:	195b      	adds	r3, r3, r5
 8009a54:	eb44 0406 	adc.w	r4, r4, r6
 8009a58:	f04f 0100 	mov.w	r1, #0
 8009a5c:	f04f 0200 	mov.w	r2, #0
 8009a60:	02a2      	lsls	r2, r4, #10
 8009a62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009a66:	0299      	lsls	r1, r3, #10
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4614      	mov	r4, r2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	4621      	mov	r1, r4
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f04f 0400 	mov.w	r4, #0
 8009a76:	461a      	mov	r2, r3
 8009a78:	4623      	mov	r3, r4
 8009a7a:	f7fe fbdd 	bl	8008238 <__aeabi_uldivmod>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	460c      	mov	r4, r1
 8009a82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009a84:	4b0a      	ldr	r3, [pc, #40]	; (8009ab0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	0c1b      	lsrs	r3, r3, #16
 8009a8a:	f003 0303 	and.w	r3, r3, #3
 8009a8e:	3301      	adds	r3, #1
 8009a90:	005b      	lsls	r3, r3, #1
 8009a92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a9c:	60bb      	str	r3, [r7, #8]
      break;
 8009a9e:	e002      	b.n	8009aa6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009aa0:	4b04      	ldr	r3, [pc, #16]	; (8009ab4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009aa2:	60bb      	str	r3, [r7, #8]
      break;
 8009aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ab0:	40023800 	.word	0x40023800
 8009ab4:	00f42400 	.word	0x00f42400
 8009ab8:	007a1200 	.word	0x007a1200

08009abc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ac0:	4b03      	ldr	r3, [pc, #12]	; (8009ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	20000020 	.word	0x20000020

08009ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009ad8:	f7ff fff0 	bl	8009abc <HAL_RCC_GetHCLKFreq>
 8009adc:	4601      	mov	r1, r0
 8009ade:	4b05      	ldr	r3, [pc, #20]	; (8009af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	0a9b      	lsrs	r3, r3, #10
 8009ae4:	f003 0307 	and.w	r3, r3, #7
 8009ae8:	4a03      	ldr	r2, [pc, #12]	; (8009af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009aea:	5cd3      	ldrb	r3, [r2, r3]
 8009aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	40023800 	.word	0x40023800
 8009af8:	0800adc8 	.word	0x0800adc8

08009afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009b00:	f7ff ffdc 	bl	8009abc <HAL_RCC_GetHCLKFreq>
 8009b04:	4601      	mov	r1, r0
 8009b06:	4b05      	ldr	r3, [pc, #20]	; (8009b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	0b5b      	lsrs	r3, r3, #13
 8009b0c:	f003 0307 	and.w	r3, r3, #7
 8009b10:	4a03      	ldr	r2, [pc, #12]	; (8009b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b12:	5cd3      	ldrb	r3, [r2, r3]
 8009b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	40023800 	.word	0x40023800
 8009b20:	0800adc8 	.word	0x0800adc8

08009b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0301 	and.w	r3, r3, #1
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d012      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009b4c:	4b69      	ldr	r3, [pc, #420]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	4a68      	ldr	r2, [pc, #416]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009b56:	6093      	str	r3, [r2, #8]
 8009b58:	4b66      	ldr	r3, [pc, #408]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b5a:	689a      	ldr	r2, [r3, #8]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b60:	4964      	ldr	r1, [pc, #400]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d101      	bne.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d017      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b7e:	4b5d      	ldr	r3, [pc, #372]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8c:	4959      	ldr	r1, [pc, #356]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b9c:	d101      	bne.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009baa:	2301      	movs	r3, #1
 8009bac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d017      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009bba:	4b4e      	ldr	r3, [pc, #312]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc8:	494a      	ldr	r1, [pc, #296]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bd8:	d101      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009be6:	2301      	movs	r3, #1
 8009be8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0320 	and.w	r3, r3, #32
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 808b 	beq.w	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009c08:	4b3a      	ldr	r3, [pc, #232]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0c:	4a39      	ldr	r2, [pc, #228]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c12:	6413      	str	r3, [r2, #64]	; 0x40
 8009c14:	4b37      	ldr	r3, [pc, #220]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c1c:	60bb      	str	r3, [r7, #8]
 8009c1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c20:	4b35      	ldr	r3, [pc, #212]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a34      	ldr	r2, [pc, #208]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c2c:	f7fe ff54 	bl	8008ad8 <HAL_GetTick>
 8009c30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009c32:	e008      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c34:	f7fe ff50 	bl	8008ad8 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b64      	cmp	r3, #100	; 0x64
 8009c40:	d901      	bls.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e38d      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009c46:	4b2c      	ldr	r3, [pc, #176]	; (8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0f0      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009c52:	4b28      	ldr	r3, [pc, #160]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d035      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d02e      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c70:	4b20      	ldr	r3, [pc, #128]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009c7a:	4b1e      	ldr	r3, [pc, #120]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7e:	4a1d      	ldr	r2, [pc, #116]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c84:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009c86:	4b1b      	ldr	r3, [pc, #108]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8a:	4a1a      	ldr	r2, [pc, #104]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009c92:	4a18      	ldr	r2, [pc, #96]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009c98:	4b16      	ldr	r3, [pc, #88]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d114      	bne.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca4:	f7fe ff18 	bl	8008ad8 <HAL_GetTick>
 8009ca8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009caa:	e00a      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cac:	f7fe ff14 	bl	8008ad8 <HAL_GetTick>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d901      	bls.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e34f      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cc2:	4b0c      	ldr	r3, [pc, #48]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc6:	f003 0302 	and.w	r3, r3, #2
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d0ee      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cda:	d111      	bne.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009cdc:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009ce8:	4b04      	ldr	r3, [pc, #16]	; (8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009cea:	400b      	ands	r3, r1
 8009cec:	4901      	ldr	r1, [pc, #4]	; (8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	608b      	str	r3, [r1, #8]
 8009cf2:	e00b      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009cf4:	40023800 	.word	0x40023800
 8009cf8:	40007000 	.word	0x40007000
 8009cfc:	0ffffcff 	.word	0x0ffffcff
 8009d00:	4bb3      	ldr	r3, [pc, #716]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	4ab2      	ldr	r2, [pc, #712]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009d0a:	6093      	str	r3, [r2, #8]
 8009d0c:	4bb0      	ldr	r3, [pc, #704]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d18:	49ad      	ldr	r1, [pc, #692]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 0310 	and.w	r3, r3, #16
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d010      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d2a:	4ba9      	ldr	r3, [pc, #676]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d30:	4aa7      	ldr	r2, [pc, #668]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009d3a:	4ba5      	ldr	r3, [pc, #660]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d44:	49a2      	ldr	r1, [pc, #648]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d46:	4313      	orrs	r3, r2
 8009d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00a      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009d58:	4b9d      	ldr	r3, [pc, #628]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d66:	499a      	ldr	r1, [pc, #616]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00a      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009d7a:	4b95      	ldr	r3, [pc, #596]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d88:	4991      	ldr	r1, [pc, #580]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00a      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009d9c:	4b8c      	ldr	r3, [pc, #560]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009da2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009daa:	4989      	ldr	r1, [pc, #548]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00a      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009dbe:	4b84      	ldr	r3, [pc, #528]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dcc:	4980      	ldr	r1, [pc, #512]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00a      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009de0:	4b7b      	ldr	r3, [pc, #492]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de6:	f023 0203 	bic.w	r2, r3, #3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dee:	4978      	ldr	r1, [pc, #480]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009df0:	4313      	orrs	r3, r2
 8009df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00a      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009e02:	4b73      	ldr	r3, [pc, #460]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e08:	f023 020c 	bic.w	r2, r3, #12
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e10:	496f      	ldr	r1, [pc, #444]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e12:	4313      	orrs	r3, r2
 8009e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00a      	beq.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009e24:	4b6a      	ldr	r3, [pc, #424]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e32:	4967      	ldr	r1, [pc, #412]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00a      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009e46:	4b62      	ldr	r3, [pc, #392]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e4c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e54:	495e      	ldr	r1, [pc, #376]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d00a      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009e68:	4b59      	ldr	r3, [pc, #356]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e76:	4956      	ldr	r1, [pc, #344]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00a      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009e8a:	4b51      	ldr	r3, [pc, #324]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e98:	494d      	ldr	r1, [pc, #308]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00a      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009eac:	4b48      	ldr	r3, [pc, #288]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eba:	4945      	ldr	r1, [pc, #276]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00a      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009ece:	4b40      	ldr	r3, [pc, #256]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009edc:	493c      	ldr	r1, [pc, #240]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00a      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009ef0:	4b37      	ldr	r3, [pc, #220]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009efe:	4934      	ldr	r1, [pc, #208]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009f00:	4313      	orrs	r3, r2
 8009f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d011      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009f12:	4b2f      	ldr	r3, [pc, #188]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f18:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f20:	492b      	ldr	r1, [pc, #172]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f30:	d101      	bne.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009f32:	2301      	movs	r3, #1
 8009f34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 0308 	and.w	r3, r3, #8
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009f42:	2301      	movs	r3, #1
 8009f44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f52:	4b1f      	ldr	r3, [pc, #124]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f58:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f60:	491b      	ldr	r1, [pc, #108]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00b      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009f74:	4b16      	ldr	r3, [pc, #88]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f84:	4912      	ldr	r1, [pc, #72]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00b      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009f98:	4b0d      	ldr	r3, [pc, #52]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f9e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fa8:	4909      	ldr	r1, [pc, #36]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00f      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009fbc:	4b04      	ldr	r3, [pc, #16]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8009fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fcc:	e002      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8009fce:	bf00      	nop
 8009fd0:	40023800 	.word	0x40023800
 8009fd4:	4985      	ldr	r1, [pc, #532]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00b      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009fe8:	4b80      	ldr	r3, [pc, #512]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ff8:	497c      	ldr	r1, [pc, #496]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	2b01      	cmp	r3, #1
 800a004:	d005      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a00e:	f040 80d6 	bne.w	800a1be <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a012:	4b76      	ldr	r3, [pc, #472]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a75      	ldr	r2, [pc, #468]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a018:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a01c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a01e:	f7fe fd5b 	bl	8008ad8 <HAL_GetTick>
 800a022:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a024:	e008      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a026:	f7fe fd57 	bl	8008ad8 <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	2b64      	cmp	r3, #100	; 0x64
 800a032:	d901      	bls.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e194      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a038:	4b6c      	ldr	r3, [pc, #432]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1f0      	bne.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d021      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a054:	2b00      	cmp	r3, #0
 800a056:	d11d      	bne.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a058:	4b64      	ldr	r3, [pc, #400]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a05a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a05e:	0c1b      	lsrs	r3, r3, #16
 800a060:	f003 0303 	and.w	r3, r3, #3
 800a064:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a066:	4b61      	ldr	r3, [pc, #388]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a06c:	0e1b      	lsrs	r3, r3, #24
 800a06e:	f003 030f 	and.w	r3, r3, #15
 800a072:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	019a      	lsls	r2, r3, #6
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	041b      	lsls	r3, r3, #16
 800a07e:	431a      	orrs	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	061b      	lsls	r3, r3, #24
 800a084:	431a      	orrs	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	071b      	lsls	r3, r3, #28
 800a08c:	4957      	ldr	r1, [pc, #348]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a08e:	4313      	orrs	r3, r2
 800a090:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d004      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x586>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0a8:	d00a      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d02e      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0be:	d129      	bne.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a0c0:	4b4a      	ldr	r3, [pc, #296]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a0c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0c6:	0c1b      	lsrs	r3, r3, #16
 800a0c8:	f003 0303 	and.w	r3, r3, #3
 800a0cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a0ce:	4b47      	ldr	r3, [pc, #284]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a0d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0d4:	0f1b      	lsrs	r3, r3, #28
 800a0d6:	f003 0307 	and.w	r3, r3, #7
 800a0da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	019a      	lsls	r2, r3, #6
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	041b      	lsls	r3, r3, #16
 800a0e6:	431a      	orrs	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	061b      	lsls	r3, r3, #24
 800a0ee:	431a      	orrs	r2, r3
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	071b      	lsls	r3, r3, #28
 800a0f4:	493d      	ldr	r1, [pc, #244]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a0fc:	4b3b      	ldr	r3, [pc, #236]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a0fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a102:	f023 021f 	bic.w	r2, r3, #31
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	3b01      	subs	r3, #1
 800a10c:	4937      	ldr	r1, [pc, #220]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d01d      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a120:	4b32      	ldr	r3, [pc, #200]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a126:	0e1b      	lsrs	r3, r3, #24
 800a128:	f003 030f 	and.w	r3, r3, #15
 800a12c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a12e:	4b2f      	ldr	r3, [pc, #188]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a134:	0f1b      	lsrs	r3, r3, #28
 800a136:	f003 0307 	and.w	r3, r3, #7
 800a13a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	019a      	lsls	r2, r3, #6
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	041b      	lsls	r3, r3, #16
 800a148:	431a      	orrs	r2, r3
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	061b      	lsls	r3, r3, #24
 800a14e:	431a      	orrs	r2, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	071b      	lsls	r3, r3, #28
 800a154:	4925      	ldr	r1, [pc, #148]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a156:	4313      	orrs	r3, r2
 800a158:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d011      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	019a      	lsls	r2, r3, #6
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	041b      	lsls	r3, r3, #16
 800a174:	431a      	orrs	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	061b      	lsls	r3, r3, #24
 800a17c:	431a      	orrs	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	071b      	lsls	r3, r3, #28
 800a184:	4919      	ldr	r1, [pc, #100]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a186:	4313      	orrs	r3, r2
 800a188:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a18c:	4b17      	ldr	r3, [pc, #92]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a16      	ldr	r2, [pc, #88]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a192:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a198:	f7fe fc9e 	bl	8008ad8 <HAL_GetTick>
 800a19c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a19e:	e008      	b.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a1a0:	f7fe fc9a 	bl	8008ad8 <HAL_GetTick>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	2b64      	cmp	r3, #100	; 0x64
 800a1ac:	d901      	bls.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e0d7      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a1b2:	4b0e      	ldr	r3, [pc, #56]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0f0      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	f040 80cd 	bne.w	800a360 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a1c6:	4b09      	ldr	r3, [pc, #36]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a08      	ldr	r2, [pc, #32]	; (800a1ec <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800a1cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1d2:	f7fe fc81 	bl	8008ad8 <HAL_GetTick>
 800a1d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a1d8:	e00a      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a1da:	f7fe fc7d 	bl	8008ad8 <HAL_GetTick>
 800a1de:	4602      	mov	r2, r0
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	2b64      	cmp	r3, #100	; 0x64
 800a1e6:	d903      	bls.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e0ba      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800a1ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a1f0:	4b5e      	ldr	r3, [pc, #376]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1fc:	d0ed      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d009      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d02e      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a222:	2b00      	cmp	r3, #0
 800a224:	d12a      	bne.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a226:	4b51      	ldr	r3, [pc, #324]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a22c:	0c1b      	lsrs	r3, r3, #16
 800a22e:	f003 0303 	and.w	r3, r3, #3
 800a232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a234:	4b4d      	ldr	r3, [pc, #308]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a23a:	0f1b      	lsrs	r3, r3, #28
 800a23c:	f003 0307 	and.w	r3, r3, #7
 800a240:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	019a      	lsls	r2, r3, #6
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	041b      	lsls	r3, r3, #16
 800a24c:	431a      	orrs	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	061b      	lsls	r3, r3, #24
 800a254:	431a      	orrs	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	071b      	lsls	r3, r3, #28
 800a25a:	4944      	ldr	r1, [pc, #272]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a25c:	4313      	orrs	r3, r2
 800a25e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a262:	4b42      	ldr	r3, [pc, #264]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a268:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a270:	3b01      	subs	r3, #1
 800a272:	021b      	lsls	r3, r3, #8
 800a274:	493d      	ldr	r1, [pc, #244]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a276:	4313      	orrs	r3, r2
 800a278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d022      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a28c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a290:	d11d      	bne.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a292:	4b36      	ldr	r3, [pc, #216]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a298:	0e1b      	lsrs	r3, r3, #24
 800a29a:	f003 030f 	and.w	r3, r3, #15
 800a29e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a2a0:	4b32      	ldr	r3, [pc, #200]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a6:	0f1b      	lsrs	r3, r3, #28
 800a2a8:	f003 0307 	and.w	r3, r3, #7
 800a2ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	019a      	lsls	r2, r3, #6
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	041b      	lsls	r3, r3, #16
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	061b      	lsls	r3, r3, #24
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	071b      	lsls	r3, r3, #28
 800a2c6:	4929      	ldr	r1, [pc, #164]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0308 	and.w	r3, r3, #8
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d028      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a2da:	4b24      	ldr	r3, [pc, #144]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a2dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e0:	0e1b      	lsrs	r3, r3, #24
 800a2e2:	f003 030f 	and.w	r3, r3, #15
 800a2e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a2e8:	4b20      	ldr	r3, [pc, #128]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ee:	0c1b      	lsrs	r3, r3, #16
 800a2f0:	f003 0303 	and.w	r3, r3, #3
 800a2f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	019a      	lsls	r2, r3, #6
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	041b      	lsls	r3, r3, #16
 800a300:	431a      	orrs	r2, r3
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	061b      	lsls	r3, r3, #24
 800a306:	431a      	orrs	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	071b      	lsls	r3, r3, #28
 800a30e:	4917      	ldr	r1, [pc, #92]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a310:	4313      	orrs	r3, r2
 800a312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a316:	4b15      	ldr	r3, [pc, #84]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a31c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a324:	4911      	ldr	r1, [pc, #68]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a326:	4313      	orrs	r3, r2
 800a328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a32c:	4b0f      	ldr	r3, [pc, #60]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a0e      	ldr	r2, [pc, #56]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a338:	f7fe fbce 	bl	8008ad8 <HAL_GetTick>
 800a33c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a33e:	e008      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a340:	f7fe fbca 	bl	8008ad8 <HAL_GetTick>
 800a344:	4602      	mov	r2, r0
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	2b64      	cmp	r3, #100	; 0x64
 800a34c:	d901      	bls.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a34e:	2303      	movs	r3, #3
 800a350:	e007      	b.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a352:	4b06      	ldr	r3, [pc, #24]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a35a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a35e:	d1ef      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3720      	adds	r7, #32
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	40023800 	.word	0x40023800

0800a370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d101      	bne.n	800a382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e040      	b.n	800a404 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a386:	2b00      	cmp	r3, #0
 800a388:	d106      	bne.n	800a398 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7fe fa90 	bl	80088b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2224      	movs	r2, #36	; 0x24
 800a39c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f022 0201 	bic.w	r2, r2, #1
 800a3ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f8be 	bl	800a530 <UART_SetConfig>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d101      	bne.n	800a3be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e022      	b.n	800a404 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d002      	beq.n	800a3cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fb5c 	bl	800aa84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	689a      	ldr	r2, [r3, #8]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f042 0201 	orr.w	r2, r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fbe3 	bl	800abc8 <UART_CheckIdleState>
 800a402:	4603      	mov	r3, r0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08a      	sub	sp, #40	; 0x28
 800a410:	af02      	add	r7, sp, #8
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	603b      	str	r3, [r7, #0]
 800a418:	4613      	mov	r3, r2
 800a41a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a420:	2b20      	cmp	r3, #32
 800a422:	d17f      	bne.n	800a524 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d002      	beq.n	800a430 <HAL_UART_Transmit+0x24>
 800a42a:	88fb      	ldrh	r3, [r7, #6]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	e078      	b.n	800a526 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d101      	bne.n	800a442 <HAL_UART_Transmit+0x36>
 800a43e:	2302      	movs	r3, #2
 800a440:	e071      	b.n	800a526 <HAL_UART_Transmit+0x11a>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2221      	movs	r2, #33	; 0x21
 800a454:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a456:	f7fe fb3f 	bl	8008ad8 <HAL_GetTick>
 800a45a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	88fa      	ldrh	r2, [r7, #6]
 800a460:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	88fa      	ldrh	r2, [r7, #6]
 800a468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a474:	d108      	bne.n	800a488 <HAL_UART_Transmit+0x7c>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d104      	bne.n	800a488 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a47e:	2300      	movs	r3, #0
 800a480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	61bb      	str	r3, [r7, #24]
 800a486:	e003      	b.n	800a490 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a498:	e02c      	b.n	800a4f4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2180      	movs	r1, #128	; 0x80
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 fbd4 	bl	800ac52 <UART_WaitOnFlagUntilTimeout>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d001      	beq.n	800a4b4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e038      	b.n	800a526 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10b      	bne.n	800a4d2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	3302      	adds	r3, #2
 800a4ce:	61bb      	str	r3, [r7, #24]
 800a4d0:	e007      	b.n	800a4e2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	781a      	ldrb	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1cc      	bne.n	800a49a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	2200      	movs	r2, #0
 800a508:	2140      	movs	r1, #64	; 0x40
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f000 fba1 	bl	800ac52 <UART_WaitOnFlagUntilTimeout>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e005      	b.n	800a526 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2220      	movs	r2, #32
 800a51e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	e000      	b.n	800a526 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a524:	2302      	movs	r3, #2
  }
}
 800a526:	4618      	mov	r0, r3
 800a528:	3720      	adds	r7, #32
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
	...

0800a530 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b088      	sub	sp, #32
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a538:	2300      	movs	r3, #0
 800a53a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	689a      	ldr	r2, [r3, #8]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	431a      	orrs	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	431a      	orrs	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	69db      	ldr	r3, [r3, #28]
 800a554:	4313      	orrs	r3, r2
 800a556:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	4bb1      	ldr	r3, [pc, #708]	; (800a824 <UART_SetConfig+0x2f4>)
 800a560:	4013      	ands	r3, r2
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6812      	ldr	r2, [r2, #0]
 800a566:	6939      	ldr	r1, [r7, #16]
 800a568:	430b      	orrs	r3, r1
 800a56a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68da      	ldr	r2, [r3, #12]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	699b      	ldr	r3, [r3, #24]
 800a586:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	4313      	orrs	r3, r2
 800a590:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a9f      	ldr	r2, [pc, #636]	; (800a828 <UART_SetConfig+0x2f8>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d121      	bne.n	800a5f4 <UART_SetConfig+0xc4>
 800a5b0:	4b9e      	ldr	r3, [pc, #632]	; (800a82c <UART_SetConfig+0x2fc>)
 800a5b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5b6:	f003 0303 	and.w	r3, r3, #3
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d816      	bhi.n	800a5ec <UART_SetConfig+0xbc>
 800a5be:	a201      	add	r2, pc, #4	; (adr r2, 800a5c4 <UART_SetConfig+0x94>)
 800a5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c4:	0800a5d5 	.word	0x0800a5d5
 800a5c8:	0800a5e1 	.word	0x0800a5e1
 800a5cc:	0800a5db 	.word	0x0800a5db
 800a5d0:	0800a5e7 	.word	0x0800a5e7
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	77fb      	strb	r3, [r7, #31]
 800a5d8:	e151      	b.n	800a87e <UART_SetConfig+0x34e>
 800a5da:	2302      	movs	r3, #2
 800a5dc:	77fb      	strb	r3, [r7, #31]
 800a5de:	e14e      	b.n	800a87e <UART_SetConfig+0x34e>
 800a5e0:	2304      	movs	r3, #4
 800a5e2:	77fb      	strb	r3, [r7, #31]
 800a5e4:	e14b      	b.n	800a87e <UART_SetConfig+0x34e>
 800a5e6:	2308      	movs	r3, #8
 800a5e8:	77fb      	strb	r3, [r7, #31]
 800a5ea:	e148      	b.n	800a87e <UART_SetConfig+0x34e>
 800a5ec:	2310      	movs	r3, #16
 800a5ee:	77fb      	strb	r3, [r7, #31]
 800a5f0:	bf00      	nop
 800a5f2:	e144      	b.n	800a87e <UART_SetConfig+0x34e>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a8d      	ldr	r2, [pc, #564]	; (800a830 <UART_SetConfig+0x300>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d134      	bne.n	800a668 <UART_SetConfig+0x138>
 800a5fe:	4b8b      	ldr	r3, [pc, #556]	; (800a82c <UART_SetConfig+0x2fc>)
 800a600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a604:	f003 030c 	and.w	r3, r3, #12
 800a608:	2b0c      	cmp	r3, #12
 800a60a:	d829      	bhi.n	800a660 <UART_SetConfig+0x130>
 800a60c:	a201      	add	r2, pc, #4	; (adr r2, 800a614 <UART_SetConfig+0xe4>)
 800a60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a612:	bf00      	nop
 800a614:	0800a649 	.word	0x0800a649
 800a618:	0800a661 	.word	0x0800a661
 800a61c:	0800a661 	.word	0x0800a661
 800a620:	0800a661 	.word	0x0800a661
 800a624:	0800a655 	.word	0x0800a655
 800a628:	0800a661 	.word	0x0800a661
 800a62c:	0800a661 	.word	0x0800a661
 800a630:	0800a661 	.word	0x0800a661
 800a634:	0800a64f 	.word	0x0800a64f
 800a638:	0800a661 	.word	0x0800a661
 800a63c:	0800a661 	.word	0x0800a661
 800a640:	0800a661 	.word	0x0800a661
 800a644:	0800a65b 	.word	0x0800a65b
 800a648:	2300      	movs	r3, #0
 800a64a:	77fb      	strb	r3, [r7, #31]
 800a64c:	e117      	b.n	800a87e <UART_SetConfig+0x34e>
 800a64e:	2302      	movs	r3, #2
 800a650:	77fb      	strb	r3, [r7, #31]
 800a652:	e114      	b.n	800a87e <UART_SetConfig+0x34e>
 800a654:	2304      	movs	r3, #4
 800a656:	77fb      	strb	r3, [r7, #31]
 800a658:	e111      	b.n	800a87e <UART_SetConfig+0x34e>
 800a65a:	2308      	movs	r3, #8
 800a65c:	77fb      	strb	r3, [r7, #31]
 800a65e:	e10e      	b.n	800a87e <UART_SetConfig+0x34e>
 800a660:	2310      	movs	r3, #16
 800a662:	77fb      	strb	r3, [r7, #31]
 800a664:	bf00      	nop
 800a666:	e10a      	b.n	800a87e <UART_SetConfig+0x34e>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a71      	ldr	r2, [pc, #452]	; (800a834 <UART_SetConfig+0x304>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d120      	bne.n	800a6b4 <UART_SetConfig+0x184>
 800a672:	4b6e      	ldr	r3, [pc, #440]	; (800a82c <UART_SetConfig+0x2fc>)
 800a674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a678:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a67c:	2b10      	cmp	r3, #16
 800a67e:	d00f      	beq.n	800a6a0 <UART_SetConfig+0x170>
 800a680:	2b10      	cmp	r3, #16
 800a682:	d802      	bhi.n	800a68a <UART_SetConfig+0x15a>
 800a684:	2b00      	cmp	r3, #0
 800a686:	d005      	beq.n	800a694 <UART_SetConfig+0x164>
 800a688:	e010      	b.n	800a6ac <UART_SetConfig+0x17c>
 800a68a:	2b20      	cmp	r3, #32
 800a68c:	d005      	beq.n	800a69a <UART_SetConfig+0x16a>
 800a68e:	2b30      	cmp	r3, #48	; 0x30
 800a690:	d009      	beq.n	800a6a6 <UART_SetConfig+0x176>
 800a692:	e00b      	b.n	800a6ac <UART_SetConfig+0x17c>
 800a694:	2300      	movs	r3, #0
 800a696:	77fb      	strb	r3, [r7, #31]
 800a698:	e0f1      	b.n	800a87e <UART_SetConfig+0x34e>
 800a69a:	2302      	movs	r3, #2
 800a69c:	77fb      	strb	r3, [r7, #31]
 800a69e:	e0ee      	b.n	800a87e <UART_SetConfig+0x34e>
 800a6a0:	2304      	movs	r3, #4
 800a6a2:	77fb      	strb	r3, [r7, #31]
 800a6a4:	e0eb      	b.n	800a87e <UART_SetConfig+0x34e>
 800a6a6:	2308      	movs	r3, #8
 800a6a8:	77fb      	strb	r3, [r7, #31]
 800a6aa:	e0e8      	b.n	800a87e <UART_SetConfig+0x34e>
 800a6ac:	2310      	movs	r3, #16
 800a6ae:	77fb      	strb	r3, [r7, #31]
 800a6b0:	bf00      	nop
 800a6b2:	e0e4      	b.n	800a87e <UART_SetConfig+0x34e>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a5f      	ldr	r2, [pc, #380]	; (800a838 <UART_SetConfig+0x308>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d120      	bne.n	800a700 <UART_SetConfig+0x1d0>
 800a6be:	4b5b      	ldr	r3, [pc, #364]	; (800a82c <UART_SetConfig+0x2fc>)
 800a6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a6c8:	2b40      	cmp	r3, #64	; 0x40
 800a6ca:	d00f      	beq.n	800a6ec <UART_SetConfig+0x1bc>
 800a6cc:	2b40      	cmp	r3, #64	; 0x40
 800a6ce:	d802      	bhi.n	800a6d6 <UART_SetConfig+0x1a6>
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d005      	beq.n	800a6e0 <UART_SetConfig+0x1b0>
 800a6d4:	e010      	b.n	800a6f8 <UART_SetConfig+0x1c8>
 800a6d6:	2b80      	cmp	r3, #128	; 0x80
 800a6d8:	d005      	beq.n	800a6e6 <UART_SetConfig+0x1b6>
 800a6da:	2bc0      	cmp	r3, #192	; 0xc0
 800a6dc:	d009      	beq.n	800a6f2 <UART_SetConfig+0x1c2>
 800a6de:	e00b      	b.n	800a6f8 <UART_SetConfig+0x1c8>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	77fb      	strb	r3, [r7, #31]
 800a6e4:	e0cb      	b.n	800a87e <UART_SetConfig+0x34e>
 800a6e6:	2302      	movs	r3, #2
 800a6e8:	77fb      	strb	r3, [r7, #31]
 800a6ea:	e0c8      	b.n	800a87e <UART_SetConfig+0x34e>
 800a6ec:	2304      	movs	r3, #4
 800a6ee:	77fb      	strb	r3, [r7, #31]
 800a6f0:	e0c5      	b.n	800a87e <UART_SetConfig+0x34e>
 800a6f2:	2308      	movs	r3, #8
 800a6f4:	77fb      	strb	r3, [r7, #31]
 800a6f6:	e0c2      	b.n	800a87e <UART_SetConfig+0x34e>
 800a6f8:	2310      	movs	r3, #16
 800a6fa:	77fb      	strb	r3, [r7, #31]
 800a6fc:	bf00      	nop
 800a6fe:	e0be      	b.n	800a87e <UART_SetConfig+0x34e>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a4d      	ldr	r2, [pc, #308]	; (800a83c <UART_SetConfig+0x30c>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d124      	bne.n	800a754 <UART_SetConfig+0x224>
 800a70a:	4b48      	ldr	r3, [pc, #288]	; (800a82c <UART_SetConfig+0x2fc>)
 800a70c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a718:	d012      	beq.n	800a740 <UART_SetConfig+0x210>
 800a71a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a71e:	d802      	bhi.n	800a726 <UART_SetConfig+0x1f6>
 800a720:	2b00      	cmp	r3, #0
 800a722:	d007      	beq.n	800a734 <UART_SetConfig+0x204>
 800a724:	e012      	b.n	800a74c <UART_SetConfig+0x21c>
 800a726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a72a:	d006      	beq.n	800a73a <UART_SetConfig+0x20a>
 800a72c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a730:	d009      	beq.n	800a746 <UART_SetConfig+0x216>
 800a732:	e00b      	b.n	800a74c <UART_SetConfig+0x21c>
 800a734:	2300      	movs	r3, #0
 800a736:	77fb      	strb	r3, [r7, #31]
 800a738:	e0a1      	b.n	800a87e <UART_SetConfig+0x34e>
 800a73a:	2302      	movs	r3, #2
 800a73c:	77fb      	strb	r3, [r7, #31]
 800a73e:	e09e      	b.n	800a87e <UART_SetConfig+0x34e>
 800a740:	2304      	movs	r3, #4
 800a742:	77fb      	strb	r3, [r7, #31]
 800a744:	e09b      	b.n	800a87e <UART_SetConfig+0x34e>
 800a746:	2308      	movs	r3, #8
 800a748:	77fb      	strb	r3, [r7, #31]
 800a74a:	e098      	b.n	800a87e <UART_SetConfig+0x34e>
 800a74c:	2310      	movs	r3, #16
 800a74e:	77fb      	strb	r3, [r7, #31]
 800a750:	bf00      	nop
 800a752:	e094      	b.n	800a87e <UART_SetConfig+0x34e>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a39      	ldr	r2, [pc, #228]	; (800a840 <UART_SetConfig+0x310>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d124      	bne.n	800a7a8 <UART_SetConfig+0x278>
 800a75e:	4b33      	ldr	r3, [pc, #204]	; (800a82c <UART_SetConfig+0x2fc>)
 800a760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a764:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a76c:	d012      	beq.n	800a794 <UART_SetConfig+0x264>
 800a76e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a772:	d802      	bhi.n	800a77a <UART_SetConfig+0x24a>
 800a774:	2b00      	cmp	r3, #0
 800a776:	d007      	beq.n	800a788 <UART_SetConfig+0x258>
 800a778:	e012      	b.n	800a7a0 <UART_SetConfig+0x270>
 800a77a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a77e:	d006      	beq.n	800a78e <UART_SetConfig+0x25e>
 800a780:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a784:	d009      	beq.n	800a79a <UART_SetConfig+0x26a>
 800a786:	e00b      	b.n	800a7a0 <UART_SetConfig+0x270>
 800a788:	2301      	movs	r3, #1
 800a78a:	77fb      	strb	r3, [r7, #31]
 800a78c:	e077      	b.n	800a87e <UART_SetConfig+0x34e>
 800a78e:	2302      	movs	r3, #2
 800a790:	77fb      	strb	r3, [r7, #31]
 800a792:	e074      	b.n	800a87e <UART_SetConfig+0x34e>
 800a794:	2304      	movs	r3, #4
 800a796:	77fb      	strb	r3, [r7, #31]
 800a798:	e071      	b.n	800a87e <UART_SetConfig+0x34e>
 800a79a:	2308      	movs	r3, #8
 800a79c:	77fb      	strb	r3, [r7, #31]
 800a79e:	e06e      	b.n	800a87e <UART_SetConfig+0x34e>
 800a7a0:	2310      	movs	r3, #16
 800a7a2:	77fb      	strb	r3, [r7, #31]
 800a7a4:	bf00      	nop
 800a7a6:	e06a      	b.n	800a87e <UART_SetConfig+0x34e>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a25      	ldr	r2, [pc, #148]	; (800a844 <UART_SetConfig+0x314>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d124      	bne.n	800a7fc <UART_SetConfig+0x2cc>
 800a7b2:	4b1e      	ldr	r3, [pc, #120]	; (800a82c <UART_SetConfig+0x2fc>)
 800a7b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7b8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a7bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7c0:	d012      	beq.n	800a7e8 <UART_SetConfig+0x2b8>
 800a7c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7c6:	d802      	bhi.n	800a7ce <UART_SetConfig+0x29e>
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d007      	beq.n	800a7dc <UART_SetConfig+0x2ac>
 800a7cc:	e012      	b.n	800a7f4 <UART_SetConfig+0x2c4>
 800a7ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7d2:	d006      	beq.n	800a7e2 <UART_SetConfig+0x2b2>
 800a7d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a7d8:	d009      	beq.n	800a7ee <UART_SetConfig+0x2be>
 800a7da:	e00b      	b.n	800a7f4 <UART_SetConfig+0x2c4>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	77fb      	strb	r3, [r7, #31]
 800a7e0:	e04d      	b.n	800a87e <UART_SetConfig+0x34e>
 800a7e2:	2302      	movs	r3, #2
 800a7e4:	77fb      	strb	r3, [r7, #31]
 800a7e6:	e04a      	b.n	800a87e <UART_SetConfig+0x34e>
 800a7e8:	2304      	movs	r3, #4
 800a7ea:	77fb      	strb	r3, [r7, #31]
 800a7ec:	e047      	b.n	800a87e <UART_SetConfig+0x34e>
 800a7ee:	2308      	movs	r3, #8
 800a7f0:	77fb      	strb	r3, [r7, #31]
 800a7f2:	e044      	b.n	800a87e <UART_SetConfig+0x34e>
 800a7f4:	2310      	movs	r3, #16
 800a7f6:	77fb      	strb	r3, [r7, #31]
 800a7f8:	bf00      	nop
 800a7fa:	e040      	b.n	800a87e <UART_SetConfig+0x34e>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a11      	ldr	r2, [pc, #68]	; (800a848 <UART_SetConfig+0x318>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d139      	bne.n	800a87a <UART_SetConfig+0x34a>
 800a806:	4b09      	ldr	r3, [pc, #36]	; (800a82c <UART_SetConfig+0x2fc>)
 800a808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a80c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a814:	d027      	beq.n	800a866 <UART_SetConfig+0x336>
 800a816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a81a:	d817      	bhi.n	800a84c <UART_SetConfig+0x31c>
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01c      	beq.n	800a85a <UART_SetConfig+0x32a>
 800a820:	e027      	b.n	800a872 <UART_SetConfig+0x342>
 800a822:	bf00      	nop
 800a824:	efff69f3 	.word	0xefff69f3
 800a828:	40011000 	.word	0x40011000
 800a82c:	40023800 	.word	0x40023800
 800a830:	40004400 	.word	0x40004400
 800a834:	40004800 	.word	0x40004800
 800a838:	40004c00 	.word	0x40004c00
 800a83c:	40005000 	.word	0x40005000
 800a840:	40011400 	.word	0x40011400
 800a844:	40007800 	.word	0x40007800
 800a848:	40007c00 	.word	0x40007c00
 800a84c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a850:	d006      	beq.n	800a860 <UART_SetConfig+0x330>
 800a852:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a856:	d009      	beq.n	800a86c <UART_SetConfig+0x33c>
 800a858:	e00b      	b.n	800a872 <UART_SetConfig+0x342>
 800a85a:	2300      	movs	r3, #0
 800a85c:	77fb      	strb	r3, [r7, #31]
 800a85e:	e00e      	b.n	800a87e <UART_SetConfig+0x34e>
 800a860:	2302      	movs	r3, #2
 800a862:	77fb      	strb	r3, [r7, #31]
 800a864:	e00b      	b.n	800a87e <UART_SetConfig+0x34e>
 800a866:	2304      	movs	r3, #4
 800a868:	77fb      	strb	r3, [r7, #31]
 800a86a:	e008      	b.n	800a87e <UART_SetConfig+0x34e>
 800a86c:	2308      	movs	r3, #8
 800a86e:	77fb      	strb	r3, [r7, #31]
 800a870:	e005      	b.n	800a87e <UART_SetConfig+0x34e>
 800a872:	2310      	movs	r3, #16
 800a874:	77fb      	strb	r3, [r7, #31]
 800a876:	bf00      	nop
 800a878:	e001      	b.n	800a87e <UART_SetConfig+0x34e>
 800a87a:	2310      	movs	r3, #16
 800a87c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a886:	d17f      	bne.n	800a988 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a888:	7ffb      	ldrb	r3, [r7, #31]
 800a88a:	2b08      	cmp	r3, #8
 800a88c:	d85c      	bhi.n	800a948 <UART_SetConfig+0x418>
 800a88e:	a201      	add	r2, pc, #4	; (adr r2, 800a894 <UART_SetConfig+0x364>)
 800a890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a894:	0800a8b9 	.word	0x0800a8b9
 800a898:	0800a8d9 	.word	0x0800a8d9
 800a89c:	0800a8f9 	.word	0x0800a8f9
 800a8a0:	0800a949 	.word	0x0800a949
 800a8a4:	0800a911 	.word	0x0800a911
 800a8a8:	0800a949 	.word	0x0800a949
 800a8ac:	0800a949 	.word	0x0800a949
 800a8b0:	0800a949 	.word	0x0800a949
 800a8b4:	0800a931 	.word	0x0800a931
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8b8:	f7ff f90c 	bl	8009ad4 <HAL_RCC_GetPCLK1Freq>
 800a8bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	005a      	lsls	r2, r3, #1
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	085b      	lsrs	r3, r3, #1
 800a8c8:	441a      	add	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	61bb      	str	r3, [r7, #24]
        break;
 800a8d6:	e03a      	b.n	800a94e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8d8:	f7ff f910 	bl	8009afc <HAL_RCC_GetPCLK2Freq>
 800a8dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	005a      	lsls	r2, r3, #1
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	085b      	lsrs	r3, r3, #1
 800a8e8:	441a      	add	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	61bb      	str	r3, [r7, #24]
        break;
 800a8f6:	e02a      	b.n	800a94e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	085a      	lsrs	r2, r3, #1
 800a8fe:	4b5f      	ldr	r3, [pc, #380]	; (800aa7c <UART_SetConfig+0x54c>)
 800a900:	4413      	add	r3, r2
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	6852      	ldr	r2, [r2, #4]
 800a906:	fbb3 f3f2 	udiv	r3, r3, r2
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	61bb      	str	r3, [r7, #24]
        break;
 800a90e:	e01e      	b.n	800a94e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a910:	f7fe fffc 	bl	800990c <HAL_RCC_GetSysClockFreq>
 800a914:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	005a      	lsls	r2, r3, #1
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	085b      	lsrs	r3, r3, #1
 800a920:	441a      	add	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	fbb2 f3f3 	udiv	r3, r2, r3
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	61bb      	str	r3, [r7, #24]
        break;
 800a92e:	e00e      	b.n	800a94e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	085b      	lsrs	r3, r3, #1
 800a936:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a942:	b29b      	uxth	r3, r3
 800a944:	61bb      	str	r3, [r7, #24]
        break;
 800a946:	e002      	b.n	800a94e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	75fb      	strb	r3, [r7, #23]
        break;
 800a94c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a94e:	69bb      	ldr	r3, [r7, #24]
 800a950:	2b0f      	cmp	r3, #15
 800a952:	d916      	bls.n	800a982 <UART_SetConfig+0x452>
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a95a:	d212      	bcs.n	800a982 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	b29b      	uxth	r3, r3
 800a960:	f023 030f 	bic.w	r3, r3, #15
 800a964:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	085b      	lsrs	r3, r3, #1
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	f003 0307 	and.w	r3, r3, #7
 800a970:	b29a      	uxth	r2, r3
 800a972:	897b      	ldrh	r3, [r7, #10]
 800a974:	4313      	orrs	r3, r2
 800a976:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	897a      	ldrh	r2, [r7, #10]
 800a97e:	60da      	str	r2, [r3, #12]
 800a980:	e070      	b.n	800aa64 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	75fb      	strb	r3, [r7, #23]
 800a986:	e06d      	b.n	800aa64 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a988:	7ffb      	ldrb	r3, [r7, #31]
 800a98a:	2b08      	cmp	r3, #8
 800a98c:	d859      	bhi.n	800aa42 <UART_SetConfig+0x512>
 800a98e:	a201      	add	r2, pc, #4	; (adr r2, 800a994 <UART_SetConfig+0x464>)
 800a990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a994:	0800a9b9 	.word	0x0800a9b9
 800a998:	0800a9d7 	.word	0x0800a9d7
 800a99c:	0800a9f5 	.word	0x0800a9f5
 800a9a0:	0800aa43 	.word	0x0800aa43
 800a9a4:	0800aa0d 	.word	0x0800aa0d
 800a9a8:	0800aa43 	.word	0x0800aa43
 800a9ac:	0800aa43 	.word	0x0800aa43
 800a9b0:	0800aa43 	.word	0x0800aa43
 800a9b4:	0800aa2b 	.word	0x0800aa2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9b8:	f7ff f88c 	bl	8009ad4 <HAL_RCC_GetPCLK1Freq>
 800a9bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	085a      	lsrs	r2, r3, #1
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	441a      	add	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	61bb      	str	r3, [r7, #24]
        break;
 800a9d4:	e038      	b.n	800aa48 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9d6:	f7ff f891 	bl	8009afc <HAL_RCC_GetPCLK2Freq>
 800a9da:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	085a      	lsrs	r2, r3, #1
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	441a      	add	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	61bb      	str	r3, [r7, #24]
        break;
 800a9f2:	e029      	b.n	800aa48 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	085a      	lsrs	r2, r3, #1
 800a9fa:	4b21      	ldr	r3, [pc, #132]	; (800aa80 <UART_SetConfig+0x550>)
 800a9fc:	4413      	add	r3, r2
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	6852      	ldr	r2, [r2, #4]
 800aa02:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	61bb      	str	r3, [r7, #24]
        break;
 800aa0a:	e01d      	b.n	800aa48 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa0c:	f7fe ff7e 	bl	800990c <HAL_RCC_GetSysClockFreq>
 800aa10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	085a      	lsrs	r2, r3, #1
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	441a      	add	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	61bb      	str	r3, [r7, #24]
        break;
 800aa28:	e00e      	b.n	800aa48 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	085b      	lsrs	r3, r3, #1
 800aa30:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	61bb      	str	r3, [r7, #24]
        break;
 800aa40:	e002      	b.n	800aa48 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	75fb      	strb	r3, [r7, #23]
        break;
 800aa46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	2b0f      	cmp	r3, #15
 800aa4c:	d908      	bls.n	800aa60 <UART_SetConfig+0x530>
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa54:	d204      	bcs.n	800aa60 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	60da      	str	r2, [r3, #12]
 800aa5e:	e001      	b.n	800aa64 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800aa70:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3720      	adds	r7, #32
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	01e84800 	.word	0x01e84800
 800aa80:	00f42400 	.word	0x00f42400

0800aa84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	f003 0301 	and.w	r3, r3, #1
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00a      	beq.n	800aaae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab2:	f003 0302 	and.w	r3, r3, #2
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	430a      	orrs	r2, r1
 800aace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00a      	beq.n	800aaf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	f003 0308 	and.w	r3, r3, #8
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00a      	beq.n	800ab14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	430a      	orrs	r2, r1
 800ab12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	f003 0310 	and.w	r3, r3, #16
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00a      	beq.n	800ab36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3a:	f003 0320 	and.w	r3, r3, #32
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00a      	beq.n	800ab58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	430a      	orrs	r2, r1
 800ab56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d01a      	beq.n	800ab9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	430a      	orrs	r2, r1
 800ab78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab82:	d10a      	bne.n	800ab9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00a      	beq.n	800abbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	430a      	orrs	r2, r1
 800abba:	605a      	str	r2, [r3, #4]
  }
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af02      	add	r7, sp, #8
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800abd6:	f7fd ff7f 	bl	8008ad8 <HAL_GetTick>
 800abda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0308 	and.w	r3, r3, #8
 800abe6:	2b08      	cmp	r3, #8
 800abe8:	d10e      	bne.n	800ac08 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 f82a 	bl	800ac52 <UART_WaitOnFlagUntilTimeout>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e020      	b.n	800ac4a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f003 0304 	and.w	r3, r3, #4
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d10e      	bne.n	800ac34 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 f814 	bl	800ac52 <UART_WaitOnFlagUntilTimeout>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d001      	beq.n	800ac34 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e00a      	b.n	800ac4a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2220      	movs	r2, #32
 800ac38:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2220      	movs	r2, #32
 800ac3e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3710      	adds	r7, #16
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	60f8      	str	r0, [r7, #12]
 800ac5a:	60b9      	str	r1, [r7, #8]
 800ac5c:	603b      	str	r3, [r7, #0]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac62:	e05d      	b.n	800ad20 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6a:	d059      	beq.n	800ad20 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac6c:	f7fd ff34 	bl	8008ad8 <HAL_GetTick>
 800ac70:	4602      	mov	r2, r0
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	69ba      	ldr	r2, [r7, #24]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d302      	bcc.n	800ac82 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d11b      	bne.n	800acba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ac90:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	689a      	ldr	r2, [r3, #8]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f022 0201 	bic.w	r2, r2, #1
 800aca0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2220      	movs	r2, #32
 800aca6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2220      	movs	r2, #32
 800acac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800acb6:	2303      	movs	r3, #3
 800acb8:	e042      	b.n	800ad40 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 0304 	and.w	r3, r3, #4
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d02b      	beq.n	800ad20 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	69db      	ldr	r3, [r3, #28]
 800acce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acd6:	d123      	bne.n	800ad20 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ace0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800acf0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689a      	ldr	r2, [r3, #8]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f022 0201 	bic.w	r2, r2, #1
 800ad00:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2220      	movs	r2, #32
 800ad06:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2220      	movs	r2, #32
 800ad0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2220      	movs	r2, #32
 800ad12:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	e00f      	b.n	800ad40 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	69da      	ldr	r2, [r3, #28]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	4013      	ands	r3, r2
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	bf0c      	ite	eq
 800ad30:	2301      	moveq	r3, #1
 800ad32:	2300      	movne	r3, #0
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	461a      	mov	r2, r3
 800ad38:	79fb      	ldrb	r3, [r7, #7]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d092      	beq.n	800ac64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <__libc_init_array>:
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	4e0d      	ldr	r6, [pc, #52]	; (800ad80 <__libc_init_array+0x38>)
 800ad4c:	4c0d      	ldr	r4, [pc, #52]	; (800ad84 <__libc_init_array+0x3c>)
 800ad4e:	1ba4      	subs	r4, r4, r6
 800ad50:	10a4      	asrs	r4, r4, #2
 800ad52:	2500      	movs	r5, #0
 800ad54:	42a5      	cmp	r5, r4
 800ad56:	d109      	bne.n	800ad6c <__libc_init_array+0x24>
 800ad58:	4e0b      	ldr	r6, [pc, #44]	; (800ad88 <__libc_init_array+0x40>)
 800ad5a:	4c0c      	ldr	r4, [pc, #48]	; (800ad8c <__libc_init_array+0x44>)
 800ad5c:	f000 f820 	bl	800ada0 <_init>
 800ad60:	1ba4      	subs	r4, r4, r6
 800ad62:	10a4      	asrs	r4, r4, #2
 800ad64:	2500      	movs	r5, #0
 800ad66:	42a5      	cmp	r5, r4
 800ad68:	d105      	bne.n	800ad76 <__libc_init_array+0x2e>
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad70:	4798      	blx	r3
 800ad72:	3501      	adds	r5, #1
 800ad74:	e7ee      	b.n	800ad54 <__libc_init_array+0xc>
 800ad76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad7a:	4798      	blx	r3
 800ad7c:	3501      	adds	r5, #1
 800ad7e:	e7f2      	b.n	800ad66 <__libc_init_array+0x1e>
 800ad80:	0800add8 	.word	0x0800add8
 800ad84:	0800add8 	.word	0x0800add8
 800ad88:	0800add8 	.word	0x0800add8
 800ad8c:	0800addc 	.word	0x0800addc

0800ad90 <memset>:
 800ad90:	4402      	add	r2, r0
 800ad92:	4603      	mov	r3, r0
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d100      	bne.n	800ad9a <memset+0xa>
 800ad98:	4770      	bx	lr
 800ad9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad9e:	e7f9      	b.n	800ad94 <memset+0x4>

0800ada0 <_init>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	bf00      	nop
 800ada4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada6:	bc08      	pop	{r3}
 800ada8:	469e      	mov	lr, r3
 800adaa:	4770      	bx	lr

0800adac <_fini>:
 800adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adae:	bf00      	nop
 800adb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb2:	bc08      	pop	{r3}
 800adb4:	469e      	mov	lr, r3
 800adb6:	4770      	bx	lr
